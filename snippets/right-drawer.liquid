<style>
  /* Cart Item Layout Styles */

  /* Variant Selector Styles */
  .product-card-basic__variants {
    margin: 5px 0;
    width: 100%;
  }

  .product-card-variant-selector {
    width: 100%;
    padding: 6px 8px;
    font-size: 12px;
    border: 1px solid #e8e8e8;
    border-radius: 4px;
    background-color: #f9f9f9;
    color: #333;
    cursor: pointer;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='10' height='6' fill='none'%3E%3Cpath stroke='%23333' stroke-width='1.5' d='M1 1l4 4 4-4'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 8px center;
    padding-right: 24px;
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
  }

  .product-card-variant-selector:focus {
    outline: none;
    border-color: #999;
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.1);
  }

  .product-card-variant-selector option {
    font-size: 12px;
  }

  .product-card-variant-selector option:disabled {
    color: #999;
  }

  /* Compare price styles */
  .product-card-basic__compare-price {
    text-decoration: line-through;
    color: #999;
    margin-right: 8px;
    font-size: 0.9em;
    display: inline-block;
  }

  .product-card-basic__price {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
  }

  /* Mobile-specific variant selector styles */
  @media screen and (max-width: 767px) {
    .product-card-variant-selector {
      padding: 5px 6px;
      font-size: 11px;
      background-position: right 6px center;
    }

    .product-card-basic__variants {
      margin: 3px 0;
    }
  }

  .mobile-cart-drawer-none-container-recommendations {
    display: none;
  }

  .desktop-cart-drawer-none-container-recommendations {
  }

  .ajaxcart__row {
    padding: 15px 0;
    border-bottom: 1px solid #e8e8e8;
    position: relative;
    transition: opacity 0.3s ease, height 0.3s ease;
  }

  footer.global-drawer__footer {
    padding: 20px !important;
  }

  a.btn.btn--secondary.dynamic-section-button--drawer-outlined.cart-drawer__footer--button.cart-drawer__view-cart-btn {
    color: #fff;
  }

  span.cart-drawer__subtotal--price-value.cart-drawer__subtotal--sale {
    color: red;
  }

  /* 修复最后一个产品和底部之间的间距 */
  .cart-drawer-main-content {
    padding-bottom: 20px !important;
  }

  /* Free Shipping Progress Bar */
  .shipping-progress-container {
    width: 100%;
    /* padding: 15px; */
    margin-bottom: 5px;
    border-radius: 5px;
    display: flex;
    flex-direction: column-reverse;
    gap: 10px;
  }

  li.ajaxcart-item__discount.auto-discount--price-container-custom {
    background: red;
    color: #fff;
    display: inline-block;
    padding: 4px;
    font-size: 12px;
    margin: 0;
  }

  .grid--full.ajaxcart__quantity-wrapper.ajaxcart__quantity-wrapper-custom-new-by {
    padding: 0;
  }

  .shipping-progress-bar {
    width: 100%;
    height: 8px;
    background-color: #e0e0e0;
    border-radius: 10px;
    overflow: hidden;
    position: relative;
    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  .shipping-progress-bar__fill {
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    background: linear-gradient(90deg, #000000, #333333);
    border-radius: 10px;
    transition: width 0.5s ease-out;
    max-width: 100%;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
  }

  .shipping-progress-text {
    font-size: 14px;
    text-align: center;
    transition: opacity 0.3s ease;
  }

  .shipping-progress-success {
    color: #2ecc71;
    font-weight: 600;
  }

  .shipping-progress-remaining {
    font-weight: 600;
    color: #333;
    display: inline-block;
  }
  
  .free-shipping-message {
    display: block;
    line-height: 1.4;
  }

  /* Responsive styles for shipping progress bar */
  @media screen and (max-width: 767px) {
    .shipping-progress-container {
      padding: 8px 0;
    }

    .shipping-progress-bar {
      height: 6px;
    }

    .shipping-progress-text {
      font-size: 12px;
    }
  }

  /* 添加购物车和推荐产品的弹性布局 */
  .cart-drawer-flex-container {
    display: flex;
    flex-direction: column;
    /* gap: 20px; */
    width: 100%;
    order: 1;
    height: 100%;
    /* 确保容器占满高度 */
    flex: 1;
    /* 添加flex属性以确保正确伸展 */
  }

  form.cart.ajaxcart.new-cust-cart-drawer-flex-container {
    display: flex;
    flex-wrap: nowrap;
    height: 100%;
    /* 确保表单占满高度 */
    overflow: hidden;
    /* 防止整体滚动 */
    flex-direction: column;
    /* Default to column direction */
  }

  /* Ensure proper order of elements in the cart drawer */
  .cart-drawer-flex-container-cart-customer {
    order: 1;
    /* Cart content first */
  }

  .global-drawer__footer {
    order: 3;
    /* Footer second */
  }

  .cart-drawer-flex-container-recommendations {
    order: 2;
    /* Recommendations last */
  }

  .cart-drawer-main-content {
    flex: 1;
    min-width: 0;
    order: 1;
    overflow-y: auto;
    /* 添加滚动条 */
    max-height: none;
    /* 移除固定高度限制 */
    padding-bottom: 20px;
    /* 减小底部内边距 */
    -webkit-overflow-scrolling: touch;
    /* 提高移动端滚动体验 */
    scroll-behavior: smooth;
    /* 平滑滚动 */
    contain: paint;
  }

  /* 确保最后一个产品完全可见的额外样式 */
  .cart-drawer-main-content::after {
    content: '';
    display: block;

    width: 100%;
  }

  /* 固定头部和底部样式 */
  .drawer__title.h2.page--title {
    position: sticky;
    top: 0;
    background: #fff;
    z-index: 10;
    padding: 15px 0;
    margin: 0;
  }

  /* 确保底部区域紧贴最后一个产品 */
  .global-drawer__footer {
    margin-top: auto !important;
    /* 使用auto将其推到底部 */
    border-top: 1px solid #e8e8e8;
    position: sticky;
    bottom: 0;
    background: #fff;
    z-index: 100;
    padding-top: 15px;
    padding-bottom: 15px;
    width: 100%;
    box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.05);
    flex-shrink: 0;
    /* 防止底部区域被压缩 */
  }

  /* 确保购物车内容区域和底部之间没有多余间距 */
  .ajaxcart__inner > .cart-drawer-flex-container {
    margin-bottom: 0 !important;
    padding-bottom: 0 !important;
  }

  /* 确保结账按钮始终可见 */
  .cart-drawer__checkout-btn {
    width: 100%;
    padding: 12px;
    margin-top: 5px;
    margin-bottom: 5px;
    font-weight: bold;
    position: relative;
    z-index: 101;
  }

  /* 确保查看购物车按钮可见 */
  .cart-drawer__view-cart-btn {
    width: 100%;
    text-align: center;
    padding: 12px;
    margin-bottom: 5px;
    position: relative;
    z-index: 101;
  }

  /* 调整抽屉容器样式 */
  .drawer.drawer--right.drawer--cart {
    display: flex;
    flex-direction: column;
    height: 100%;
    overflow: hidden;
    /* 防止整体滚动 */
    padding-bottom: env(safe-area-inset-bottom, 0);
    /* 适配iPhone底部安全区域 */
  }

  .drawer__header {
    position: sticky;
    top: 0;
    z-index: 11;
    background: #fff;
  }

  form.cart.ajaxcart.new-cust-cart-drawer-flex-container.cart-drawer-flex-container-main {
    order: 2;
  }

  .cart-drawer-flex-container-recommendations.desktop-cart-drawer-none-container-recommendations {
    order: 1;
  }

  a.btn.dynamic-section-button--drawer-filled.empty-cart-button {
    color: #fff;
  }

  #CartContainer {
    flex: 1;
    overflow: hidden;
    display: flex;
    flex-direction: row;
    justify-content: space-around;
    height: calc(100% - 50px);
    /* 减去头部高度 */
    padding-bottom: 20px;
    /* 添加底部内边距 */
  }

  /* 推荐产品区域滚动 */
  .cart-drawer-recommendations-sidebar {
    width: 320px;
    /* border-left: 1px solid #e8e8e8; */
    padding-left: 15px;
    overflow-y: auto;
    max-height: 100vh;

    padding-bottom: 20px;
    /* 添加底部内边距 */
    -webkit-overflow-scrolling: touch;
    /* 提高移动端滚动体验 */
    scroll-behavior: smooth;
    /* 平滑滚动 */
  }

  /* 确保最后一个产品有足够空间 */
  .ajaxcart__product:last-child {
    margin-bottom: 0 !important;
    /* 移除之前的大边距 */
  }

  .cart-drawer__recommendations-grid {
    display: flex;
    flex-direction: column;
    gap: 15px;
    padding-bottom: 20px;
    /* 确保底部产品完全可见 */
  }

  h5.text-link-animated {
    margin-bottom: 30px;
    font-size: 24px;
  }

  /* 优化推荐产品卡片样式 */
  .product-card-basic.cart-drawer__product-card {
    display: flex;
    flex-direction: row;
    margin-bottom: 10px;
    flex-wrap: nowrap;
    align-items: center;
    gap: 10px;
  }

  .product-card-basic__image {
    width: 42%;
    max-width: 100%;
  }

  .product-card-basic__image img {
    width: 100%;
    height: 100%;
    max-height: 100%;
    object-fit: cover;
  }

  .product-card-basic--info {
    padding: 8px 0;
    width: 90%;
    display: flex;
    flex-direction: column;
  }

  .product-card-basic--info--body {
    display: flex;
    flex-direction: column;
    gap: 3px;
  }

  .product-card-basic__title {
    font-size: 12px;
    margin-bottom: 2px;
    line-height: 1.2;
    max-height: 2.4em;
    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
  }

  .product-card-basic__price {
    font-size: 12px;
    margin-bottom: 2px;
    font-weight: 600;
  }

  .ajaxcart__row .grid.display-table {
    padding: 0;
  }

  .btn--underlined.btn--underlined-with-icon {
    font-size: 11px;
  }

  /* 响应式调整 */
  @media screen and (max-width: 767px) {
    .cart-drawer-flex-container {
      flex-direction: column;
    }

    .cart-drawer-recommendations-sidebar {
      width: 100%;
      border-left: none;
      border-top: 1px solid #e8e8e8;
      padding-left: 0;
      padding-top: 15px;
      margin-top: 15px;
    }

    .cart-drawer__recommendations-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 10px;
    }

    .cart-drawer-main-content {
      max-height: calc(100vh - 200px);
      /* 移动端增加更多底部空间 */
      padding-bottom: 120px;
      /* 移动设备上增加更多底部内边距 */
    }

    .ajaxcart__product:last-child {
      margin-bottom: 0 !important;
      /* 移除之前的大边距 */
    }
  }

  .cart-drawer__discounts {
    display: flex;
    justify-content: flex-end;
    margin-bottom: 5px;
  }

  .cart-drawer__subtotal {
    display: flex;
    justify-content: space-between;
    align-items: flex-end;
    gap: 10px;
    margin-bottom: 5px;
  }

  .cart-drawer__subtotal--heading,
  .cart-drawer__subtotal--price {
    margin-bottom: 0;
  }

  .cart-drawer__subtotal--price {
    text-align: right;
    word-break: break-word;
    display: flex;
    gap: 4px;
    align-items: center;
  }

  .cart-drawer__subtotal--compare {
    text-decoration: line-through;
    color: #000;
    font-size: 0.9em;
    margin-right: 8px;
    display: block;
    transition: color 0.2s ease;
  }

  .cart-drawer__subtotal--sale {
    color: var(--on-sale-color);
    font-weight: bold;
  }

  .cart-drawer__taxes-shipping {
    font-size: 12px;
    margin-bottom: 10px;
  }

  /* Product price styles */
  .ajaxcart-item__price-strikethrough {
    text-decoration: line-through;
    color: #999;
    margin-right: 5px;
    transition: color 0.2s ease;
  }

  .ajaxcart-item__price {
    font-weight: 500;
  }

  /* Make sure the price wrapper displays prices correctly */
  .ajaxcart__price-wrapper {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    min-height: 24px;
    position: relative;
  }

  .ajaxcart__price-wrapper s {
    margin-right: 8px;
  }

  .discount--sale-color {
    color: #e4534c;
    font-weight: 500;
  }

  @media screen and (min-width: 768px) {
    .cart-drawer__taxes-shipping {
      margin-bottom: 15px;
    }
  }

  .cart-drawer__footer--buttons {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-top: 15px;
    width: 100%;
  }

  .ajaxcart__product {
    position: relative;
    transition: opacity 0.3s ease;
    /* Space for remove button */
  }

  .ajaxcart__product-meta {
    display: block;
    padding-top: 0;
    font-size: 12px;
    color: #666;
    margin: 5px 0;
  }

  /* Product Image */
  .ajaxcart__product-image {
    width: 80px;
    display: block;
  }

  .ajaxcart__product-image img {
    width: 100%;
    height: auto;
  }

  /* Price and Quantity Layout */
  .ajaxcart__price-quantity {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-top: 10px;
  }

  .ajaxcart__price-wrapper {
    display: flex;
    align-items: center;
  }

  .ajaxcart-item__price {
    font-weight: 500;
    font-size: 1em;
    color: #333;
  }

  /* Quantity Controls */
  .ajaxcart__qty {
    display: inline-flex;
    align-items: center;
    border: 1px solid #ddd;
    border-radius: 4px;
    height: 32px;
    background: #fff;
    position: relative;
    z-index: 1;
    overflow: hidden;
  }

  /* Remove divider lines between quantity buttons and input */
  .ajaxcart__qty > * {
    border: none !important;
    box-shadow: none !important;
    outline: none !important;
  }

  .ajaxcart__qty-adjust {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    border: none;
    background: none;
    padding: 0;
    cursor: pointer;
    color: #333;
    flex-shrink: 0;
  }

  .ajaxcart__qty-num {
    width: 40px;
    text-align: center;
    border: none;
    padding: 0;
    margin: 0;
    height: 100%;
    -moz-appearance: textfield;
    background: transparent;
    flex: 1;
  }

  .ajaxcart__qty-num::-webkit-outer-spin-button,
  .ajaxcart__qty-num::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  .ajaxcart__qty.new-quantity-input {
    border: 1px solid #eee;
    margin-bottom: 8px;
  }

  .grid__item.ajaxcart__quantity-wrapper-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  button.ajaxcart__remove {
    position: absolute;
    top: 10px;
    right: 5px;
    padding: 14px;
    display: flex;
    background: 0 0;
    border: 0;
  }

  /* Remove Button */
  .ajaxcart__remove {
    position: absolute;
    top: 0;
    right: 0;
    padding: 8px;
    border: none;
    background: none;
    cursor: pointer;
    opacity: 0.5;
    transition: opacity 0.2s;
  }

  .ajaxcart__remove:hover {
    opacity: 1;
  }

  .ajaxcart__remove svg {
    width: 12px;
    height: 12px;
  }

  /* Cart Footer */
  .ajaxcart__footer {
    margin-top: 20px;
    padding-top: 20px;
    border-top: 1px solid #e8e8e8;
  }

  /* Product Title */
  .ajaxcart__product-name {
    color: #333;
    text-decoration: none;
    font-weight: 500;
  }

  /* Cart Subtotal */
  .ajaxcart__subtotal {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-weight: 600;
    margin: 15px 0;
  }

  /* Checkout Button */
  .cart__checkout {
    width: 100%;
    padding: 15px;
    background: #000;
    color: #fff;
    border: none;
    border-radius: 4px;
    font-weight: 500;
    cursor: pointer;
    margin-top: 15px;
  }

  .cart__checkout:hover {
    background: #333;
  }

  /* Discount Badge */
  .cart-compare-price--with-value {
    background-color: #f8f8f8;
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 0.9em;
    margin-left: 8px;
  }

  .discount--sale-color {
    color: #e4534c;
  }

  /* Unit Price */
  .unit-price {
    font-size: 0.85em;
    color: #666;
    margin-top: 4px;
  }

  /* Loading spinner for add to cart button */
  .loading-spinner {
    display: inline-block;
    width: 16px;
    height: 16px;
    border: 2px solid rgba(0, 0, 0, 0.1);
    border-top-color: currentColor;
    border-radius: 50%;
    animation: spin 0.8s linear infinite;
    vertical-align: middle;
    margin: 0 auto;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .btn--underlined-with-icon.add-to-cart-btn {
    position: relative;
    min-width: 120px;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 5px;
    padding: 8px 12px;
    transition: all 0.3s ease;
  }

  .btn--underlined-with-icon.add-to-cart-btn .add-to-cart-text {
    display: inline-block;
    vertical-align: middle;
  }

  .btn--underlined-with-icon.add-to-cart-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  /* Ensure the loading spinner is centered and visible */
  .btn--underlined-with-icon.add-to-cart-btn .loading-spinner {
    margin: 0 auto;
    display: inline-block;
  }

  /* 确保购物车内容区域有足够的底部空间 */
  .ajaxcart__inner {
    padding-bottom: 0 !important;
    min-height: 200px;
    /* 确保即使只有一个产品也有足够的空间 */
  }

  /* Multiple items display */
  .ajaxcart__multiple-items {
    display: block;
    margin-top: 5px;
    font-size: 0.9em;
    color: #666;
    border-top: 1px solid #eee;
    padding-top: 5px;
    width: 100%;
    text-align: right;
    display: none;
  }

  .ajaxcart__multiple-items-count {
    font-weight: 500;
  }

  .ajaxcart__multiple-items-price {
    margin-left: 5px;
    font-weight: 600;
  }

  /* Prevent flickering during quantity changes */
  .ajaxcart__price-wrapper {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    min-height: 24px;
    position: relative;
  }

  .ajaxcart__qty {
    display: inline-flex;
    align-items: center;
    border: 1px solid #ddd;
    border-radius: 4px;
    height: 32px;
    background: #fff;
    position: relative;
    z-index: 1;
  }

  /* Smooth transitions for price changes */
  .ajaxcart-item__price,
  .ajaxcart-item__price-strikethrough,
  .cart-drawer__subtotal--price-value,
  .cart-drawer__subtotal--compare {
    transition: color 0.2s ease;
  }

  /* Smooth transitions for shipping bar */
  .shipping-progress-bar__fill {
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    background: linear-gradient(90deg, #000000, #333333);
    border-radius: 10px;
    transition: width 0.5s ease-out;
    max-width: 100%;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
  }

  .shipping-progress-text {
    transition: opacity 0.3s ease;
  }

  /* Prevent layout shifts */
  .cart-drawer-main-content {
    contain: paint;
  }

  .ajaxcart__product {
    position: relative;
    transition: opacity 0.3s ease;
  }

  .ajaxcart__row {
    transition: opacity 0.3s ease, height 0.3s ease;
  }

  /* Add to cart button styling */
  .btn--underlined-with-icon.add-to-cart-btn {
    position: relative;
    min-width: 120px;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 5px;
    padding: 8px 12px;
    transition: all 0.3s ease;
  }

  .btn--underlined-with-icon.add-to-cart-btn .add-to-cart-text {
    display: inline-block;
    vertical-align: middle;
  }

  .btn--underlined-with-icon.add-to-cart-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  /* Enhanced loading spinner */
  .loading-spinner {
    display: inline-block;
    width: 16px;
    height: 16px;
    border: 2px solid rgba(0, 0, 0, 0.1);
    border-top-color: currentColor;
    border-radius: 50%;
    animation: spin 0.8s linear infinite;
    vertical-align: middle;
    margin: 0 auto;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  /* Ensure the loading spinner is centered and visible */
  .btn--underlined-with-icon.add-to-cart-btn .loading-spinner {
    margin: 0 auto;
    display: inline-block;
  }

  .add-to-cart-success {
    color: #2ecc71;
    font-weight: 600;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    animation: fadeIn 0.3s ease;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }

  /* Fix for Add to Cart button in cart drawer */
  .cart-drawer .btn--underlined.btn--underlined-with-icon,
  .cart-drawer .btn--underlined-with-icon.add-to-cart-btn {
    border: none;
    box-shadow: none;
    background: transparent;
    position: relative;
    overflow: hidden;
  }

  /* Target the specific Add to Cart button in the cart drawer */
  .cart-drawer-recommendations-sidebar .add-to-cart-btn {
    border: 1px solid #e8e8e8 !important;
    box-shadow: none !important;
    background: #f5f5f5 !important;
    overflow: visible !important;
    border-radius: 4px !important;
    padding: 6px 10px !important;
    font-size: 11px !important;
    font-weight: 500 !important;
    transition: all 0.2s ease !important;
    margin-top: 5px !important;
  }

  .cart-drawer-recommendations-sidebar .add-to-cart-btn:hover {
    background: #ebebeb !important;
    border-color: #d8d8d8 !important;
  }

  /* Remove any unwanted borders in quantity inputs */
  .cart-drawer input.ajaxcart__qty-num {
    border: none;
    box-shadow: none;
    background: transparent;
    position: relative;
    z-index: 1;
  }

  /* Ensure clean button appearance */
  .cart-drawer button {
    outline: none;
    appearance: none;
    -webkit-appearance: none;
  }

  /* 响应式调整 */
  @media screen and (max-width: 820px) {
    /* Change layout direction for cart drawer on mobile */
    form.cart.ajaxcart.new-cust-cart-drawer-flex-container {
      flex-direction: column;
    }

    /* Make main cart content take full width */
    .cart-drawer-flex-container-cart-customer {
      width: 100%;
      order: 1;
      /* Ensure cart content comes first */
    }

    /* Style recommendations section for mobile */
    .cart-drawer-flex-container-recommendations {
      width: 100%;
      margin-top: 15px;
      border-top: 1px solid #e8e8e8;
      padding-top: 15px;
      order: 2;
      /* Place recommendations after the footer */
    }

    /* Ensure footer is between cart content and recommendations */
    .global-drawer__footer {
      order: 3;
      width: 100%;
    }

    /* Make recommendations sidebar full width */
    .cart-drawer-recommendations-sidebar {
      width: 100%;
      border-left: none;
      padding-left: 0;
      max-height: none;
      overflow-x: auto;
      overflow-y: hidden;
    }

    /* Make recommendations grid horizontal scrollable */
    .cart-drawer__recommendations-grid {
      display: flex;
      flex-direction: row;
      flex-wrap: nowrap;
      overflow-x: auto;
      padding: 10px 0 20px 0;
      -webkit-overflow-scrolling: touch;
      scroll-snap-type: x mandatory;
      gap: 12px;
      margin-left: 15px;
    }

    /* Style recommendation cards for horizontal scroll */
    .product-card-basic.cart-drawer__product-card {
      flex: 0 0 auto;
      width: 180px;
      flex-direction: column;
      scroll-snap-align: start;
    }

    /* Adjust product image for horizontal layout */
    .product-card-basic__image {
      width: 100%;
      max-width: 100%;
    }

    /* Ensure "Don't forget these" section is visible */
    .cart-drawer-recommendations-sidebar h5.text-link-animated {
      margin-bottom: 15px;
      font-size: 18px;
      padding-left: 15px;
    }

    /* Ensure main content has enough space */
    .cart-drawer-main-content {
      max-height: calc(100vh - 320px);
      padding-bottom: 20px;
    }

    /* Adjust footer padding */
    footer.global-drawer__footer {
      padding: 15px !important;
    }

    /* Add padding to product info in horizontal scroll */
    .product-card-basic--info {
      padding: 8px;
      width: 100%;
    }

    /* Add visual indicator for horizontal scroll */
    .cart-drawer-recommendations-sidebar::after {
      content: '';
      position: absolute;
      top: 0;
      right: 0;
      width: 30px;
      height: 100%;
      background: linear-gradient(to right, rgba(255, 255, 255, 0), rgba(255, 255, 255, 0.8));
      pointer-events: none;
    }
  }

  /* Additional styles for very small screens */
  @media screen and (max-width: 480px) {
    .product-card-basic.cart-drawer__product-card {
      width: 150px;
    }

    .ajaxcart__inner {
      padding-left: 20px;
      padding-right: 20px;
    }
  }

  /* Styles for "Don't forget these..." section */
  .cart-drawer-recommendations-sidebar .global-drawer--secondary__header {
    padding: 0 15px;
    margin-bottom: 15px;
  }

  .cart-drawer-recommendations-sidebar h5.text-link-animated {
    font-size: 18px;
    margin-bottom: 15px;
    font-weight: 600;
  }

  /* Mobile-specific styles for recommendations */
  @media screen and (max-width: 820px) {
    /* Make recommendations more prominent on mobile */
    .cart-drawer-recommendations-sidebar {
      position: relative;
      background: #f9f9f9;
      padding: 15px 0;
      border-radius: 8px;
      margin: 0 15px 15px;
      width: calc(100% - 30px);
    }

    /* Add horizontal scroll indicator */
    .cart-drawer__recommendations-grid {
      position: relative;
      padding-bottom: 25px;
      padding-right: 15px;
      /* Add padding to the right side */
    }

    /* Style the scroll indicator dots */

    /* Add title for "Don't forget these" section */
    .cart-drawer-recommendations-sidebar .global-drawer--secondary__header {
      padding: 0 15px 10px;
      border-bottom: 1px solid #eee;
      margin-bottom: 15px;
    }

    /* Make recommendation cards more attractive */
    .product-card-basic.cart-drawer__product-card {
      background: white;
      border-radius: 6px;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      padding: 8px;
      height: 100%;
      margin-bottom: 0;
    }

    /* Improve image display */
    .product-card-basic__image {
      border-radius: 4px;
      overflow: hidden;
      margin-bottom: 8px;
    }

    /* Improve product title display */
    .product-card-basic__title {
      font-size: 13px;
      line-height: 1.3;
      margin-bottom: 5px;
      font-weight: 500;
      height: 34px;
      overflow: hidden;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
    }

    /* Style the Add to Cart button for mobile */
    .cart-drawer-recommendations-sidebar .btn--underlined-with-icon.add-to-cart-btn {
      width: 100%;
      justify-content: center;
      padding: 6px 10px;
      margin-top: 5px;
      background: #f5f5f5;
      border-radius: 4px;
    }

    /* Ensure the "Don't forget these" title is prominent */
    .cart-drawer-recommendations-sidebar h5.text-link-animated {
      font-size: 16px;
      margin-bottom: 10px;
      font-weight: 600;
      color: #333;
    }
  }

  /* 优化推荐产品卡片样式 - 使用左右布局节省空间 */
  .product-card-basic.cart-drawer__product-card {
    display: flex;
    flex-direction: row;
    margin-bottom: 10px;
    flex-wrap: nowrap;
    align-items: flex-start;
    gap: 10px;
    padding: 10px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.08);
    transition: all 0.2s ease;
  }

  .product-card-basic.cart-drawer__product-card:hover {
    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.12);
    transform: translateY(-1px);
  }

  .product-card-basic__image {
    width: 30%;
    max-width: 80px;
    flex-shrink: 0;
  }

  .product-card-basic__image img {
    width: 100%;
    height: auto;
    max-height: 80px;
    object-fit: cover;
    border-radius: 6px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
  }

  .product-card-basic--info {
    padding: 0;
    width: 70%;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .product-card-basic__title {
    font-size: 12px;
    margin-bottom: 5px;
    line-height: 1.2;
    max-height: 2.4em;
    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
  }

  .product-card-basic__price {
    font-size: 12px;
    margin-bottom: 5px;
    font-weight: 600;
  }

  /* 移动端特殊处理推荐产品区域 */
  @media screen and (max-width: 820px) {
    /* 调整推荐产品标题 */
    .cart-drawer-recommendations-sidebar h5.text-link-animated {
      font-size: 14px;
      margin: 0 0 10px 0;
      padding-left: 15px;
      font-weight: 600;
    }

    /* 调整推荐产品区域 */
    .cart-drawer-recommendations-sidebar {
      padding: 10px 0;
      margin: 0 10px 15px;
      width: calc(100% - 20px);
    }

    .mobile-cart-drawer-none-container-recommendations {
      display: block;
    }

    .desktop-cart-drawer-none-container-recommendations {
      display: none;
    }

    /* 调整推荐产品网格 */
    .cart-drawer__recommendations-grid {
      display: flex;
      flex-direction: row;
      flex-wrap: nowrap;
      overflow-x: auto;
      padding: 5px 0 15px 0;
      gap: 8px;
      margin-left: 10px;
    }

    /* 调整推荐产品卡片 */
    .product-card-basic.cart-drawer__product-card {
      flex: 0 0 auto;
      width: 220px;
      flex-direction: row;
      margin-bottom: 0;
      height: auto;
      min-height: 80px;
    }

    /* 调整添加到购物车按钮 */
    .cart-drawer-recommendations-sidebar .btn--underlined-with-icon.add-to-cart-btn {
      padding: 4px 8px;
      margin-top: 3px;
      font-size: 11px;
      min-height: 0;
      line-height: 1;
    }

    /* 减小推荐产品区域的整体高度 */
    .cart-drawer-flex-container-recommendations {
      margin-bottom: 0px;
      padding-top: 10px;
      margin-top: 10px;
    }
  }

  /* Loading State Styles */
  .cart-loading-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    padding: 40px 20px;
    min-height: 300px;
  }

  .cart-loading-spinner {
    width: 50px;
    height: 50px;
    border: 3px solid rgba(0, 0, 0, 0.1);
    border-radius: 50%;
    border-top-color: #000;
    animation: spin 1s linear infinite;
    margin-bottom: 20px;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .cart-loading-text {
    font-size: 18px;
    font-weight: 500;
    margin-bottom: 30px;
    color: #333;
  }

  .cart-loading-fallback {
    margin-top: 20px;
    padding-top: 20px;
    border-top: 1px solid #eee;
    width: 100%;
    max-width: 300px;
  }

  .cart-loading-fallback p {
    font-size: 14px;
    color: #666;
    margin-bottom: 15px;
  }

  .cart-loading-button {
    padding: 10px 20px;
    font-weight: 600;
    border-radius: 4px;
    transition: all 0.2s ease;
    min-width: 150px;
    display: inline-block;
  }

  /* Empty Cart Styles */
  .empty-cart-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    padding: 40px 20px;
    min-height: 300px;
  }

  .empty-cart-icon {
    margin-bottom: 20px;
  }

  .empty-cart-title {
    font-size: 20px;
    font-weight: 600;
    margin-bottom: 10px;
    color: #333;
  }

  .empty-cart-text {
    font-size: 14px;
    color: #666;
    margin-bottom: 25px;
    max-width: 250px;
  }

  .empty-cart-button {
    padding: 12px 30px;
    font-weight: 600;
    border-radius: 4px;
    transition: all 0.2s ease;
    min-width: 150px;
  }

  .empty-cart-button:hover {
    opacity: 0.9;
    transform: translateY(-1px);
  }

  @media screen and (max-width: 767px) {
    .cart-loading-container,
    .empty-cart-container {
      padding: 30px 15px;
      min-height: 250px;
    }

    .cart-loading-spinner {
      width: 40px;
      height: 40px;
    }

    .cart-loading-text {
      font-size: 16px;
    }

    .empty-cart-icon svg {
      width: 100px;
      height: 100px;
    }

    .empty-cart-title {
      font-size: 18px;
    }

    .empty-cart-text {
      font-size: 13px;
      margin-bottom: 20px;
    }
  }
</style>

<!-- 添加货币转换脚本 -->
<script>
  // 货币转换配置
  window.currencyConfig = {
          // 基准货币 - 所有免运费阈值都基于此货币
    baseCurrency: 'USD',
    
    // 免运费阈值 (美元)
    freeShippingThresholdUSD: {{ settings.free_shipping_threshold | default: 10000 | divided_by: 100.0 | json }},
    
    // 记录货币配置启动
    debug: function() {
      console.log('Currency configuration initialized');
      console.log('Base currency: ' + this.baseCurrency);
      console.log('Free shipping threshold: $' + this.freeShippingThresholdUSD);
      
      if (Shopify && Shopify.currency) {
        console.log('Current Shopify currency: ' + Shopify.currency.active);
      }
    },
    
    // 货币汇率表 (相对于USD) - 2024年6月更新
    currencyRates: {
      'USD': 1.0,
      'EUR': 0.9258,  // 1 USD = 0.9258 EUR
      'GBP': 0.7874,  // 1 USD = 0.7874 GBP
      'CAD': 1.3698,  // 1 USD = 1.3698 CAD
      'AUD': 1.5152,  // 1 USD = 1.5152 AUD
      'JPY': 157.63,  // 1 USD = 157.63 JPY
      'CNY': 7.2464,  // 1 USD = 7.2464 CNY
      'KM': 1.82,     // 1 USD = 1.82 KM
      'RM': 4.63,     // 1 USD = 4.63 RM (马来西亚林吉特)
      'AZN': 1.7,     // 1 USD = 1.7 AZN (阿塞拜疆马纳特)
      'ALL': 84.937,  // 1 USD = 84.937 ALL (阿尔巴尼亚列克)
      'INR': 83.35,   // 1 USD = 83.35 INR (印度卢比)
      'MXN': 16.73,   // 1 USD = 16.73 MXN (墨西哥比索)
      'BRL': 5.42,    // 1 USD = 5.42 BRL (巴西雷亚尔)
      'TRY': 32.17,   // 1 USD = 32.17 TRY (土耳其里拉)
      'ZAR': 18.30,   // 1 USD = 18.30 ZAR (南非兰特)
      'SGD': 1.34,    // 1 USD = 1.34 SGD (新加坡元)
      'NZD': 1.64,    // 1 USD = 1.64 NZD (新西兰元)
      'CHF': 0.90,    // 1 USD = 0.90 CHF (瑞士法郎)
      'HKD': 7.81,    // 1 USD = 7.81 HKD (港币)
      'SEK': 10.45,   // 1 USD = 10.45 SEK (瑞典克朗)
      'NOK': 10.60,   // 1 USD = 10.60 NOK (挪威克朗)
      'DKK': 6.91,    // 1 USD = 6.91 DKK (丹麦克朗)
      'PLN': 3.95,    // 1 USD = 3.95 PLN (波兰兹罗提)
      'RUB': 88.25,   // 1 USD = 88.25 RUB (俄罗斯卢布)
      'AED': 3.67,    // 1 USD = 3.67 AED (阿联酋迪拉姆)
      'SAR': 3.75,    // 1 USD = 3.75 SAR (沙特里亚尔)
      'm': 1.0,       // 默认回退汇率
      // 最后更新时间: 2024年6月
    },
    
    // 货币符号映射
    currencySymbols: {
      'USD': '$',
      'EUR': '€',
      'GBP': '£',
      'CAD': 'C$',
      'AUD': 'A$',
      'JPY': '¥',
      'CNY': '¥',
      'KM': 'KM',
      'RM': 'RM',
      'AZN': '₼',
      'ALL': 'Lek',
      'INR': '₹',
      'MXN': 'Mex$',
      'BRL': 'R$',
      'TRY': '₺',
      'ZAR': 'R',
      'SGD': 'S$',
      'NZD': 'NZ$',
      'CHF': 'CHF',
      'HKD': 'HK$',
      'SEK': 'kr',
      'NOK': 'kr',
      'DKK': 'kr',
      'PLN': 'zł',
      'RUB': '₽',
      'AED': 'د.إ',
      'SAR': '﷼',
      'm': 'm.',
      // 添加更多货币符号 - 2024年6月更新
    }
  };
  
  // 获取当前货币
  window.getCurrentCurrency = function() {
    // 尝试多种方法获取正确的货币代码
    
    // 方法1：从Shopify对象中获取
    if (Shopify && Shopify.currency && Shopify.currency.active) {
      console.log('Currency from Shopify.currency.active: ' + Shopify.currency.active);
      return Shopify.currency.active;
    }
    
    // 方法2：从页面上的货币选择器中获取
    const currencySelector = document.querySelector('[data-currency-selector], .currency-selector, .currency-form select');
    if (currencySelector && currencySelector.value) {
      console.log('Currency from currency selector: ' + currencySelector.value);
      return currencySelector.value;
    }
    
    // 方法3：尝试从货币元素中提取
    const currencyElements = document.querySelectorAll('.currency-code, .currency, [data-currency]');
    for (let i = 0; i < currencyElements.length; i++) {
      const el = currencyElements[i];
      const currencyCode = el.getAttribute('data-currency') || el.textContent.trim();
      if (currencyCode && currencyCode.length === 3) {
        console.log('Currency from currency element: ' + currencyCode);
        return currencyCode;
      }
    }
    
    // 方法4：尝试从价格元素中提取货币代码
    const priceElement = document.querySelector('.money, .price');
    if (priceElement) {
      const priceText = priceElement.textContent.trim();
      // 如果价格文本以"Lek"开头，则可能是阿尔巴尼亚列克
      if (priceText.startsWith('Lek')) {
        console.log('Currency detected as ALL from price text');
        return 'ALL';
      }
    }
    
    // 回退到默认值
    const defaultCurrency = '{{ cart.currency.iso_code | default: shop.currency }}';
    console.log('Falling back to default currency: ' + defaultCurrency);
    return defaultCurrency;
  };
  
  // 获取当前货币符号
  window.getCurrentCurrencySymbol = function() {
    const currency = window.getCurrentCurrency();
    
    // 首先尝试从Shopify本身获取符号
    if (Shopify && Shopify.currency && Shopify.currency.active && Shopify.formatMoney) {
      // 使用Shopify的formatMoney函数来获取当前符号
      const formatted = Shopify.formatMoney(100);
      // 提取数字前面的符号
      const symbol = formatted.match(/^([^\d]+)/);
      if (symbol && symbol[1]) {
        // 过滤并净化符号（删除任何不应该是货币符号的部分）
        const cleanSymbol = symbol[1].trim();
        // 如果清理后的符号看起来像一个正常的货币符号，使用它
        if (cleanSymbol && cleanSymbol.length < 5) {
          return cleanSymbol;
        }
      }
    }
    
    // 从Shopify全局变量中获取货币符号
    if (Shopify && Shopify.currency) {
      // 尝试使用货币代码获取符号
      const currencyCode = Shopify.currency.active || currency;
      
      // 如果在我们的映射中有这个货币，使用它
      if (window.currencyConfig.currencySymbols[currencyCode]) {
        return window.currencyConfig.currencySymbols[currencyCode];
      }
    }
    
    // 最后回退到预定义的符号映射或默认美元符号
    return window.currencyConfig.currencySymbols[currency] || '$';
  };
  
  // 将任意货币金额转换为USD (输入cents)
  window.convertToUSD = function(amount, fromCurrency) {
    // 如果输入是0或者无效，直接返回0
    if (!amount || isNaN(amount) || amount <= 0) {
      return 0;
    }
  
    const currency = fromCurrency || window.getCurrentCurrency();
    
    // 如果已经是USD，简单地转换
    if (currency === 'USD') {
      return amount / 100; // 直接从分转换为美元
    }
    
    // 记录实际的货币代码供调试
    console.log('convertToUSD: Currency code = ' + currency);
    
    // 对于非美元货币，使用汇率转换
    let rate = window.currencyConfig.currencyRates[currency];
    let usedCurrency = currency;
    
    // 如果找不到汇率，尝试查找不区分大小写的匹配
    if (!rate) {
      // 尝试查找大写版本
      const upperCaseCurrency = currency.toUpperCase();
      rate = window.currencyConfig.currencyRates[upperCaseCurrency];
      if (rate) usedCurrency = upperCaseCurrency;
      
      // 如果还是找不到，尝试查找首字母小写版本
      if (!rate) {
        const lowerCaseCurrency = currency.toLowerCase();
        rate = window.currencyConfig.currencyRates[lowerCaseCurrency];
        if (rate) usedCurrency = lowerCaseCurrency;
      }
    }
    
    // 特殊情况：检测阿尔巴尼亚列克
    if (!rate && (currency === 'ALL' || currency === 'Lek' || /Lek/i.test(currency))) {
      console.log('Detected Albanian Lek currency');
      rate = window.currencyConfig.currencyRates['ALL'];
      usedCurrency = 'ALL';
    }
    
    // 特殊情况：检测其他常见货币名称
    if (!rate) {
      // 尝试从货币符号或名称中识别
      const currencyLower = currency.toLowerCase();
      
      if (currencyLower.includes('euro') || currencyLower === '€') {
        rate = window.currencyConfig.currencyRates['EUR'];
        usedCurrency = 'EUR';
      } else if (currencyLower.includes('pound') || currencyLower.includes('gbp') || currencyLower === '£') {
        rate = window.currencyConfig.currencyRates['GBP'];
        usedCurrency = 'GBP';
      } else if (currencyLower.includes('yen') || currencyLower === '¥') {
        rate = window.currencyConfig.currencyRates['JPY'];
        usedCurrency = 'JPY';
      } else if (currencyLower.includes('yuan') || currencyLower.includes('rmb')) {
        rate = window.currencyConfig.currencyRates['CNY'];
        usedCurrency = 'CNY';
      }
    }
    
    // 如果仍然找不到汇率，使用默认值1.0
    if (!rate) {
      console.warn('No exchange rate found for currency: ' + currency + ', using default rate 1.0');
      rate = 1.0;
    }
    
    // 使用直接比率 - 当前货币到USD的转换率
    const result = (amount / 100) * (1 / rate);
    
    // 记录转换过程供调试
    console.log('convertToUSD: ' + amount + ' ' + usedCurrency + ' = ' + result + ' USD (rate: ' + rate + ')');
    
    return result;
  };
  
  // 将USD金额转换为当前货币 (返回cents)
  window.convertFromUSD = function(usdAmount, toCurrency) {
    // 如果输入是0或者无效，直接返回0
    if (!usdAmount || isNaN(usdAmount) || usdAmount <= 0) {
      return 0;
    }
    
    const currency = toCurrency || window.getCurrentCurrency();
    
    // 记录实际的货币代码供调试
    console.log('convertFromUSD: Target currency code = ' + currency);
    
    if (currency === 'USD') {
      return usdAmount * 100; // 直接从美元转换为分
    }
    
    // 对于非美元货币，使用汇率转换
    let rate = window.currencyConfig.currencyRates[currency];
    let usedCurrency = currency;
    
    // 如果找不到汇率，尝试查找不区分大小写的匹配
    if (!rate) {
      // 尝试查找大写版本
      const upperCaseCurrency = currency.toUpperCase();
      rate = window.currencyConfig.currencyRates[upperCaseCurrency];
      if (rate) usedCurrency = upperCaseCurrency;
      
      // 如果还是找不到，尝试查找首字母小写版本
      if (!rate) {
        const lowerCaseCurrency = currency.toLowerCase();
        rate = window.currencyConfig.currencyRates[lowerCaseCurrency];
        if (rate) usedCurrency = lowerCaseCurrency;
      }
    }
    
    // 特殊情况：检测阿尔巴尼亚列克
    if (!rate && (currency === 'ALL' || currency === 'Lek' || /Lek/i.test(currency))) {
      console.log('Detected Albanian Lek currency for conversion');
      rate = window.currencyConfig.currencyRates['ALL'];
      usedCurrency = 'ALL';
    }
    
    // 特殊情况：检测其他常见货币名称
    if (!rate) {
      // 尝试从货币符号或名称中识别
      const currencyLower = currency.toLowerCase();
      
      if (currencyLower.includes('euro') || currencyLower === '€') {
        rate = window.currencyConfig.currencyRates['EUR'];
        usedCurrency = 'EUR';
      } else if (currencyLower.includes('pound') || currencyLower.includes('gbp') || currencyLower === '£') {
        rate = window.currencyConfig.currencyRates['GBP'];
        usedCurrency = 'GBP';
      } else if (currencyLower.includes('yen') || currencyLower === '¥') {
        rate = window.currencyConfig.currencyRates['JPY'];
        usedCurrency = 'JPY';
      } else if (currencyLower.includes('yuan') || currencyLower.includes('rmb')) {
        rate = window.currencyConfig.currencyRates['CNY'];
        usedCurrency = 'CNY';
      } else if (currencyLower.includes('rupee') || currencyLower === '₹') {
        rate = window.currencyConfig.currencyRates['INR']; 
        usedCurrency = 'INR';
      } else if (currencyLower.includes('real') || currencyLower === 'r$') {
        rate = window.currencyConfig.currencyRates['BRL'];
        usedCurrency = 'BRL';
      }
    }
    
    // 如果仍然找不到汇率，使用默认值1.0
    if (!rate) {
      console.warn('No exchange rate found for currency: ' + currency + ', using default rate 1.0');
      rate = 1.0;
    }
    
    // 转换为当前货币的分 (cents)
    const result = usdAmount * rate * 100;
    
    // 记录转换过程供调试
    console.log('convertFromUSD: ' + usdAmount + ' USD = ' + (result/100) + ' ' + usedCurrency + ' (' + result + ' cents, rate: ' + rate + ')');
    
    return result;
  };
  
  // 格式化USD金额为美元字符串
  window.formatUSD = function(amount) {
    return '$' + parseFloat(amount).toFixed(2);
  };
  
  // 格式化金额为当前货币字符串
  window.formatCurrentCurrency = function(amount) {
    const currency = window.getCurrentCurrency();
    const symbol = window.getCurrentCurrencySymbol();
    
    console.log('Formatting amount: ' + amount + ' for currency: ' + currency + ' with symbol: ' + symbol);
    
    // 特殊处理阿尔巴尼亚列克
    if (currency === 'ALL' || /Lek/i.test(currency)) {
      return 'Lek ' + parseFloat(amount).toFixed(2);
    }
    
    // 首先尝试使用Shopify的formatMoney，但不用于进度条显示
    // 因为这会覆盖原始货币符号，仅用于内部计算
    if (typeof Shopify !== 'undefined' && Shopify.formatMoney && window.isInternalFormatting !== true) {
      // 将金额转换为分
      const cents = Math.round(amount * 100);
      return Shopify.formatMoney(cents);
    }
    
    // 备用格式化逻辑
    // 根据货币调整格式
    if (currency === 'JPY') {
      // 日元不使用小数点
      return symbol + Math.round(amount);
    } else {
      return symbol + parseFloat(amount).toFixed(2);
    }
  };
  
  // 执行初始化调试
  window.currencyConfig.debug();
  
  // 监听货币变化并更新购物车显示
  document.addEventListener('DOMContentLoaded', function() {
    // 检查是否存在货币选择器
    const currencySelectors = document.querySelectorAll('.currency-selector, [data-currency-selector], .localization-form__select');
    
    if (currencySelectors.length) {
      currencySelectors.forEach(selector => {
        selector.addEventListener('change', function() {
          // 当货币变化时，延迟一会再更新购物车显示，确保Shopify已更新货币
          setTimeout(function() {
            // 尝试获取Vue实例并更新免运费进度条
            const drawerInstance = getDrawerVueInstance();
            if (drawerInstance && drawerInstance.cart) {
              // 使用更新后的货币刷新显示
              if (typeof drawerInstance.getShippingProgressPercentage === 'function') {
                const percentage = drawerInstance.getShippingProgressPercentage();
                const progressBarFill = document.querySelector('.shipping-progress-bar__fill');
                if (progressBarFill) {
                  progressBarFill.style.width = percentage + '%';
                }
              }
              
              // 更新文本显示
              if (typeof drawerInstance.isEligibleForFreeShipping === 'function') {
                const isEligible = drawerInstance.isEligibleForFreeShipping();
                const successContainer = document.querySelector('.shipping-progress-success-container');
                const remainingContainer = document.querySelector('.shipping-progress-text:not(.shipping-progress-success-container)');
                
                if (isEligible) {
                  if (successContainer) successContainer.style.display = 'block';
                  if (remainingContainer) remainingContainer.style.display = 'none';
                } else {
                  if (successContainer) successContainer.style.display = 'none';
                  if (remainingContainer) remainingContainer.style.display = 'block';
                  
                  // 更新剩余金额
                  const remainingAmount = document.querySelector('.shipping-progress-remaining');
                  if (remainingAmount && typeof drawerInstance.getRemainingAmountForFreeShipping === 'function') {
                    remainingAmount.innerHTML = drawerInstance.getRemainingAmountForFreeShipping();
                  }
                }
              }
            }
          }, 300);
        });
      });
    }
    
    // 如果网站使用自定义的货币切换器，尝试监听可能的DOM变化
    const currencyObserver = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        if (mutation.type === 'attributes' && (mutation.attributeName === 'data-currency' || mutation.attributeName === 'class')) {
          // 可能的货币变化，尝试更新显示
          setTimeout(function() {
            const drawerInstance = getDrawerVueInstance();
            if (drawerInstance && drawerInstance.cart) {
              // 刷新免运费进度条
              updateShippingProgressBar(drawerInstance.cart);
            }
          }, 300);
        }
      });
    });
    
    // 尝试观察可能包含货币信息的元素
    const currencyElements = document.querySelectorAll('body, .currency-selector-wrapper, .localization-form');
    currencyElements.forEach(function(element) {
      currencyObserver.observe(element, { attributes: true, subtree: true });
    });
  });
</script>

<!-- 修复View options按钮行为 -->
<script>
  document.addEventListener('DOMContentLoaded', function () {
    // 修复"View options"按钮行为，确保它直接导航到产品页面
    document.addEventListener(
      'click',
      function (e) {
        // 检查是否点击的是"View options"按钮
        if (
          e.target.classList.contains('quick-add-button-variants') ||
          (e.target.tagName === 'A' && e.target.textContent && e.target.textContent.trim().indexOf('View options') >= 0)
        ) {
          // 阻止事件冒泡，防止触发购物车抽屉
          e.stopPropagation();
          e.stopImmediatePropagation();

          // 获取产品URL并直接导航
          const productUrl = e.target.href;
          if (productUrl) {
            window.location.href = productUrl;
            return false;
          }
        }
      },
      true
    ); // 使用捕获阶段确保在其他事件处理程序之前执行

    // 修复theme.min.js中的handleShopNow函数
    setTimeout(function () {
      if (window.wetheme) {
        // 保存原始函数引用
        const sections = Object.values(window.wetheme.sectionById || {});

        sections.forEach(function (section) {
          if (section && typeof section.handleShopNow === 'function') {
            // 保存原始函数
            const originalHandleShopNow = section.handleShopNow;

            // 覆盖handleShopNow函数
            section.handleShopNow = function (e) {
              // 如果是"View options"按钮，不调用原始函数
              if (
                e.target.classList.contains('quick-add-button-variants') ||
                (e.target.textContent && e.target.textContent.trim().indexOf('View options') >= 0)
              ) {
                // 不阻止默认行为，允许正常导航
                return true;
              }

              // 对于其他按钮，调用原始函数
              return originalHandleShopNow.call(this, e);
            };
          }
        });

        console.log('View options button behavior fixed');
      }
    }, 1000);
  });
</script>

<div class="right-drawer-vue">
  {% comment %} There's no route available for the predictive search api URL yet {% endcomment %}
  <wetheme-right-drawer
    search-url="/search/suggest.json"
    login-url="{{ routes.account_login_url }}"
    is-predictive="{{ settings.predictive_search_enabled }}"
    search-products="{{ settings.predictive_search_products }}"
    search-pages="{{ settings.predictive_search_pages }}"
    search-articles="{{ settings.predictive_search_articles }}"
    search-collections="{{ settings.predictive_search_collections }}"
    language-url="{{ localization.language.root_url }}"
  >
  </wetheme-right-drawer>
</div>
<script type="text/x-template" id="wetheme-right-drawer-template">
    <div>
      <transition name="drawer-right">
        <div class="drawer drawer--right drawer--cart" v-if="isOpen" ref="drawerRight">
          <div class="drawer__header sitewide--title-wrapper">
            <div class="drawer__close js-drawer-close">
              <button type="button" class="icon-fallback-text" ref="drawerClose" v-on:click="close">
                <span class="fallback-text">{{ 'cart.general.close_cart' | t }}</span>
              </button>
            </div>
            <input ref="drawerFocus" tabindex="-1" aria-hidden="true" class="sr-only" />
          </div>

          <div id="CartContainer" v-if="type === 'cart'">
            <form action="/cart/checkout" method="post" novalidate id="CartDrawer-Form" class="cart ajaxcart new-cust-cart-drawer-flex-container cart-drawer-flex-container-main" v-if="cart">
              <input type="hidden" name="_method" value="post">
              <input type="hidden" name="checkout" value="1">

              <!-- Cart content section -->
              <div class="cart-drawer-flex-container cart-drawer-flex-container-cart-customer">
                <div class="ajaxcart__inner">
                <div class="cart-drawer-flex-container">
                  <div class="drawer__title h2 page--title">
                    <span v-if="type === 'cart'"">{{ 'cart.general.title' | t }}</span>
                    <span class="sr-only" v-if="type === 'shop-now'">{{ 'products.product.quick_shop' | t }}</span>
                    <span v-if="type === 'login'">{{ 'customer.login.title' | t }}</span>
                    <span v-if="type === 'search'">{{ 'general.search.title' | t }}</span>
                  </div>

                  <!-- Free Shipping Progress Bar -->
                  <div class="shipping-progress-container" v-if="cart && cart.item_count > 0">
                    <div class="shipping-progress-bar">
                      <div class="shipping-progress-bar__fill" :style="{ width: getShippingProgressPercentage() + '%' }"></div>
                    </div>
                    <div class="shipping-progress-text shipping-progress-success-container" v-if="cart && isEligibleForFreeShipping()">
                      <span class="shipping-progress-success">{% if settings.free_shipping_success_message != blank %}{{ settings.free_shipping_success_message }}{% else %}Congrats! You are eligible for FREE Shipping{% endif %}</span>
                    </div>
                    <div class="shipping-progress-text" v-else>
                      {% if settings.free_shipping_threshold_message != blank %}
                        {% assign threshold_message = settings.free_shipping_threshold_message %}
                        {{ threshold_message | replace: '[amount]', '<span class="shipping-progress-remaining" v-html="getRemainingAmountForFreeShipping()"></span>' }}
                      {% else %}
                        <span class="free-shipping-message">Add <span class="shipping-progress-remaining" v-html="getRemainingAmountForFreeShipping()"></span> to get FREE Shipping</span>
                      {% endif %}
                    </div>
                  </div>

                  <div class="cart-drawer-main-content">
                    <!-- Loading State -->
                    <div class="cart-loading-container" v-if="!cart">
                      <div class="cart-loading-spinner"></div>
                      <p class="cart-loading-text">Loading your cart...</p>
                      <div class="cart-loading-fallback">
                        <p>If your cart doesn't load, you can:</p>
                        <a href="/cart" class="btn dynamic-section-button--drawer-filled cart-loading-button">View Cart Page</a>
                      </div>
                    </div>

                    <!-- Empty Cart State -->
                    <div class="empty-cart-container" v-if="cart && cart.item_count === 0">
                      <div class="empty-cart-icon">
                        <svg width="120" height="120" viewBox="0 0 120 120" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M30 32h60l-8 40H38L30 32z" stroke="#D1D5DB" stroke-width="3" fill="#F3F4F6"/>
                          <circle cx="42" cy="88" r="6" fill="#D1D5DB"/>
                          <circle cx="78" cy="88" r="6" fill="#D1D5DB"/>
                          <path d="M24 20h8l4 12M96 20h-8l-4 12M50 50h20M46 60h28M42 70h36" stroke="#D1D5DB" stroke-width="2" stroke-linecap="round"/>
                        </svg>
                      </div>
                      <h3 class="empty-cart-title">
                        {{ settings.empty_cart_title }}
                    </h3>
                      <p class="empty-cart-text">{{ settings.empty_cart_text }}</p>
                      <a href="{{ settings.empty_cart_button_link | default: '/collections/all' }}" class="btn dynamic-section-button--drawer-filled empty-cart-button">{{ settings.empty_cart_button_text[request.locale.iso_code] | default: settings.empty_cart_button_text.en | default: 'Shop Now' }}</a>
                    </div>

                    <!-- Cart Items -->
                    <span v-if="cart && cart.total_discount > 0" class="hide auto-discount--active"></span>
                    <div class="ajaxcart__product" v-for="(item, index) in cart.items" :key="index + item.id" v-if="cart && cart.item_count > 0">
                      <div class="ajaxcart__row" v-bind:data-line="index + 1"
                        v-bind:class="{ 'is-loading': index + 1 === lineQuantityUpdating }"
                      >
                        <div class="grid display-table">
                          <div class="grid__item small--one-whole medium--one-quarter large--one-quarter medium--display-table-cell">
                            <a v-bind:href="item.url" class="ajaxcart__product-image">
                              <img
                                src="#"
                                alt=""
                                v-responsive="item.image"
                                v-bind:alt="item.featured_image_alt"
                                v-if="item.image"
                              />
                              <img v-if="!item.image" src="//cdn.shopify.com/s/assets/admin/no-image-medium-cc9732cb976dd349a0df1d39816fbcc7.gif" alt="" v-bind:alt="item.product_title" loading="lazy" />
                            </a>
                          </div>
                          <div class="grid__item small--one-whole medium--two-quarters large--two-quarters medium--display-table-cell">
                            <p>
                              <a v-bind:href="item.url" class="ajaxcart__product-name" v-text="item.product_title"></a>
                              <span class="ajaxcart__product-meta" v-if="item.variant_title != 'Default Title'" v-text="item.variant_title"></span>
                              <span class="ajaxcart__product-meta" v-if="item.selling_plan_allocation" v-text="item.selling_plan_allocation.selling_plan.name"></span>
                              <span class="ajaxcart__product-meta" v-for="(item, key, index) in item.properties " :key="index">
                                <span v-html="key"></span>: <span v-html="item"></span>
                              </span>
                              {% if settings.cart_vendor_enable %}
                                <span class="ajaxcart__product-meta" v-text="item.vendor"></span>
                              {% endif %}
                            </p>
                            <ul class="ajaxcart-item__discounts" aria-label="{{ 'customer.order.discount' | t }}">
                              <li class="ajaxcart-item__discount auto-discount--price-container-custom" v-if="item.line_level_discount_allocations.amount > 0">
                                <span class="hide auto-discount--price" v-text="item.line_level_discount_allocations.amount"></span>
                                <span class="ajaxcart-item__discount_title" v-text="item.line_level_discount_allocations.title"></span>
                                <span class="ajaxcart-item__discount_money">- <span v-money="item.line_level_discount_allocations.amount">
                                </span>
                                </span>
                              </li>
                            </ul>
                            <div class="ajaxcart__price-quantity">


                              <div class="grid--full ajaxcart__quantity-wrapper ajaxcart__quantity-wrapper-custom-new-by">
                                <div class="grid__item ajaxcart__quantity-wrapper-item">
                                  <div class="ajaxcart__qty new-quantity-input">
                                    <button
                                      type="button"
                                      class="ajaxcart__qty-adjust ajaxcart__qty--minus"
                                      v-on:click="setQuantity(index + 1, item.quantity - 1, true); setSubtotal(); updateCartPriceDisplay(true);"
                                      v-if="!isGiftwrapProduct(item)"
                                    >
                                      <svg width="12" height="2" viewBox="0 0 12 2" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M0 1h12" stroke="currentColor" stroke-width="1.5"/>
                                      </svg>
                                    </button>
                                    <input
                                      type="number"
                                      name="updates[]"
                                      class="ajaxcart__qty-num"
                                      v-bind:value="item.quantity"
                                      min="0"
                                      aria-label="quantity"
                                      pattern="[0-9]*"
                                      v-on:change="setQuantity(index + 1, parseInt($event.target.value, 10), true); setSubtotal(); updateCartPriceDisplay(true);"
                                      :disabled="isGiftwrapProduct(item)"
                                    />
                                    <button
                                      type="button"
                                      class="ajaxcart__qty-adjust ajaxcart__qty--plus"
                                      v-on:click="setQuantity(index + 1, item.quantity + 1, true); setSubtotal(); updateCartPriceDisplay(true);"
                                      v-if="!isGiftwrapProduct(item)"
                                    >
                                      <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M6 0v12M0 6h12" stroke="currentColor" stroke-width="1.5"/>
                                      </svg>
                                    </button>
                                  </div>
                                  <div class="ajaxcart__price-wrapper">
                                    <s v-if="item.compare_at_price > 0 && item.original_price < item.compare_at_price">
                                      <span class="ajaxcart-item__price-strikethrough" v-money="item.compare_at_price"></span>
                                    </s>

                                    <span class="ajaxcart-item__price" v-money="item.original_price"></span>
                                    <span class="cart-compare-price--with-value" v-if="item.compare_at_price > 0 && item.original_price < item.compare_at_price">
                                      {%- case settings.show_discount -%}
                                        {%- when 'percentage' -%}
                                          <span class="discount--sale-color">-<span v-text="Math.round((item.compare_at_price - item.original_price) / item.compare_at_price * 100)"></span>%</span>
                                        {%- when 'value' -%}
                                          <span class="discount--sale-color">-<span v-money="item.compare_at_price - item.original_price"></span></span>
                                        {%- when 'hide' -%}
                                      {%- endcase -%}
                                    </span>

                                    <!-- Show multiple items count and total price when quantity > 1 -->
                                    <span class="ajaxcart__multiple-items" v-if="item.quantity > 1">
                                      <span class="ajaxcart__multiple-items-count">{{ item.quantity }} - </span>
                                      <span class="ajaxcart__multiple-items-price" v-money="item.original_price * item.quantity"></span>
                                    </span>
                                  </div>

                                </div>
                              </div>
                            </div>

                            <div class="unit-price" v-if="item.unit_price_measurement_price">
                              (<span class="unit-price__price" v-money="item.unit_price_measurement_price"></span>
                              <span> / </span>
                              <span class="unit-price__ref-value" v-text="item.unit_price_measurement_value"></span>
                              <span class="unit-price__ref-unit" v-text="item.unit_price_measurement_unit"></span>)
                            </div>

                            {% comment %} <ul class="ajaxcart-item__discounts" aria-label="{{ 'customer.order.discount' | t }}">
                              <li class="ajaxcart-item__discount" v-if="item.line_level_discount_allocations.amount > 0">
                                <span class="hide auto-discount--price" v-text="item.line_level_discount_allocations.amount"></span>
                                <span class="ajaxcart-item__discount_title" v-text="item.line_level_discount_allocations.title"></span>
                                <span class="ajaxcart-item__discount_money">- <span v-money="item.line_level_discount_allocations.amount">
                                </span>
                                </span>
                              </li>
                            </ul> {% endcomment %}

                            <button
                              type="button"
                              class="ajaxcart__remove"
                              v-on:click="removeItem(index + 1, item.id)"
                              v-if="!isGiftwrapProduct(item)"
                            >
                              <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M1 1l10 10m0-10L1 11" stroke="currentColor" stroke-width="1.5"/>
                              </svg>
                            </button>

                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Footer section (always after cart content) -->
              <footer class="global-drawer__footer " v-if="cart && cart.item_count > 0">
                    {% if settings.cart_notes_enable or settings.giftwrap_gift_note %}
                      <div class="cart-drawer__notes">

                        {% # Cart notes %}
                        {% if settings.cart_notes_enable %}
                          {% assign cart_note_label = 'cart.general.note' | t %}
                          {% if cart.note != blank %}
                            {% assign cart_note_label = 'cart.general.note' | t %}
                          {% endif %}
                          <cart-update-modal
                            data-add-label="{{ 'cart.general.note' | t }}"
                            data-edit-label="{{ 'cart.general.note' | t }}"
                          >
                            <button data-cart-update-open class="cart-drawer__note--open inline-icon--wrapper icon--left">
                              {% render 'theme-icon' with icon: 'note', iconSize: 16 %}
                              <span data-cart-update-open-text>{{ cart_note_label }}</span>
                            </button>
                            <span data-cart-update-close class="cart-drawer__note--modal-overlay"></span>
                            <div
                              data-cart-update-modal
                              aria-modal="true"
                              role="dialog"
                              aria-hidden="true"
                              class="cart-drawer__note--modal"
                            >
                              <cart-update>
                                <label for="CartNote" class="cart-drawer__note--label" data-cart-update-label>{{ cart_note_label }}</label>
                                <textarea name="note" id="CartNote" class="cart-drawer__note--textarea block-radius">{{ cart.note }}</textarea>
                              </cart-update>
                              <button
                                data-cart-update-close
                                aria-label="{{ 'cart.general.update' | t }}"
                                class="btn dynamic-section-button--drawer-filled cart-drawer__note--close-btn"
                              >{{ 'cart.general.update' | t }}</button>
                            </div>
                          </cart-update-modal>
                        {% endif %}

                        {% # Gift note %}
                        {% if settings.giftwrap_gift_note %}
                          {% assign gift_note_label = 'products.general.giftwrap_note' | t %}
                          {% if cart.attributes.gift_note %}
                            {% assign gift_note_label = 'products.general.giftwrap_note' | t %}
                          {% endif %}
                          <cart-update-modal
                            data-add-label="{{ 'products.general.giftwrap_note' | t }}"
                            data-edit-label="{{ 'products.general.giftwrap_note' | t }}"
                          >
                            <button data-cart-update-open class="cart-drawer__note--open inline-icon--wrapper icon--left">
                              {% render 'theme-icon' with icon: 'gift', iconSize: 16 %}
                              <span data-cart-update-open-text>{{ gift_note_label }}</span>
                            </button>
                            <span data-cart-update-close class="cart-drawer__note--modal-overlay"></span>
                            <div
                              data-cart-update-modal
                              aria-modal="true"
                              role="dialog"
                              aria-hidden="true"
                              class="cart-drawer__note--modal"
                            >
                              <cart-update>
                                <label for="CartGiftNote" class="cart-drawer__note--label" data-cart-update-label>{{ gift_note_label }}</label>
                                <textarea id="CartGiftNote" name="attributes[gift_note]" class="cart-drawer__note--textarea block-radius">{{ cart.attributes.gift_note }}</textarea>
                              </cart-update>
                              <button
                                data-cart-update-close
                                aria-label="{{ 'cart.general.update' | t }}"
                                class="btn dynamic-section-button--drawer-filled cart-drawer__note--close-btn"
                              >{{ 'cart.general.update' | t }}</button>
                            </div>
                          </cart-update-modal>
                        {% endif %}
                      </div>
                    {% endif %}

                    <div class="cart-drawer__sub-footer">

                      {% # Automatic discounts - cart level %}
                      {% for discount_application in cart.cart_level_discount_applications %}
                        <div class="cart-drawer__discounts">
                          <div class="cart-drawer__product_card--badge cart-drawer__product_card--badge--sale">
                            <span>{{ discount_application.title }} (-{{ discount_application.total_allocated_amount | money }})</span>
                          </div>
                        </div>
                      {% endfor %}

                      {% # Subtotal %}
                      <div class="cart-drawer__subtotal">
                        <h5 class="cart-drawer__subtotal--heading">{{ 'cart.general.subtotal' | t }}</h5>
                        <div class="cart-drawer__subtotal--price h3">
                          <span class="visually-hidden">{{ 'cart.general.subtotal' | t }}</span>
                          <span class="cart-drawer__subtotal--compare" v-if="getCartComparePrice() > cart.total_price">
                            <span v-money="getCartComparePrice()"></span>
                          </span>
                          <span class="visually-hidden">{{ 'cart.general.subtotal' | t }}</span>
                          <span class="cart-drawer__subtotal--price-value" :class="{'cart-drawer__subtotal--sale': getCartComparePrice() > cart.total_price}">
                            <span v-money="cart.total_price"></span>
                          </span>
                        </div>
                      </div>

                      {% # Tax and shipping %}
                      <div class="cart-drawer__taxes-shipping text-link-animated">
                        {%- capture taxes_shipping_checkout -%}
                          {%- if cart.taxes_included and shop.shipping_policy.body != blank -%}
                            {{ 'cart.general.taxes_included_and_shipping_policy_html' | t: link: shop.shipping_policy.url }}
                          {%- elsif cart.taxes_included -%}
                            {{ 'cart.general.taxes_included_but_shipping_at_checkout' | t }}
                          {%- elsif shop.shipping_policy.body != blank -%}
                            {{ 'cart.general.taxes_and_shipping_policy_at_checkout_html' | t: link: shop.shipping_policy.url }}
                          {%- else -%}
                            {{ 'cart.general.taxes_and_shipping_at_checkout' | t }}
                          {%- endif -%}
                        {%- endcapture -%}
                        <p>{{ taxes_shipping_checkout }}</p>
                      </div>

                      {% # Buttons %}
                      <div class="cart-drawer__footer--buttons">
                        <a href="{{ routes.cart_url }}" class="btn btn--secondary dynamic-section-button--drawer-outlined cart-drawer__footer--button cart-drawer__view-cart-btn">
                          {{ 'cart.general.view_cart' | t | default: 'View cart' }}
                        </a>

                        <button
                          type="submit"
                          class="btn dynamic-section-button--drawer-filled cart-drawer__footer--button cart-drawer__checkout-btn"
                          name="checkout"
                          id="CartDrawer-Checkout"
                          form="CartDrawer-Form"
                          onclick="document.getElementById('CartDrawer-Form').action='/cart/checkout'; document.getElementById('CartDrawer-Form').submit(); return false;"
                          v-on:click.prevent="submitCheckout"
                        >{{ 'cart.general.checkout' | t }}</button>
                      </div>
                    </div>

                    <!-- Fallback checkout form -->
                    <form method="post" action="/cart/checkout" id="cart-drawer-fallback-form" style="display: none;">
                      <input type="hidden" name="checkout" value="1">
                      <button type="submit" id="fallback-checkout-button" style="display: none;">Checkout</button>
                    </form>
                  </footer>

              <!-- Recommendations section (after cart content) -->
              <div class="cart-drawer-flex-container-recommendations mobile-cart-drawer-none-container-recommendations">
              {% if settings.show_cart_recommendations %}
                {%- liquid
                  assign show_recommendations = true

                  # 找出购物车中价格最高的商品ID用于推荐
                  assign max_price = 0
                  assign max_price_product_id = ""
                  for item in cart.items
                    if item.product.price > max_price
                      assign max_price = item.product.price
                      assign max_price_product_id = item.product.id
                    endif
                  endfor
                  if max_price_product_id == "" and settings.empty_cart_products != blank and settings.empty_cart_products.products.first != blank
                    assign max_price_product_id = settings.empty_cart_products.products.first.id
                  endif
                -%}
                {% if show_recommendations %}
                  <div class="cart-drawer-recommendations-sidebar">
                    <div class="global-drawer--secondary__content">
                      <div class="global-drawer--secondary__header">
                        {% if settings.cart_recommendations_heading != blank %}
                          <h5 class="text-link-animated">{{ settings.cart_recommendations_heading }}</h5>
                        {% else %}
                          <h5 class="text-link-animated">Don't forget these...</h5>
                        {% endif %}
                      </div>
                      <div class="global-drawer--secondary__body cart-drawer__recommendations">
                        {% comment %} 使用指定系列中的产品作为推荐 {% endcomment %}
                        {% assign recommended_collection_handle = settings.cart_recommendations_collection | default: 'all' %}
                        {% assign recommended_collection = collections[recommended_collection_handle] %}

                        <div class="cart-drawer__recommendations-grid">
                          {% assign recommendations_limit = settings.cart_recommendations_limit | default: 8 %}
                          {% for product in recommended_collection.products limit: recommendations_limit %}
                            {% if product.available %}
                              <div class="product-card-basic cart-drawer__product-card">
                                <div class="product-card-basic__image">
                                  <a href="{{ product.url }}" tabindex="-1" aria-hidden="true">
                                    {% if product.featured_image %}
                                      <img src="{{ product.featured_image | img_url: '80x80', crop: 'center' }}" alt="{{ product.featured_image.alt | escape }}" loading="lazy" class="thumbnail-radius">
                                    {% else %}
                                      {{ 'product-1' | placeholder_svg_tag: 'icon icon--placeholder thumbnail-radius' }}
                                    {% endif %}
                                  </a>
                                </div>

                                <div class="product-card-basic--info">
                                  <div class="product-card-basic--info--body">
                                    <div>
                                      {% assign title_font = 'product-grid--title-font-' | append: settings.type_card_title_font %}
                                      <div class="product-card-basic__title {{ title_font }}">
                                        <a href="{{ product.url }}">{{ product.title }}</a>
                                      </div>
                                    </div>

                                    {% if product.has_only_default_variant == false and product.variants.size > 1 %}
                                      <div class="product-card-basic__variants">
                                        <select class="product-card-variant-selector" data-product-id="{{ product.id }}" onchange="updateRecommendationVariant(this, {{ product.id }})">
                                          {% for variant in product.variants %}
                                            <option
                                              value="{{ variant.id }}"
                                              data-price="{{ variant.price }}"
                                              data-compare-price="{{ variant.compare_at_price | default: 0 }}"
                                              {% if variant.available == false %}disabled{% endif %}>
                                              {{ variant.title }}{% if variant.available == false %} - Sold out{% endif %}
                                            </option>
                                          {% endfor %}
                                        </select>
                                      </div>
                                    {% endif %}

                                    <div class="product-card-basic__price">
                                      <span class="money">
                                        {% if settings.show_currency_code %}
                                          {{ product.price | money_with_currency }}
                                        {% else %}
                                          {{ product.price | money }}
                                        {% endif %}
                                      </span>
                                    </div>
                                  </div>

                                  <div class="product-card-basic--info--footer">
                                    <div class="text-link-animated">
                                      <form class="product-card-form">
                                        <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
                                        <input type="hidden" name="quantity" value="1">
                                        <button type="button" class="btn--underlined btn--underlined-with-icon add-to-cart-btn" onclick="addToCartDrawer({{ product.selected_or_first_available_variant.id }}, 1, this)">
                                          {% render 'theme-icon' with icon: 'shopping-bag', iconSize: 12, iconClasses: 'btn--underlined-with-icon__icon' %}
                                          <span class="add-to-cart-text">{{ 'products.product.add_to_cart' | t }}</span>
                                        </button>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            {% endif %}
                          {% endfor %}
                        </div>
                      </div>
                    </div>
                  </div>
                {% endif %}
              {% endif %}
            </div>
            </form>
            <div class="cart-drawer-flex-container-recommendations desktop-cart-drawer-none-container-recommendations">
              {% if settings.show_cart_recommendations %}
                {%- liquid
                  assign show_recommendations = true

                  # 找出购物车中价格最高的商品ID用于推荐
                  assign max_price = 0
                  assign max_price_product_id = ""
                  for item in cart.items
                    if item.product.price > max_price
                      assign max_price = item.product.price
                      assign max_price_product_id = item.product.id
                    endif
                  endfor
                  if max_price_product_id == "" and settings.empty_cart_products != blank and settings.empty_cart_products.products.first != blank
                    assign max_price_product_id = settings.empty_cart_products.products.first.id
                  endif
                -%}
                {% if show_recommendations %}
                  <div class="cart-drawer-recommendations-sidebar">
                    <div class="global-drawer--secondary__content">
                      <div class="global-drawer--secondary__header">
                        {% if settings.cart_recommendations_heading != blank %}
                          <h5 class="text-link-animated">{{ settings.cart_recommendations_heading }}</h5>
                        {% else %}
                          <h5 class="text-link-animated">Don't forget these...</h5>
                        {% endif %}
                      </div>
                      <div class="global-drawer--secondary__body cart-drawer__recommendations">
                        {% comment %} 使用指定系列中的产品作为推荐 {% endcomment %}
                        {% assign recommended_collection_handle = settings.cart_recommendations_collection | default: 'all' %}
                        {% assign recommended_collection = collections[recommended_collection_handle] %}

                        <div class="cart-drawer__recommendations-grid">
                          {% assign recommendations_limit = settings.cart_recommendations_limit | default: 8 %}
                          {% for product in recommended_collection.products limit: recommendations_limit %}
                            {% if product.available %}
                              <div class="product-card-basic cart-drawer__product-card">
                                <div class="product-card-basic__image">
                                  <a href="{{ product.url }}" tabindex="-1" aria-hidden="true">
                                    {% if product.featured_image %}
                                      <img src="{{ product.featured_image | img_url: '80x80', crop: 'center' }}" alt="{{ product.featured_image.alt | escape }}" loading="lazy" class="thumbnail-radius">
                                    {% else %}
                                      {{ 'product-1' | placeholder_svg_tag: 'icon icon--placeholder thumbnail-radius' }}
                                    {% endif %}
                                  </a>
                                </div>

                                <div class="product-card-basic--info">
                                  <div class="product-card-basic--info--body">
                                    <div>
                                      {% assign title_font = 'product-grid--title-font-' | append: settings.type_card_title_font %}
                                      <div class="product-card-basic__title {{ title_font }}">
                                        <a href="{{ product.url }}">{{ product.title }}</a>
                                      </div>
                                    </div>

                                    {% if product.has_only_default_variant == false and product.variants.size > 1 %}
                                      <div class="product-card-basic__variants">
                                        <select class="product-card-variant-selector" data-product-id="{{ product.id }}" onchange="updateRecommendationVariant(this, {{ product.id }})">
                                          {% for variant in product.variants %}
                                            <option
                                              value="{{ variant.id }}"
                                              data-price="{{ variant.price }}"
                                              data-compare-price="{{ variant.compare_at_price | default: 0 }}"
                                              {% if variant.available == false %}disabled{% endif %}>
                                              {{ variant.title }}{% if variant.available == false %} - Sold out{% endif %}
                                            </option>
                                          {% endfor %}
                                        </select>
                                      </div>
                                    {% endif %}

                                    <div class="product-card-basic__price">
                                      <span class="money">
                                        {% if settings.show_currency_code %}
                                          {{ product.price | money_with_currency }}
                                        {% else %}
                                          {{ product.price | money }}
                                        {% endif %}
                                      </span>
                                    </div>
                                  </div>

                                  <div class="product-card-basic--info--footer">
                                    <div class="text-link-animated">
                                      <form class="product-card-form">
                                        <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
                                        <input type="hidden" name="quantity" value="1">
                                        <button type="button" class="btn--underlined btn--underlined-with-icon add-to-cart-btn" onclick="addToCartDrawer({{ product.selected_or_first_available_variant.id }}, 1, this)">
                                          {% render 'theme-icon' with icon: 'shopping-bag', iconSize: 12, iconClasses: 'btn--underlined-with-icon__icon' %}
                                          <span class="add-to-cart-text">{{ 'products.product.add_to_cart' | t }}</span>
                                        </button>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            {% endif %}
                          {% endfor %}
                        </div>
                      </div>
                    </div>
                  </div>
                {% endif %}
              {% endif %}
            </div>
          </div>

  </div>
          <div id="ShopNowContainer" v-if="type === 'shop-now'">
            <div ref="shopNowContent"></div>
          </div>

          <div id="SearchContainer" v-if="type === 'search'">
            <div class="search-drawer">
              <div class="input-group">
                <span class="input-group-btn">
                  <button type="submit" class="btn icon-fallback-text" v-on:click="onSearchSubmit" tabindex="0">
                    <i class="fa fa-search"></i>
                    <span class="fallback-text">{{ 'general.search.submit' | t }}</span>
                  </button>
                </span>
                <div class="search-input-group">
                  <input
                    type="search" name="q" id="search-input" placeholder="{{ 'general.search.placeholder' | t }}"
                    class="input-group-field" aria-label="{{ 'general.search.placeholder' | t }}" autocomplete="off" autocorrect="off" spellcheck="false" ref="searchText"
                    v-model="searchQuery" @keydown.enter="onSearchSubmit"
                  />
                  <div class="search-drawer--clear" v-if="searchQuery.length > 0" v-on:click="clearSearchInput" tabindex="0">
                    <span class="search-drawer--clear-icon"></span>
                  </div>
                </div>
              </div>
              <div class="wrapper-padded">
                <div id="search-results" class="grid-uniform">
                  <div v-if="searching" class="search-loading">
                    <i class="fa fa-circle-o-notch fa-spin fa-fw"></i><span class="sr-only">{{ 'collections.paginate.loading' | t }}</span>
                  </div>
                  <div v-text="searchSummary" v-if="!searching"></div>
                  <div class="search-results__meta top" v-if="searchHasResults">
                    <div class="search-results__meta-view-all"><a id="search-show-more" v-bind:href="searchPageUrlWithQuery" class="btn">{{ 'general.search.view_all' | t }}</a></div>
                  </div>
                  <div class="" v-for="group in searchGroups" v-if="!searching">
                    <h2 v-text="group.name" v-if="group.results.length"></h2>
                    <div class="indiv-search-listing-grid" v-for="result in group.results">
                      <div class="grid">
                        <div class="grid__item large--one-fifth live-search--image" v-if="result.featured_image">
                          <a v-bind:href="result.url" v-bind:title="result.title">
                            <span v-if="result.featured_image.url">
                              <img
                                loading="lazy"
                                v-bind:src="result.featured_image.url"
                                v-bind:alt="result.featured_image.alt"
                              />
                            </span>
                          </a>
                        </div>
                        <div class="grid__item line-search-content" :class="(result.image || result.featured_image) ? 'large--four-fifths' : 'large--one-whole'">
                          {% if settings.predictive_search_show_vendor %}
                          <div v-if="result.vendor" v-text="result.vendor"></div>
                          {% endif %}
                          <h5>
                            <a v-bind:href="result.url" v-text="result.title"></a>
                          </h5>
                          <div v-if="!result.available && group.name == 'Products'">{{ 'products.product.sold_out' | t }}</div>
                          {% if settings.predictive_search_show_price %}
                          <div v-if="result.price" v-html="result.price"></div>
                          {% endif %}
                        </div>
                      </div>
                      <span class="search-drawer-separator" v-if="group.results.length"><hr /></span>
                    </div>
                  </div>
                  <div class="search-results__meta bottom" v-if="searchHasResults">
                    <div class="search-results__meta-view-all"><a id="search-show-more" v-bind:href="searchPageUrlWithQuery" class="btn">{{ 'general.search.view_all' | t }}</a></div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div id="LogInContainer" v-if="type === 'login'">
            <div ref="loginContent"></div>
          </div>
        </div>
      </transition>
    </div>
</script>

<script></script>

<script>
    // Global variable to store the Vue instance reference
    var drawerVueInstance = null;
  
    // Free shipping threshold in cents (e.g., 100000 = $1000.00)
    var freeShippingThreshold = {{ settings.free_shipping_threshold | default: 10000 }};
  
    // Function to get the drawer Vue instance
    function getDrawerVueInstance() {
      if (drawerVueInstance) return drawerVueInstance;
  
      const drawerElement = document.querySelector('.right-drawer-vue');
      if (drawerElement && drawerElement.__vue__) {
        drawerVueInstance = drawerElement.__vue__.$children[0];
        return drawerVueInstance;
      }
      return null;
    }
  
    // Add specific listener for checkout button to ensure it works
    document.addEventListener('DOMContentLoaded', function () {
      setTimeout(function () {
        // Create a function to handle direct checkout
        function handleDirectCheckout() {
          const form = document.getElementById('CartDrawer-Form');
          if (form) {
            // Create a hidden input for checkout action
            const checkoutInput = document.createElement('input');
            checkoutInput.type = 'hidden';
            checkoutInput.name = 'checkout';
            checkoutInput.value = '1';
            form.appendChild(checkoutInput);
  
            // Submit the form directly
            form.submit();
            return false;
          }
        }
  
        // Add a document-level event listener to catch checkout button clicks
        document.addEventListener('click', function (e) {
          if (e.target.closest('#CartDrawer-Checkout')) {
            e.preventDefault();
            return handleDirectCheckout();
          }
        });
      }, 1000);
    });
  
        // 初始化购物车数据并打开抽屉
      function initializeCartDrawer() {
        // Set a timeout for slow connections
        const timeoutPromise = new Promise((resolve) => {
          // After 3 seconds, provide a fallback empty cart object
          setTimeout(() => {
            resolve({
              item_count: 0,
              items: [],
              total_price: 0,
              original_total_price: 0
            });
          }, 3000);
        });
        
        // Create the fetch promise
        const fetchPromise = fetch('/cart.js', { 
          method: 'GET',
          headers: { 'Accept': 'application/json' },
          cache: 'no-store'
        })
        .then(res => res.json())
        .catch(err => {
          console.error('Error fetching cart data:', err);
          // Return an empty cart on error
          return {
            item_count: 0,
            items: [],
            total_price: 0,
            original_total_price: 0
          };
        });
        
        // Race between the fetch and the timeout
        Promise.race([fetchPromise, timeoutPromise])
          .then(cartData => {
            const drawerInstance = getDrawerVueInstance();
            if (drawerInstance) {
              // Initialize with the cart data (either real or fallback)
              drawerInstance.cart = cartData;
              drawerInstance.type = 'cart';
              
              // Force Vue to update
              if (typeof drawerInstance.$forceUpdate === 'function') {
                drawerInstance.$forceUpdate();
              }
              
              // If we got the fallback data, continue trying to get real data
              if (cartData.isTimeoutFallback) {
                fetchPromise.then(realCartData => {
                  drawerInstance.cart = realCartData;
                  if (typeof drawerInstance.$forceUpdate === 'function') {
                    drawerInstance.$forceUpdate();
                  }
                });
              }
            } else {
              console.error('Could not get drawer Vue instance');
            }
          });
      }
  
    // Add shipping progress percentage calculation method to Vue component
    document.addEventListener('DOMContentLoaded', function () {
      setTimeout(function () {
        const drawerInstance = getDrawerVueInstance();
        if (drawerInstance) {
          // 检查是否符合免运费条件
          drawerInstance.isEligibleForFreeShipping = function() {
            if (!this.cart) return false;
            
            const cartTotal = this.cart.total_price || 0;
            const currentCurrency = window.getCurrentCurrency();
            
            // 将购物车金额转换为美元
            const cartTotalUSD = window.convertToUSD(cartTotal, currentCurrency);
            
            // 保存在商店中用于调试
            if (!window.cartConversionDebug) {
              window.cartConversionDebug = {};
            }
            
            window.cartConversionDebug = {
              currency: currentCurrency,
              originalAmount: cartTotal,
              usdAmount: cartTotalUSD,
              threshold: window.currencyConfig.freeShippingThresholdUSD,
              isEligible: cartTotalUSD >= window.currencyConfig.freeShippingThresholdUSD,
              timestamp: new Date().toISOString()
            };
            
            // 为调试目的，记录关键值
            console.log('Currency:', currentCurrency);
            console.log('Cart Total (original):', cartTotal);
            console.log('Cart Total in USD:', cartTotalUSD);
            console.log('Free Shipping Threshold USD:', window.currencyConfig.freeShippingThresholdUSD);
            console.log('Is Eligible:', cartTotalUSD >= window.currencyConfig.freeShippingThresholdUSD);
            
            // 与美元阈值比较
            return cartTotalUSD >= window.currencyConfig.freeShippingThresholdUSD;
          };
          
          // 获取距离免运费还差多少(显示当前货币金额)
          drawerInstance.getRemainingAmountForFreeShipping = function() {
            if (!this.cart) {
              // 如果购物车为空，显示完整的免运费阈值(以当前货币显示)
              const thresholdInCurrentCurrency = window.convertFromUSD(
                window.currencyConfig.freeShippingThresholdUSD, 
                window.getCurrentCurrency()
              ) / 100; // 转换为当前货币金额
              
              // 标记这是用于进度条显示，不应该覆盖原始货币符号
              window.isInternalFormatting = true;
              const formatted = window.formatCurrentCurrency(thresholdInCurrentCurrency);
              window.isInternalFormatting = false;
              return formatted;
            }
            
            const cartTotal = this.cart.total_price || 0;
            const currentCurrency = window.getCurrentCurrency();
            
            // 记录原始数据供调试
            console.log('Cart total in current currency: ' + cartTotal + ' ' + currentCurrency);
            
            // 将购物车金额转换为美元
            const cartTotalUSD = window.convertToUSD(cartTotal, currentCurrency);
            console.log('Cart total in USD: ' + cartTotalUSD);
            console.log('Free shipping threshold in USD: ' + window.currencyConfig.freeShippingThresholdUSD);
            
            // 计算还差多少美元
            const remainingUSD = Math.max(0, window.currencyConfig.freeShippingThresholdUSD - cartTotalUSD);
            console.log('Remaining amount in USD: ' + remainingUSD);
            
            // 转换回当前货币
            const remainingCents = window.convertFromUSD(remainingUSD, currentCurrency);
            console.log('Remaining amount in current currency (cents): ' + remainingCents);
            
            const remainingCurrentCurrency = remainingCents / 100;
            console.log('Remaining amount in current currency: ' + remainingCurrentCurrency);
            
            // 特殊处理阿尔巴尼亚列克
            if (currentCurrency === 'ALL' || /Lek/i.test(currentCurrency)) {
              console.log('Using special format for Albanian Lek');
              return 'Lek ' + parseFloat(remainingCurrentCurrency).toFixed(2);
            }
            
            // 标记这是用于进度条显示，不应该覆盖原始货币符号
            window.isInternalFormatting = true;
            
            // 使用我们自己的格式化函数，确保不覆盖原始货币符号
            console.log('Using our own formatCurrentCurrency for formatting');
            const result = window.formatCurrentCurrency(remainingCurrentCurrency);
            
            // 取消标记
            window.isInternalFormatting = false;
            
            return result;
          };
          
          // 计算进度条百分比(基于美元)
          drawerInstance.getShippingProgressPercentage = function() {
            if (!this.cart) return 0;
            
            const cartTotal = this.cart.total_price || 0;
            const currentCurrency = window.getCurrentCurrency();
            
            // 将购物车金额转换为美元
            const cartTotalUSD = window.convertToUSD(cartTotal, currentCurrency);
            
            // 记录转换计算的详细日志
            console.log('Progress calculation:');
            console.log('- Cart total in ' + currentCurrency + ': ' + cartTotal + ' cents');
            console.log('- Cart total in USD: $' + cartTotalUSD.toFixed(2));
            console.log('- Free shipping threshold: $' + window.currencyConfig.freeShippingThresholdUSD.toFixed(2));
            
            // 计算百分比(最大100%)
            const percentage = Math.min(100, (cartTotalUSD / window.currencyConfig.freeShippingThresholdUSD) * 100);
            console.log('- Progress percentage: ' + percentage.toFixed(2) + '%');
            
            return percentage;
          };
  
          // Add submitCheckout method to handle checkout button click
          drawerInstance.submitCheckout = function () {
            console.log('Checkout button clicked via Vue method');
  
            // Method 1: Direct form submission
            const form = document.getElementById('CartDrawer-Form');
            if (form) {
              // Make sure the form has the correct action
              form.action = '/cart/checkout';
  
              // Ensure checkout parameter is included
              let checkoutInput = form.querySelector('input[name="checkout"]');
              if (!checkoutInput) {
                checkoutInput = document.createElement('input');
                checkoutInput.type = 'hidden';
                checkoutInput.name = 'checkout';
                checkoutInput.value = '1';
                form.appendChild(checkoutInput);
              }
  
              // Submit the form directly
              form.submit();
              return false;
            } else {
              // Fallback: Direct URL navigation
              window.location.href = '/checkout';
              return false;
            }
          };
  
          // Add method to calculate total compare price
          drawerInstance.getCartComparePrice = function () {
            let compareTotal = 0;
  
            // If cart is not loaded yet, return 0
            if (!this.cart || !this.cart.items) {
              return 0;
            }
  
            // Loop through all items and add up their compare prices
            this.cart.items.forEach(item => {
              if (item.compare_at_price > 0) {
                // For each item, add (compare price × quantity)
                compareTotal += item.compare_at_price * item.quantity;
              } else {
                // If no compare price, use the regular price
                compareTotal += item.original_price * item.quantity;
              }
            });
  
            return compareTotal;
          };
  
          // Add removeItem method for smoother item removal
          drawerInstance.removeItem = function (line, itemId) {
            // Immediately hide the item for a smoother experience
            if (this.cart && this.cart.items) {
              const itemIndex = line - 1;
              if (itemIndex >= 0 && itemIndex < this.cart.items.length) {
                // Create a visual effect of removal
                const itemRow = document.querySelector(`.ajaxcart__row[data-line="${line}"]`);
                if (itemRow) {
                  // Apply a fade-out effect
                  itemRow.style.transition = 'opacity 0.3s ease';
                  itemRow.style.opacity = '0.5';
                }
              }
            }
  
            // Call the actual quantity update with a small delay
            setTimeout(() => {
              this.setQuantity(line, 0);
              this.setSubtotal();
              this.updateCartPriceDisplay(true);
            }, 100);
          };
  
          // Enhance setQuantity method to be more efficient
          const originalSetQuantity = drawerInstance.setQuantity;
          if (originalSetQuantity) {
            drawerInstance.setQuantity = function (line, quantity, optimized = false) {
              // Skip redundant updates for small changes if optimized
              if (optimized && this.cart && this.cart.items) {
                const itemIndex = line - 1;
                if (itemIndex >= 0 && itemIndex < this.cart.items.length) {
                  const currentItem = this.cart.items[itemIndex];
                  // If quantity is the same, don't update
                  if (currentItem.quantity === quantity) {
                    return;
                  }
  
                  // If this is just incrementing/decrementing by 1, optimize the update
                  if (Math.abs(currentItem.quantity - quantity) === 1) {
                    // Update the local cart data immediately for a smoother experience
                    currentItem.quantity = quantity;
                    this.$forceUpdate();
                  }
                }
              }
  
              // Call the original method
              return originalSetQuantity.call(this, line, quantity);
            };
          }
  
          // 确保购物车数据已初始化
          if (!drawerInstance.cart) {
            initializeCartDrawer();
          }
        } else {
          console.error('Could not get drawer Vue instance on DOMContentLoaded');
          // 尝试延迟再次初始化
          setTimeout(initializeCartDrawer, 500);
        }
      }, 1000);
  
      // 添加额外的初始化尝试，确保购物车数据加载
      setTimeout(initializeCartDrawer, 2000);
    });
  
    // Function to update price elements in the cart drawer
    function updateCartPriceElements(cartData) {
      if (!cartData) {
        console.error('No cart data provided to updateCartPriceElements');
        return;
      }
  
      try {
        // Check if cart is empty
        if (!cartData.item_count || cartData.item_count === 0) {
          console.log('Cart is empty, updating price elements');
  
          // Update any subtotal that might show $0.00
          const subtotalElements = document.querySelectorAll('.cart-drawer__subtotal--price-value, .cart-drawer__subtotal--price span:last-child');
          if (subtotalElements.length > 0) {
            subtotalElements.forEach(el => {
              el.innerHTML = formatMoney(0);
            });
          }
  
          // Don't return, continue to allow other functions to run
        }
  
        // Always show the footer
        const footerElement = document.querySelector('.global-drawer__footer');
        if (footerElement) {
          footerElement.style.display = '';
        }
  
        // Format the price according to the store's currency format
        let formattedPrice = formatMoney(cartData.total_price);
  
        // Calculate total compare price
        let totalComparePrice = 0;
        if (cartData.items && cartData.items.length > 0) {
          cartData.items.forEach(item => {
            if (item.compare_at_price > 0) {
              totalComparePrice += item.compare_at_price * item.quantity;
            } else {
              totalComparePrice += item.original_price * item.quantity;
            }
          });
        }
  
        // 直接更新价格元素，确保价格正确显示
        const priceElement = document.querySelector('.cart-drawer__subtotal--price-value');
        if (priceElement) {
          priceElement.innerHTML = formattedPrice;
        }
  
        // 更新比较价格（如果有折扣）
        const compareElement = document.querySelector('.cart-drawer__subtotal--compare');
        if (compareElement) {
          if (totalComparePrice > cartData.total_price) {
            compareElement.innerHTML = formatMoney(totalComparePrice);
            compareElement.style.display = 'inline-block';
  
            // 添加折扣样式
            if (priceElement) {
              priceElement.classList.add('cart-drawer__subtotal--sale');
            }
          } else {
            compareElement.style.display = 'none';
  
            // 移除折扣样式
            if (priceElement) {
              priceElement.classList.remove('cart-drawer__subtotal--sale');
            }
          }
        }
  
        // 更新购物车总价显示
        const subtotalPriceElements = document.querySelectorAll('.cart-drawer__subtotal--price .money, .cart-drawer__subtotal--price span:not(.visually-hidden):not(.cart-drawer__subtotal--compare)');
        if (subtotalPriceElements.length > 0) {
          subtotalPriceElements.forEach(el => {
            el.innerHTML = formattedPrice;
          });
        }
  
        // 更新折扣显示
        updateDiscountDisplay(cartData);
  
        // 更新免运费进度条
        updateShippingProgressBar(cartData);
      } catch (error) {
        console.error('Error in updateCartPriceElements:', error);
      }
    }
  
    // Function to update the shipping progress bar
    function updateShippingProgressBar(cartData) {
      if (!cartData) return;
  
      const cartTotal = cartData.total_price || 0;
      const currentCurrency = window.getCurrentCurrency();
      
      // 将购物车金额转换为美元
      const cartTotalUSD = window.convertToUSD(cartTotal, currentCurrency);
      
      // 计算百分比(最大100%)
      const percentage = Math.min(100, (cartTotalUSD / window.currencyConfig.freeShippingThresholdUSD) * 100);
  
      // Update progress bar fill width - add a small delay to ensure smooth animation
      const progressBarFill = document.querySelector('.shipping-progress-bar__fill');
      if (progressBarFill) {
        // Use requestAnimationFrame for smoother updates
        requestAnimationFrame(() => {
          progressBarFill.style.width = percentage + '%';
        });
      }
  
      // Update text messages - use direct selectors for better performance
      const successContainer = document.querySelector('.shipping-progress-success-container');
      const remainingContainer = document.querySelector('.shipping-progress-text:not(.shipping-progress-success-container)');
      const remainingAmount = document.querySelector('.shipping-progress-remaining');
  
      // Check if we already meet the threshold
      const alreadyMetThreshold = window.shippingThresholdMet === true;
      
      // 计算还差多少美元
      const remainingUSD = Math.max(0, window.currencyConfig.freeShippingThresholdUSD - cartTotalUSD);
      
      // 转换为当前货币
      const remainingCurrentCurrency = window.convertFromUSD(remainingUSD, currentCurrency) / 100;
  
      if (cartTotalUSD >= window.currencyConfig.freeShippingThresholdUSD) {
        // We now meet the threshold
        window.shippingThresholdMet = true;
  
        // Only make changes if we weren't already showing success message
        if (!alreadyMetThreshold) {
          // Show success message, hide remaining message
          if (successContainer) {
            successContainer.style.display = 'block';
            successContainer.style.opacity = '1';
          }
          if (remainingContainer) {
            remainingContainer.style.display = 'none';
            remainingContainer.style.opacity = '0';
          }
        }
      } else {
        // We don't meet the threshold
        window.shippingThresholdMet = false;
  
        // Only make changes if we were previously showing success message
        if (alreadyMetThreshold || alreadyMetThreshold === undefined) {
          // Show remaining message, hide success message
          if (successContainer) {
            successContainer.style.display = 'none';
            successContainer.style.opacity = '0';
          }
          if (remainingContainer) {
            remainingContainer.style.display = 'block';
            remainingContainer.style.opacity = '1';
          }
        }
  
        // Always update the remaining amount text
        if (remainingAmount) {
          remainingAmount.innerHTML = window.formatCurrentCurrency(remainingCurrentCurrency);
        }
      }
    }
  
    // Helper function to format money according to Shopify's format
    function formatMoney(cents) {
      if (typeof Shopify !== 'undefined' && Shopify.formatMoney) {
        return Shopify.formatMoney(cents);
      }
  
      // 使用当前货币格式化
      const amount = cents / 100;
      return window.formatCurrentCurrency(amount);
    }
  
    // Update discount display if needed
    function updateDiscountDisplay(cartData) {
      const discountElements = document.querySelectorAll('.cart-drawer__discounts');
  
      // If there are cart-level discounts, make sure they're displayed
      if (cartData.cart_level_discount_applications && cartData.cart_level_discount_applications.length > 0) {
        // Update or create discount elements as needed
      }
    }
  
    // Function to add product to cart and open drawer
    function addToCartDrawer(variantId, quantity, button) {
      // Show loading state on button
      const originalText = button.innerHTML;
      const buttonWidth = button.offsetWidth;
  
      // Set a minimum width to prevent layout shift
      button.style.minWidth = buttonWidth + 'px';
  
      // Remove any existing borders or outlines
      button.style.border = 'none';
      button.style.boxShadow = 'none';
      button.style.outline = 'none';
  
      // Replace content with just the spinner for cleaner look
      button.innerHTML = '<span class="loading-spinner"></span>';
      button.disabled = true;
  
      // Check if we already have cart data to avoid unnecessary reloads
      const hasExistingCart = window.lastCartData && window.lastCartTime &&
        (Date.now() - window.lastCartTime < 5000); // 5 seconds cache
  
      // Add to cart via AJAX
      fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          items: [{
            id: variantId,
            quantity: quantity
          }]
        })
      })
        .then(response => response.json())
        .then(data => {
          // Get updated cart data
          return fetch('/cart.js').then(res => res.json());
        })
        .then(cartData => {
          // Store cart data for potential reuse
          window.lastCartData = cartData;
          window.lastCartTime = Date.now();
  
          // Get the drawer instance once to avoid multiple lookups
          const drawerInstance = getDrawerVueInstance();
  
          // Check if the drawer is already open
          const isDrawerOpen = drawerInstance && drawerInstance.isOpen;
  
          // Create a function to perform updates efficiently
          const performEfficientUpdates = (data) => {
            // Only update if drawer instance exists
            if (drawerInstance) {
              drawerInstance.cart = data;
  
              // Force Vue to update immediately
              if (typeof drawerInstance.$forceUpdate === 'function') {
                drawerInstance.$forceUpdate();
              }
  
              // Only update DOM elements if necessary
              // Use a single requestAnimationFrame for better performance
              requestAnimationFrame(() => {
                // Check if the threshold status would change
                const currentThresholdMet = window.shippingThresholdMet;
                const wouldThresholdBeMet = data.total_price >= freeShippingThreshold;
  
                // Only update shipping bar if threshold status changes
                if (currentThresholdMet !== wouldThresholdBeMet) {
                  updateShippingProgressBar(data);
                }
  
                // Always update price elements as they need to reflect the new total
                updateCartPriceElements(data);
              });
            }
          };
  
          if (drawerInstance) {
            // Method 1: Direct Vue update
            drawerInstance.cart = cartData;
            drawerInstance.type = 'cart';
  
            // Only open the drawer if it's not already open
            if (!isDrawerOpen) {
              drawerInstance.isOpen = true;
  
              // If we're opening the drawer for the first time, do a complete update
              performEfficientUpdates(cartData);
            } else {
              // If drawer is already open, just update the data efficiently
              performEfficientUpdates(cartData);
            }
          } else {
            // Fallback methods if drawer instance isn't available
            if (typeof theme !== 'undefined') {
              if (typeof theme.openCartDrawer === 'function') {
                theme.openCartDrawer();
              } else if (typeof theme.Drawers !== 'undefined' && theme.Drawers.drawerCart) {
                theme.Drawers.drawerCart.open();
              }
            } else {
              // Last resort: click the cart toggle
              const cartToggle = document.querySelector('[data-cart-toggle]') ||
                document.querySelector('[data-drawer-toggle="cart"]') ||
                document.querySelector('[aria-controls="CartDrawer"]');
              if (cartToggle) {
                cartToggle.click();
              }
            }
  
            // Update the cart data after a short delay to ensure drawer is open
            setTimeout(() => {
              const newDrawerInstance = getDrawerVueInstance();
              if (newDrawerInstance) {
                performEfficientUpdates(cartData);
              } else {
                // Direct DOM updates as fallback
                updateCartPriceElements(cartData);
                updateShippingProgressBar(cartData);
              }
            }, 300);
          }
  
          // Show success message briefly
          button.innerHTML = '<span class="add-to-cart-success">Added ✓</span>';
  
          // Reset button state after a delay
          setTimeout(() => {
            button.innerHTML = originalText;
            button.disabled = false;
            // Remove the fixed width and styling after animation completes
            setTimeout(() => {
              button.style.minWidth = '';
              button.style.border = '';
              button.style.boxShadow = '';
              button.style.outline = '';
            }, 300);
          }, 1000);
        })
        .catch(error => {
          console.error('Error adding item to cart:', error);
          button.innerHTML = originalText;
          button.disabled = false;
          button.style.minWidth = '';
          button.style.border = '';
          button.style.boxShadow = '';
          button.style.outline = '';
          alert('Error adding item to cart. Please try again.');
        });
  
      return false;
    }
  
    // Initialize when DOM is ready
    document.addEventListener('DOMContentLoaded', function () {
      // Try to get the Vue instance
      setTimeout(function () {
        const drawerInstance = getDrawerVueInstance();
  
        // Add the updateCartPriceDisplay method to the Vue instance
        if (drawerInstance) {
          drawerInstance.updateCartPriceDisplay = function (optimized = false) {
            // Skip redundant updates if optimized flag is set
            if (optimized && window.lastCartUpdateTime) {
              const now = Date.now();
              // If updated within the last 100ms, skip this update
              if (now - window.lastCartUpdateTime < 100) {
                return;
              }
            }
  
            // Record this update time
            window.lastCartUpdateTime = Date.now();
  
            // 获取最新的购物车数据
            fetch('/cart.js', {
              method: 'GET',
              headers: { 'Accept': 'application/json' },
              cache: 'no-store' // 避免缓存，确保获取最新数据
            })
              .then(res => res.json())
              .then(cartData => {
                // 存储购物车数据以便重用
                window.lastCartData = cartData;
                window.lastCartTime = Date.now();
  
                // 更新Vue数据
                this.cart = cartData;
  
                // 强制Vue立即更新
                this.$forceUpdate();
  
                // 使用单个requestAnimationFrame优化性能
                requestAnimationFrame(() => {
                  // 直接调用我们的修复函数
                  fixCartPriceDisplay();
  
                  // 同时也更新运费进度条
                  updateShippingProgressBar(cartData);
                });
              })
              .catch(err => console.error('Error updating cart price display:', err));
          };
        }
      }, 1000);
  
      // Listen for drawer open events to refresh the instance reference
      document.addEventListener('click', function (e) {
        if (e.target.matches('[data-cart-toggle], [data-drawer-toggle="cart"], [aria-controls="CartDrawer"]')) {
          setTimeout(function () {
            const drawerInstance = getDrawerVueInstance();
  
            // Add the updateCartPriceDisplay method if it doesn't exist
            if (drawerInstance && !drawerInstance.updateCartPriceDisplay) {
              drawerInstance.updateCartPriceDisplay = function () {
                // Remove excessive logging
                // console.log('Updating cart price display (drawer open)');
                fetch('/cart.js')
                  .then(res => res.json())
                  .then(cartData => {
                    // Remove excessive logging
                    // console.log('Got cart data:', cartData.total_price);
                    this.cart = cartData;
  
                    // Force Vue to update
                    this.$forceUpdate();
  
                    // Update DOM directly
                    setTimeout(() => {
                      updateCartPriceElements(cartData);
                      updateShippingProgressBar(cartData);
                    }, 100);
  
                    // Make a second update attempt
                    setTimeout(() => {
                      updateCartPriceElements(cartData);
                      updateShippingProgressBar(cartData);
                    }, 500);
                  })
                  .catch(err => console.error('Error updating cart price display:', err));
              };
            }
          }, 500);
        }
      });
  
      // Set up a MutationObserver to watch for changes in the cart drawer
      setTimeout(() => {
        const cartContainer = document.getElementById('CartContainer');
        if (cartContainer) {
          const observer = new MutationObserver((mutations) => {
            // When changes are detected in the cart, update prices
            fetch('/cart.js')
              .then(res => res.json())
              .then(cartData => {
                // Remove excessive logging
                // console.log('MutationObserver detected changes, updating prices with total:', cartData.total_price);
                requestAnimationFrame(() => {
                  updateCartPriceElements(cartData);
                  updateShippingProgressBar(cartData);
                });
              })
              .catch(err => console.error('Error in MutationObserver cart update:', err));
          });
  
          // Start observing the cart container for changes
          observer.observe(cartContainer, {
            childList: true,
            subtree: true,
            characterData: true,
            attributes: true
          });
          console.log('MutationObserver set up for cart container');
        }
      }, 2000);
  
      // Add a direct event listener for quantity changes
      document.addEventListener('click', function (e) {
        // Check if the clicked element is a quantity button
        if (e.target.closest('.ajaxcart__qty-adjust') || e.target.closest('.ajaxcart__remove')) {
          // Remove excessive logging
          // console.log('Quantity button clicked, will update prices');
  
          // Immediate update attempt for better responsiveness
          fetch('/cart.js')
            .then(res => res.json())
            .then(cartData => {
              requestAnimationFrame(() => {
                updateCartPriceElements(cartData);
                updateShippingProgressBar(cartData);
                ensureLastProductVisible(); // Ensure last product is visible
              });
            })
            .catch(err => { });
  
          // Wait for the cart to update
          setTimeout(() => {
            fetch('/cart.js')
              .then(res => res.json())
              .then(cartData => {
                // Remove excessive logging
                // console.log('Direct event: updating prices with total:', cartData.total_price);
                requestAnimationFrame(() => {
                  updateCartPriceElements(cartData);
                  updateShippingProgressBar(cartData);
                  ensureLastProductVisible(); // Ensure last product is visible
                });
              })
              .catch(err => console.error('Error in direct event cart update:', err));
          }, 200);
        }
      });
  
      // Listen for custom cart update events from Shopify
      document.addEventListener('cart:updated', function (event) {
        console.log('Detected cart:updated event');
        fetch('/cart.js')
          .then(res => res.json())
          .then(cartData => {
            console.log('Cart event: updating prices with total:', cartData.total_price);
            updateCartPriceElements(cartData);
            updateShippingProgressBar(cartData);
          })
          .catch(err => console.error('Error in cart event update:', err));
      });
  
      // Also listen for the deprecated cart.requestComplete event
      document.addEventListener('cart.requestComplete', function (event) {
        console.log('Detected cart.requestComplete event');
        if (event.detail && event.detail.cart) {
          updateCartPriceElements(event.detail.cart);
          updateShippingProgressBar(event.detail.cart);
        } else {
          fetch('/cart.js')
            .then(res => res.json())
            .then(cartData => {
              updateCartPriceElements(cartData);
              updateShippingProgressBar(cartData);
            })
            .catch(err => console.error('Error in cart event update:', err));
        }
      });
  
      // Add a polyfill for older browsers
      if (!Element.prototype.matches) {
        Element.prototype.matches =
          Element.prototype.matchesSelector ||
          Element.prototype.mozMatchesSelector ||
          Element.prototype.msMatchesSelector ||
          Element.prototype.oMatchesSelector ||
          Element.prototype.webkitMatchesSelector ||
          function (s) {
            var matches = (this.document || this.ownerDocument).querySelectorAll(s),
              i = matches.length;
            while (--i >= 0 && matches.item(i) !== this) { }
            return i > -1;
          };
      }
  
      if (!Element.prototype.closest) {
        Element.prototype.closest = function (s) {
          var el = this;
          do {
            if (Element.prototype.matches.call(el, s)) return el;
            el = el.parentElement || el.parentNode;
          } while (el !== null && el.nodeType === 1);
          return null;
        };
      }
  
      // Set up periodic price check to ensure consistency
      setInterval(() => {
        // Add throttling - only update if it's been at least 30 seconds since last update
        const now = Date.now();
        if (!window.lastCartUpdateTime || now - window.lastCartUpdateTime > 30000) {
          fetch('/cart.js')
            .then(res => res.json())
            .then(cartData => {
              updateCartPriceElements(cartData);
              updateShippingProgressBar(cartData);
              window.lastCartUpdateTime = now;
            })
            .catch(err => { });
        }
      }, 30000); // Changed from 5000 (5 seconds) to 30000 (30 seconds)
  
      // 添加调整布局的函数
      function adjustCartDrawerLayout() {
        const drawer = document.querySelector('.drawer--cart');
        if (!drawer) return;
  
        const header = drawer.querySelector('.drawer__header');
        const title = drawer.querySelector('.drawer__title');
        const footer = drawer.querySelector('.global-drawer__footer');
        const content = drawer.querySelector('.cart-drawer-main-content');
        const recommendationsContainer = drawer.querySelector('.cart-drawer-recommendations-sidebar');
  
        if (content) {
          // 确保底部元素完全可见
          if (footer) {
            footer.style.position = 'sticky';
            footer.style.bottom = '0';
            footer.style.width = '100%';
            footer.style.zIndex = '10';
            footer.style.backgroundColor = '#fff';
  
            // 确保底部元素不会被遮挡
            const checkoutBtn = footer.querySelector('.cart-drawer__checkout-btn');
            if (checkoutBtn) {
              const checkoutRect = checkoutBtn.getBoundingClientRect();
              if (checkoutRect.bottom > window.innerHeight) {
                const offset = checkoutRect.bottom - window.innerHeight + 20;
                footer.style.paddingBottom = offset + 'px';
              }
            }
          }
        }
      }
  
      // 在抽屉打开时调整布局
      document.addEventListener('click', function (e) {
        if (e.target.matches('[data-cart-toggle], [data-drawer-toggle="cart"], [aria-controls="CartDrawer"]')) {
          // 立即清除最后一个产品的边距
          const lastProduct = document.querySelector('.ajaxcart__product:last-child');
          if (lastProduct) {
            lastProduct.style.marginBottom = '0';
          }
  
          // 多次调用以确保正确计算高度
          setTimeout(adjustCartDrawerLayout, 100);
          setTimeout(adjustCartDrawerLayout, 300);
          setTimeout(adjustCartDrawerLayout, 500);
  
          // 额外调用以确保底部元素完全可见
          setTimeout(ensureFooterVisible, 600);
  
          // 确保最后一个产品完全可见
          setTimeout(ensureLastProductVisible, 300);
          setTimeout(ensureLastProductVisible, 700);
  
          // 额外的清除最后一个产品边距的尝试
          setTimeout(function () {
            const lastProduct = document.querySelector('.ajaxcart__product:last-child');
            if (lastProduct) {
              lastProduct.style.marginBottom = '0';
            }
          }, 800);
        }
      });
  
      // 确保底部元素完全可见的函数
      function ensureFooterVisible() {
        const drawer = document.querySelector('.drawer--cart');
        if (!drawer) return;
  
        const footer = drawer.querySelector('.global-drawer__footer');
        if (!footer) return;
  
        // 获取所有需要确保可见的元素
        const checkoutBtn = footer.querySelector('.cart-drawer__checkout-btn');
        const viewCartBtn = footer.querySelector('.cart-drawer__view-cart-btn');
        const subtotalElem = footer.querySelector('.cart-drawer__subtotal');
  
        if (checkoutBtn) {
          // 检查结账按钮是否完全可见
          const checkoutRect = checkoutBtn.getBoundingClientRect();
          if (checkoutRect.bottom > window.innerHeight) {
            // 如果结账按钮底部超出视口，添加额外的底部内边距
            const offset = checkoutRect.bottom - window.innerHeight + 20;
            footer.style.paddingBottom = offset + 'px';
  
            // 强制重新计算布局
            setTimeout(adjustCartDrawerLayout, 100);
          }
        }
  
        // 确保底部区域有足够的空间
        const footerRect = footer.getBoundingClientRect();
        const bottomSpace = window.innerHeight - footerRect.bottom;
        if (bottomSpace < 20) {
          footer.style.paddingBottom = (20 - bottomSpace) + 'px';
        }
  
        // 确保最后一个产品完全可见
        ensureLastProductVisible();
      }
  
      // 确保最后一个产品完全可见
      function ensureLastProductVisible() {
        const lastProduct = document.querySelector('.ajaxcart__product:last-child');
        if (!lastProduct) return;
  
        // 强制移除任何边距
        lastProduct.style.marginBottom = '0';
  
        // 移除所有子元素的边距
        const childElements = lastProduct.querySelectorAll('*');
        childElements.forEach(function (element) {
          element.style.marginBottom = '0';
        });
  
        // 确保内容容器没有过多的底部内边距
        const contentContainer = document.querySelector('.cart-drawer-main-content');
        if (contentContainer) {
          contentContainer.style.paddingBottom = '20px';
        }
      }
  
      // 添加滚动事件监听器，确保在滚动时最后一个产品可见
      document.addEventListener('DOMContentLoaded', function () {
        setTimeout(function () {
          const mainContent = document.querySelector('.cart-drawer-main-content');
          if (mainContent) {
            mainContent.addEventListener('scroll', function () {
              requestAnimationFrame(ensureLastProductVisible);
            });
          }
        }, 1000);
      });
  
      // 确保在窗口大小变化时重新计算
      window.addEventListener('resize', function () {
        setTimeout(ensureLastProductVisible, 100);
      });
  
      // 在购物车更新时确保最后一个产品可见
      document.addEventListener('cart:updated', function () {
        setTimeout(ensureLastProductVisible, 300);
        setTimeout(ensureLastProductVisible, 600);
      });
  
      // 添加MutationObserver监听购物车内容变化
      document.addEventListener('DOMContentLoaded', function () {
        setTimeout(function () {
          const cartContainer = document.querySelector('.cart-drawer-main-content');
          if (cartContainer) {
            // 创建一个观察器实例
            const observer = new MutationObserver(function (mutations) {
              // 当购物车内容变化时，立即修复最后一个产品的边距
              fixLastProductSpacing();
  
              // 同时修复价格显示
              fixCartPriceDisplay();
            });
  
            // 配置观察选项
            const config = {
              childList: true,
              subtree: true,
              attributes: true,
              attributeFilter: ['style', 'class']
            };
  
            // 开始观察目标节点
            observer.observe(cartContainer, config);
            console.log('MutationObserver set up for cart container to fix margins and prices');
          }
        }, 1000);
      });
  
      // 专门用于修复最后一个产品和底部之间的间距问题
      function fixLastProductSpacing() {
        // 获取最后一个产品
        const lastProduct = document.querySelector('.ajaxcart__product:last-child');
        if (!lastProduct) return;
  
        // 移除任何边距
        lastProduct.style.marginBottom = '0';
  
        // 获取底部区域
        const footer = document.querySelector('.global-drawer__footer');
        if (!footer) return;
  
        // 确保底部区域紧贴最后一个产品
        footer.style.marginTop = '0';
  
        // 确保内容区域没有过多的内边距
        const contentContainer = document.querySelector('.cart-drawer-main-content');
        if (contentContainer) {
          contentContainer.style.paddingBottom = '20px';
        }
  
        // 确保购物车内容区域没有过多的内边距
        const cartInner = document.querySelector('.ajaxcart__inner');
        if (cartInner) {
          cartInner.style.paddingBottom = '0';
        }
      }
  
      // 在购物车打开时修复间距
      document.addEventListener('click', function (e) {
        if (e.target.matches('[data-cart-toggle], [data-drawer-toggle="cart"], [aria-controls="CartDrawer"]')) {
          setTimeout(fixLastProductSpacing, 100);
          setTimeout(fixLastProductSpacing, 500);
          setTimeout(fixLastProductSpacing, 1000);
        }
      });
  
      // 在购物车更新时修复间距
      document.addEventListener('cart:updated', function () {
        setTimeout(fixLastProductSpacing, 300);
        setTimeout(fixLastProductSpacing, 600);
      });
  
      // 专门用于修复价格显示问题
      function fixCartPriceDisplay() {
        fetch('/cart.js')
          .then(res => res.json())
          .then(cartData => {
            // 直接更新价格元素
            const formattedPrice = formatMoney(cartData.total_price);
  
            // 更新购物车总价显示
            const subtotalElements = document.querySelectorAll('.cart-drawer__subtotal--price-value, .cart-drawer__subtotal--price .money, .cart-drawer__subtotal--price span:not(.visually-hidden):not(.cart-drawer__subtotal--compare)');
            if (subtotalElements.length > 0) {
              subtotalElements.forEach(el => {
                el.innerHTML = formattedPrice;
              });
            }
  
            // 计算比较价格
            let totalComparePrice = 0;
            if (cartData.items && cartData.items.length > 0) {
              cartData.items.forEach(item => {
                if (item.compare_at_price > 0) {
                  totalComparePrice += item.compare_at_price * item.quantity;
                } else {
                  totalComparePrice += item.original_price * item.quantity;
                }
              });
            }
  
            // 更新比较价格（如果有折扣）
            const compareElement = document.querySelector('.cart-drawer__subtotal--compare');
            if (compareElement) {
              if (totalComparePrice > cartData.total_price) {
                compareElement.innerHTML = formatMoney(totalComparePrice);
                compareElement.style.display = 'inline-block';
  
                // 添加折扣样式
                const priceElement = document.querySelector('.cart-drawer__subtotal--price-value');
                if (priceElement) {
                  priceElement.classList.add('cart-drawer__subtotal--sale');
                }
              } else {
                compareElement.style.display = 'none';
  
                // 移除折扣样式
                const priceElement = document.querySelector('.cart-drawer__subtotal--price-value');
                if (priceElement) {
                  priceElement.classList.remove('cart-drawer__subtotal--sale');
                }
              }
            }
  
            // 确保小计区域可见
            const subtotalContainer = document.querySelector('.cart-drawer__subtotal');
            if (subtotalContainer) {
              subtotalContainer.style.display = 'flex';
            }
  
            // 确保底部区域可见
            const footerElement = document.querySelector('.global-drawer__footer');
            if (footerElement) {
              footerElement.style.display = '';
            }
          })
          .catch(err => console.error('Error fixing cart price display:', err));
      }
  
      // 在购物车打开时修复价格显示
      document.addEventListener('click', function (e) {
        if (e.target.matches('[data-cart-toggle], [data-drawer-toggle="cart"], [aria-controls="CartDrawer"]')) {
          setTimeout(fixCartPriceDisplay, 100);
          setTimeout(fixCartPriceDisplay, 500);
          setTimeout(fixCartPriceDisplay, 1000);
        }
      });
  
      // 在购物车更新时修复价格显示
      document.addEventListener('cart:updated', function () {
        setTimeout(fixCartPriceDisplay, 300);
        setTimeout(fixCartPriceDisplay, 600);
      });
  
      // 在数量变化时修复价格显示
      document.addEventListener('click', function (e) {
        if (e.target.closest('.ajaxcart__qty-adjust') || e.target.closest('.ajaxcart__remove')) {
          setTimeout(fixCartPriceDisplay, 300);
          setTimeout(fixCartPriceDisplay, 600);
        }
      });
    });
  
    // 专门用于调整推荐产品区域的函数
    function adjustRecommendationsArea() {
      const isMobile = window.innerWidth <= 820;
      if (!isMobile) return;
  
      const drawer = document.querySelector('.drawer--cart');
      if (!drawer) return;
  
      const recommendationsArea = drawer.querySelector('.cart-drawer-flex-container-recommendations');
      if (!recommendationsArea) return;
  
      // 限制推荐产品区域的高度
      recommendationsArea.style.maxHeight = '200px'; // 限制最大高度
  
      // 确保推荐产品区域不会被底部结账按钮遮挡
      const footer = drawer.querySelector('.global-drawer__footer');
      if (footer) {
        const footerHeight = footer.offsetHeight || 150;
        recommendationsArea.style.marginBottom = (footerHeight + 20) + 'px';
      }
  
      // 确保推荐产品区域的标题更加紧凑
      const title = recommendationsArea.querySelector('.text-link-animated');
      if (title) {
        title.style.fontSize = '14px';
        title.style.margin = '0 0 10px 0';
        title.style.padding = '0 15px';
      }
  
      // 确保推荐产品卡片是左右布局
      const productCards = recommendationsArea.querySelectorAll('.product-card-basic.cart-drawer__product-card');
      productCards.forEach(card => {
        card.style.display = 'flex';
        card.style.flexDirection = 'row';
        card.style.alignItems = 'center';
        card.style.gap = '10px';
        card.style.padding = '8px';
        card.style.marginBottom = '8px';
        card.style.height = 'auto';
        card.style.minHeight = '80px';
  
        // 调整图片大小
        const image = card.querySelector('.product-card-basic__image');
        if (image) {
          image.style.width = '30%';
          image.style.maxWidth = '80px';
          image.style.flexShrink = '0';
        }
  
        // 调整文字区域
        const info = card.querySelector('.product-card-basic--info');
        if (info) {
          info.style.width = '70%';
          info.style.padding = '0';
        }
  
        // 调整按钮大小
        const button = card.querySelector('.add-to-cart-btn');
        if (button) {
          button.style.padding = '4px 8px';
          button.style.fontSize = '11px';
          button.style.minHeight = '0';
          button.style.lineHeight = '1';
        }
      });
    }
  
    // 在各种事件中调用adjustRecommendationsArea
    document.addEventListener('DOMContentLoaded', function () {
      // 初始化时调用
      setTimeout(adjustRecommendationsArea, 500);
  
      // 窗口大小变化时调用
      window.addEventListener('resize', adjustRecommendationsArea);
  
      // 购物车打开时调用
      document.addEventListener('click', function (e) {
        if (e.target.matches('[data-cart-toggle], [data-drawer-toggle="cart"], [aria-controls="CartDrawer"]')) {
          setTimeout(adjustRecommendationsArea, 300);
          setTimeout(adjustRecommendationsArea, 600);
          setTimeout(adjustRecommendationsArea, 1000);
        }
      });
  
      // 购物车更新时调用
      document.addEventListener('cart:updated', function () {
        setTimeout(adjustRecommendationsArea, 300);
        setTimeout(adjustRecommendationsArea, 600);
      });
    });
  
    // Function to ensure correct mobile layout
    function ensureMobileLayout() {
      const isMobile = window.innerWidth <= 820;
      const cartForm = document.querySelector('form.cart.ajaxcart.new-cust-cart-drawer-flex-container');
      const drawer = document.querySelector('.drawer--cart');
  
      if (cartForm && drawer) {
        if (isMobile) {
          cartForm.classList.add('mobile-layout');
  
          // 确保正确的顺序
          const cartContent = cartForm.querySelector('.cart-drawer-flex-container-cart-customer');
          const footer = cartForm.querySelector('.global-drawer__footer');
          const recommendations = cartForm.querySelector('.cart-drawer-flex-container-recommendations');
  
          if (cartContent && footer) {
            // 确保购物车内容在上方
            cartForm.appendChild(cartContent);
  
            // 确保推荐产品在底部，但在结账按钮之前
            if (recommendations) {
              cartForm.appendChild(recommendations);
            }
  
            // 确保结账按钮在最底部并固定
            footer.style.position = 'fixed';
            footer.style.bottom = '0';
            footer.style.left = '0';
            footer.style.right = '0';
            footer.style.width = '100%';
            footer.style.zIndex = '1000';
            footer.style.background = '#fff';
            footer.style.boxShadow = '0 -2px 10px rgba(0,0,0,0.1)';
  
            // 确保内容不被遮挡
            const footerHeight = footer.offsetHeight || 150;
            const contentContainer = cartForm.querySelector('.cart-drawer-main-content');
            if (contentContainer) {
              contentContainer.style.paddingBottom = (footerHeight + 20) + 'px';
            }
  
            if (recommendations) {
              recommendations.style.marginBottom = (footerHeight + 20) + 'px';
            }
  
            // 添加到抽屉的末尾，确保它在视觉上位于最底部
            drawer.appendChild(footer);
  
            // 设置一个定时器，确保在内容变化后重新调整布局
            setTimeout(adjustFooterPosition, 300);
  
            // 调整推荐产品区域
            setTimeout(adjustRecommendationsArea, 300);
          }
        } else {
          cartForm.classList.remove('mobile-layout');
  
          // 恢复正常布局
          const footer = drawer.querySelector('.global-drawer__footer');
          if (footer) {
            footer.style.position = '';
            footer.style.bottom = '';
            footer.style.left = '';
            footer.style.right = '';
            footer.style.width = '';
            footer.style.zIndex = '';
  
            // 将footer放回原位
            const cartContent = cartForm.querySelector('.cart-drawer-flex-container-cart-customer');
            if (cartContent) {
              cartForm.insertBefore(footer, cartContent.nextSibling);
            } else {
              cartForm.appendChild(footer);
            }
          }
        }
      }
    }
  
    // Add specific event handler for the checkout button
    document.addEventListener('DOMContentLoaded', function () {
      // Direct handler for checkout button
      document.addEventListener('click', function (event) {
        const checkoutBtn = event.target.closest('#CartDrawer-Checkout');
        if (checkoutBtn) {
          event.preventDefault();
          event.stopPropagation();
  
          console.log('Checkout button clicked');
  
          // Get the form
          const form = document.getElementById('CartDrawer-Form');
          if (form) {
            // Add a hidden checkout input if needed
            if (!form.querySelector('input[name="checkout"]')) {
              const input = document.createElement('input');
              input.type = 'hidden';
              input.name = 'checkout';
              input.value = '1';
              form.appendChild(input);
            }
  
            // Submit the form
            setTimeout(function () {
              form.submit();
            }, 10);
          } else {
            // Fallback to direct navigation
            window.location.href = '/checkout';
          }
  
          return false;
        }
      });
    });
  
    // Reliable checkout handler that tries multiple methods
    document.addEventListener('DOMContentLoaded', function () {
      function setupCheckoutHandlers() {
        // Get the checkout button
        const checkoutBtn = document.getElementById('CartDrawer-Checkout');
        if (checkoutBtn) {
          // Replace the existing onclick with a more reliable one
          checkoutBtn.onclick = function (e) {
            e.preventDefault();
            e.stopPropagation();
  
            // Try multiple checkout methods in sequence
  
            // Method 1: Use the Vue instance if available
            const drawerInstance = window.getDrawerVueInstance ? getDrawerVueInstance() : null;
            if (drawerInstance && typeof drawerInstance.submitCheckout === 'function') {
              try {
                drawerInstance.submitCheckout();
                return false;
              } catch (err) {
                console.error('Vue checkout method failed:', err);
              }
            }
  
            // Method 2: Direct form submission
            const form = document.getElementById('CartDrawer-Form');
            if (form) {
              try {
                // Make sure the form action is correct
                form.action = '/cart/checkout';
  
                // Add checkout parameter if needed
                if (!form.querySelector('input[name="checkout"]')) {
                  const input = document.createElement('input');
                  input.type = 'hidden';
                  input.name = 'checkout';
                  input.value = '1';
                  form.appendChild(input);
                }
  
                form.submit();
                return false;
              } catch (err) {
                console.error('Direct form submission failed:', err);
              }
            }
  
            // Method 3: Use fallback form
            const fallbackForm = document.getElementById('cart-drawer-fallback-form');
            if (fallbackForm) {
              try {
                // Update fallback form action
                fallbackForm.action = '/cart/checkout';
                fallbackForm.submit();
                return false;
              } catch (err) {
                console.error('Fallback form submission failed:', err);
              }
            }
  
            // Method 4: Direct URL navigation as last resort
            window.location.href = '/checkout';
            return false;
          };
        }
      }
  
      // Setup immediately and also with a delay to handle dynamic loading
      setupCheckoutHandlers();
      setTimeout(setupCheckoutHandlers, 1000);
      setTimeout(setupCheckoutHandlers, 2000);
  
      // Also setup when the cart drawer is opened
      document.addEventListener('click', function (e) {
        if (e.target.matches('[data-cart-toggle], [data-drawer-toggle="cart"], [aria-controls="CartDrawer"]')) {
          setTimeout(setupCheckoutHandlers, 500);
        }
      });
    });
  
    // 确保直接跳转到结账页面而不是购物车页面
    document.addEventListener('DOMContentLoaded', function () {
      // 直接的结账按钮点击处理
      document.addEventListener('click', function (e) {
        if (e.target.closest('#CartDrawer-Checkout')) {
          e.preventDefault();
          e.stopPropagation();
  
          console.log('Direct checkout button click detected');
  
          const form = document.getElementById('CartDrawer-Form');
          if (form) {
            // 确保表单有正确的目标地址
            form.action = '/cart/checkout';
  
            // 添加结账参数
            if (!form.querySelector('input[name="checkout"]')) {
              const input = document.createElement('input');
              input.type = 'hidden';
              input.name = 'checkout';
              input.value = '1';
              form.appendChild(input);
            }
  
            // 提交表单
            form.submit();
          } else {
            // 后备：直接导航到结账页面
            window.location.href = '/checkout';
          }
  
          return false;
        }
      }, true); // 使用捕获阶段以确保在其他处理程序之前执行
    });
  
    // 存储产品变体数据的全局变量
    window.productVariantsCache = window.productVariantsCache || {};
  
    // 处理变体选择的函数
    function updateRecommendationVariant(selectElement, productId) {
      try {
        const variantId = parseInt(selectElement.value);
        const card = selectElement.closest('.product-card-basic');
  
        if (!card) return;
  
        // 获取选中的选项元素以获取价格数据
        const selectedOption = selectElement.options[selectElement.selectedIndex];
        const variantPrice = selectedOption.getAttribute('data-price');
        const variantComparePrice = selectedOption.getAttribute('data-compare-price');
  
        // 更新添加到购物车按钮的变体ID
        const addToCartBtn = card.querySelector('.add-to-cart-btn');
        const hiddenInput = card.querySelector('input[name="id"]');
  
        if (addToCartBtn) {
          // 更新onclick属性
          addToCartBtn.setAttribute('onclick', `addToCartDrawer(${variantId}, 1, this)`);
        }
  
        if (hiddenInput) {
          // 更新隐藏输入字段的值
          hiddenInput.value = variantId;
        }
  
        // 直接使用选项中的价格数据更新显示
        updatePriceFromAttributes(card, variantPrice, variantComparePrice);
      } catch (err) {
        console.error('Error in updateRecommendationVariant:', err);
      }
    }
  
    // 使用属性数据更新价格显示的辅助函数
    function updatePriceFromAttributes(card, variantPrice, variantComparePrice) {
      try {
        // 更新价格显示
        const priceElement = card.querySelector('.product-card-basic__price .money');
        if (priceElement && variantPrice) {
          // 格式化价格
          if (typeof Shopify !== 'undefined' && Shopify.formatMoney) {
            priceElement.innerHTML = Shopify.formatMoney(variantPrice);
          } else {
            priceElement.innerHTML = formatMoney(variantPrice);
          }
        }
  
        // 更新比较价格（如果有）
        let comparePriceElement = card.querySelector('.product-card-basic__compare-price');
  
        if (variantComparePrice && parseInt(variantComparePrice) > parseInt(variantPrice)) {
          // 如果没有比较价格元素，创建一个
          if (!comparePriceElement) {
            const newComparePriceElement = document.createElement('s');
            newComparePriceElement.className = 'product-card-basic__compare-price';
            newComparePriceElement.style.marginRight = '5px';
            const moneySpan = document.createElement('span');
            moneySpan.className = 'money';
  
            if (typeof Shopify !== 'undefined' && Shopify.formatMoney) {
              moneySpan.innerHTML = Shopify.formatMoney(variantComparePrice);
            } else {
              moneySpan.innerHTML = formatMoney(variantComparePrice);
            }
  
            newComparePriceElement.appendChild(moneySpan);
  
            // 将比较价格元素插入到价格元素之前
            const priceContainer = card.querySelector('.product-card-basic__price');
            if (priceContainer) {
              priceContainer.insertBefore(newComparePriceElement, priceContainer.firstChild);
            }
          } else {
            // 更新现有比较价格元素
            const moneySpan = comparePriceElement.querySelector('.money');
            if (moneySpan) {
              if (typeof Shopify !== 'undefined' && Shopify.formatMoney) {
                moneySpan.innerHTML = Shopify.formatMoney(variantComparePrice);
              } else {
                moneySpan.innerHTML = formatMoney(variantComparePrice);
              }
            }
            comparePriceElement.style.display = 'inline-block';
          }
        } else if (comparePriceElement) {
          // 如果没有比较价格，隐藏比较价格元素
          comparePriceElement.style.display = 'none';
        }
      } catch (err) {
        console.error('Error in updatePriceFromAttributes:', err);
      }
    }
  
    // 更新价格显示的辅助函数
    function updatePriceDisplay(card, variantId, productData) {
      try {
        // 查找当前变体
        const variant = productData.variants.find(v => v.id === variantId);
        if (!variant) return;
  
        // 获取价格和比较价格
        const variantPrice = variant.price;
        const variantComparePrice = variant.compare_at_price;
  
        // 更新价格显示
        const priceElement = card.querySelector('.product-card-basic__price .money');
        if (priceElement) {
          // 移除任何加载指示器
          priceElement.innerHTML = priceElement.innerHTML.replace(/<span class="loading-spinner".*?<\/span>/g, '');
  
          // 格式化价格
          if (typeof Shopify !== 'undefined' && Shopify.formatMoney) {
            priceElement.innerHTML = Shopify.formatMoney(variantPrice);
          } else {
            priceElement.innerHTML = formatMoney(variantPrice);
          }
        }
  
        // 更新比较价格（如果有）
        let comparePriceElement = card.querySelector('.product-card-basic__compare-price');
  
        if (variantComparePrice && parseInt(variantComparePrice) > parseInt(variantPrice)) {
          // 如果没有比较价格元素，创建一个
          if (!comparePriceElement) {
            const newComparePriceElement = document.createElement('s');
            newComparePriceElement.className = 'product-card-basic__compare-price';
            newComparePriceElement.style.marginRight = '5px';
            const moneySpan = document.createElement('span');
            moneySpan.className = 'money';
  
            if (typeof Shopify !== 'undefined' && Shopify.formatMoney) {
              moneySpan.innerHTML = Shopify.formatMoney(variantComparePrice);
            } else {
              moneySpan.innerHTML = formatMoney(variantComparePrice);
            }
  
            newComparePriceElement.appendChild(moneySpan);
  
            // 将比较价格元素插入到价格元素之前
            const priceContainer = card.querySelector('.product-card-basic__price');
            if (priceContainer) {
              priceContainer.insertBefore(newComparePriceElement, priceContainer.firstChild);
            }
          } else {
            // 更新现有比较价格元素
            const moneySpan = comparePriceElement.querySelector('.money');
            if (moneySpan) {
              if (typeof Shopify !== 'undefined' && Shopify.formatMoney) {
                moneySpan.innerHTML = Shopify.formatMoney(variantComparePrice);
              } else {
                moneySpan.innerHTML = formatMoney(variantComparePrice);
              }
            }
            comparePriceElement.style.display = 'inline-block';
          }
        } else if (comparePriceElement) {
          // 如果没有比较价格，隐藏比较价格元素
          comparePriceElement.style.display = 'none';
        }
      } catch (err) {
        console.error('Error in updatePriceDisplay:', err);
      }
    }
  
    // 在页面加载时初始化变体选择器
    document.addEventListener('DOMContentLoaded', function () {
      // 初始化所有变体选择器
      const variantSelectors = document.querySelectorAll('.product-card-variant-selector');
      variantSelectors.forEach(selector => {
        // 触发一次变更事件以确保正确的初始状态
        const event = new Event('change');
        selector.dispatchEvent(event);
      });
    });
</script>
