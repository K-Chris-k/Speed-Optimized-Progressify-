<style>
  /* Cart Item Layout Styles */


.mobile-cart-drawer-none-container-recommendations{
  display: none;
}

.desktop-cart-drawer-none-container-recommendations{
 
}

.ajaxcart__row {
  padding: 15px 0;
  border-bottom: 1px solid #e8e8e8;
  position: relative;
  transition: opacity 0.3s ease, height 0.3s ease;
}
footer.global-drawer__footer {
    padding: 20px !important;
}
a.btn.btn--secondary.dynamic-section-button--drawer-outlined.cart-drawer__footer--button.cart-drawer__view-cart-btn {
    color: #fff;
}
span.cart-drawer__subtotal--price-value.cart-drawer__subtotal--sale {
    color: red;
}
/* 修复最后一个产品和底部之间的间距 */
.cart-drawer-main-content {
  padding-bottom: 20px !important;
}

/* Free Shipping Progress Bar */
.shipping-progress-container {
  width: 100%;
    /* padding: 15px; */
    margin-bottom: 5px;
    border-radius: 5px;
    display: flex;
    flex-direction: column-reverse;
    gap: 10px;
}
li.ajaxcart-item__discount.auto-discount--price-container-custom {
    background: red;
    color: #fff;
    display: inline-block;
    padding: 4px;
    font-size: 12px;
    margin: 0;
}
.grid--full.ajaxcart__quantity-wrapper.ajaxcart__quantity-wrapper-custom-new-by {
    padding: 0;
}
.shipping-progress-bar {
  width: 100%;
  height: 8px;
  background-color: #e0e0e0;
  border-radius: 10px;
  overflow: hidden;
  position: relative;
  box-shadow: inset 0 1px 2px rgba(0,0,0,0.1);
}

.shipping-progress-bar__fill {
  position: absolute;
  left: 0;
  top: 0;
  height: 100%;
  background: linear-gradient(90deg, #000000, #333333);
  border-radius: 10px;
  transition: width 0.5s ease-out;
  max-width: 100%;
  box-shadow: 0 1px 3px rgba(0,0,0,0.2);
}

.shipping-progress-text {

  font-size: 14px;
  text-align: center;
  transition: opacity 0.3s ease;
}

.shipping-progress-success {
  color: #2ecc71;
  font-weight: 600;
}

.shipping-progress-remaining {
  font-weight: 600;
  color: #333;
}

/* Responsive styles for shipping progress bar */
@media screen and (max-width: 767px) {
  .shipping-progress-container {
    padding: 8px 0;
  }
  
  .shipping-progress-bar {
    height: 6px;
  }
  
  .shipping-progress-text {
    font-size: 12px;
  }
}

/* 添加购物车和推荐产品的弹性布局 */
.cart-drawer-flex-container {
  display: flex;
  flex-direction: column;
  /* gap: 20px; */
  width: 100%;
  order: 1;
  height: 100%; /* 确保容器占满高度 */
  flex: 1; /* 添加flex属性以确保正确伸展 */
}

form.cart.ajaxcart.new-cust-cart-drawer-flex-container {
  display: flex;
  flex-wrap: nowrap;
  height: 100%; /* 确保表单占满高度 */
  overflow: hidden; /* 防止整体滚动 */
  flex-direction: column; /* Default to column direction */
}

/* Ensure proper order of elements in the cart drawer */
.cart-drawer-flex-container-cart-customer {
  order: 1; /* Cart content first */
}

.global-drawer__footer {
  order: 3; /* Footer second */
}

.cart-drawer-flex-container-recommendations {
  order: 2; /* Recommendations last */
}

.cart-drawer-main-content {
  flex: 1;
  min-width: 0;
  order: 1;
  overflow-y: auto; /* 添加滚动条 */
  max-height: none; /* 移除固定高度限制 */
  padding-bottom: 20px; /* 减小底部内边距 */
  -webkit-overflow-scrolling: touch; /* 提高移动端滚动体验 */
  scroll-behavior: smooth; /* 平滑滚动 */
  contain: paint;
}

/* 确保最后一个产品完全可见的额外样式 */
.cart-drawer-main-content::after {
  content: '';
  display: block;

  width: 100%;
}

/* 固定头部和底部样式 */
.drawer__title.h2.page--title {
  position: sticky;
  top: 0;
  background: #fff;
  z-index: 10;
  padding: 15px 0;
  margin: 0;
}

/* 确保底部区域紧贴最后一个产品 */
.global-drawer__footer {
  margin-top: auto !important; /* 使用auto将其推到底部 */
  border-top: 1px solid #e8e8e8;
  position: sticky;
  bottom: 0;
  background: #fff;
  z-index: 100;
  padding-top: 15px;
  padding-bottom: 15px;
  width: 100%;
  box-shadow: 0 -2px 10px rgba(0,0,0,0.05);
  flex-shrink: 0; /* 防止底部区域被压缩 */
}

/* 确保购物车内容区域和底部之间没有多余间距 */
.ajaxcart__inner > .cart-drawer-flex-container {
  margin-bottom: 0 !important;
  padding-bottom: 0 !important;
}

/* 确保结账按钮始终可见 */
.cart-drawer__checkout-btn {
  width: 100%;
  padding: 12px;
  margin-top: 5px;
  margin-bottom: 5px;
  font-weight: bold;
  position: relative;
  z-index: 101;
}

/* 确保查看购物车按钮可见 */
.cart-drawer__view-cart-btn {
  width: 100%;
  text-align: center;
  padding: 12px;
  margin-bottom: 5px;
  position: relative;
  z-index: 101;
}

/* 调整抽屉容器样式 */
.drawer.drawer--right.drawer--cart {
  display: flex;
  flex-direction: column;
  height: 100%;
  overflow: hidden; /* 防止整体滚动 */
  padding-bottom: env(safe-area-inset-bottom, 0); /* 适配iPhone底部安全区域 */
}

.drawer__header {
  position: sticky;
  top: 0;
  z-index: 11;
  background: #fff;
}


form.cart.ajaxcart.new-cust-cart-drawer-flex-container.cart-drawer-flex-container-main {
    order: 2;
}

.cart-drawer-flex-container-recommendations.desktop-cart-drawer-none-container-recommendations {
    order: 1;
}


#CartContainer {
  flex: 1;
  overflow: hidden;
  display: flex;
  flex-direction: row;
  height: calc(100% - 50px); /* 减去头部高度 */
  padding-bottom: 20px; /* 添加底部内边距 */
}

/* 推荐产品区域滚动 */
.cart-drawer-recommendations-sidebar {
  width: 320px;
  border-left: 1px solid #e8e8e8;
  padding-left: 15px;
  overflow-y: auto;
  max-height: 100vh;



  padding-bottom: 20px; /* 添加底部内边距 */
  -webkit-overflow-scrolling: touch; /* 提高移动端滚动体验 */
  scroll-behavior: smooth; /* 平滑滚动 */
}

/* 确保最后一个产品有足够空间 */
.ajaxcart__product:last-child {
  margin-bottom: 0 !important; /* 移除之前的大边距 */
}

.cart-drawer__recommendations-grid {
  display: flex;
  flex-direction: column;
  gap: 15px;
  padding-bottom: 20px; /* 确保底部产品完全可见 */
}

h5.text-link-animated {
  margin-bottom: 30px;
  font-size: 24px;
}

/* 优化推荐产品卡片样式 */
.product-card-basic.cart-drawer__product-card {
  display: flex;
  flex-direction: row;
  margin-bottom: 10px;
  flex-wrap: nowrap;
  align-items: center;
  gap: 10px;
}

.product-card-basic__image {
  width: 42%;
  max-width: 100%;
}

.product-card-basic__image img {
  width: 100%;
  height: 100%;
  max-height: 100%;
  object-fit: cover;
}

.product-card-basic--info {
  padding: 8px 0;
  width: 90%;
}

.product-card-basic__title {
  font-size: 12px;
  margin-bottom: 5px;
  line-height: 1.2;
}

.product-card-basic__price {
  font-size: 12px;
  margin-bottom: 5px;
}
.ajaxcart__row .grid.display-table {
    padding: 0;
}
.btn--underlined.btn--underlined-with-icon {
  font-size: 11px;

}

/* 响应式调整 */
@media screen and (max-width: 767px) {
  .cart-drawer-flex-container {
    flex-direction: column;
  }
  
  .cart-drawer-recommendations-sidebar {
    width: 100%;
    border-left: none;
    border-top: 1px solid #e8e8e8;
    padding-left: 0;
    padding-top: 15px;
    margin-top: 15px;
  }
  
  .cart-drawer__recommendations-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 10px;
  }
  
  .cart-drawer-main-content {
    max-height: calc(100vh - 200px); /* 移动端增加更多底部空间 */
    padding-bottom: 120px; /* 移动设备上增加更多底部内边距 */
  }
  
  .ajaxcart__product:last-child {
    margin-bottom: 0 !important; /* 移除之前的大边距 */
  }
}

.cart-drawer__discounts {
    display: flex;
    justify-content: flex-end;
    margin-bottom: 5px
}

.cart-drawer__subtotal {
    display: flex;
    justify-content: space-between;
    align-items: flex-end;
    gap: 10px;
    margin-bottom: 5px
}

.cart-drawer__subtotal--heading,.cart-drawer__subtotal--price {
    margin-bottom: 0
}

.cart-drawer__subtotal--price {
    text-align: right;
    word-break: break-word;
    display: flex;
    gap: 4px;
    align-items: center;
}

.cart-drawer__subtotal--compare {
    text-decoration: line-through;
    color: #000;
    font-size: 0.9em;
    margin-right: 8px;
    display: block;
    transition: color 0.2s ease;
}

.cart-drawer__subtotal--sale {
    color: var(--on-sale-color);
    font-weight: bold;
}

.cart-drawer__taxes-shipping {
    font-size: 12px;
    margin-bottom: 10px
}

/* Product price styles */
.ajaxcart-item__price-strikethrough {
    text-decoration: line-through;
    color: #999;
    margin-right: 5px;
    transition: color 0.2s ease;
}

.ajaxcart-item__price {
    font-weight: 500;
}

/* Make sure the price wrapper displays prices correctly */
.ajaxcart__price-wrapper {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    min-height: 24px;
    position: relative;
}

.ajaxcart__price-wrapper s {
    margin-right: 8px;
}

.discount--sale-color {
    color: #e4534c;
    font-weight: 500;
}

@media screen and (min-width: 768px) {
    .cart-drawer__taxes-shipping {
        margin-bottom:15px
    }
}

.cart-drawer__footer--buttons {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-top: 15px;
    width: 100%;
}

.ajaxcart__product {
  position: relative;
  transition: opacity 0.3s ease;
/* Space for remove button */
}

.ajaxcart__product-meta {
  display: block;
  padding-top: 0;
  font-size: 12px;
  color: #666;
  margin: 5px 0;
}

/* Product Image */
.ajaxcart__product-image {
  width: 80px;
  display: block;
}

.ajaxcart__product-image img {
  width: 100%;
  height: auto;
}

/* Price and Quantity Layout */
.ajaxcart__price-quantity {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-top: 10px;
}

.ajaxcart__price-wrapper {
  display: flex;
  align-items: center;
}

.ajaxcart-item__price {
  font-weight: 500;
  font-size: 1em;
  color: #333;
}

/* Quantity Controls */
.ajaxcart__qty {
  display: inline-flex;
  align-items: center;
  border: 1px solid #ddd;
  border-radius: 4px;
  height: 32px;
  background: #fff;
  position: relative;
  z-index: 1;
  overflow: hidden;
}

/* Remove divider lines between quantity buttons and input */
.ajaxcart__qty > * {
  border: none !important;
  box-shadow: none !important;
  outline: none !important;
}

.ajaxcart__qty-adjust {
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  border: none;
  background: none;
  padding: 0;
  cursor: pointer;
  color: #333;
  flex-shrink: 0;
}

.ajaxcart__qty-num {
  width: 40px;
  text-align: center;
  border: none;
  padding: 0;
  margin: 0;
  height: 100%;
  -moz-appearance: textfield;
  background: transparent;
  flex: 1;
}

.ajaxcart__qty-num::-webkit-outer-spin-button,
.ajaxcart__qty-num::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}
.ajaxcart__qty.new-quantity-input {
  border: 1px solid #eee;
  margin-bottom: 8px;
}
.grid__item.ajaxcart__quantity-wrapper-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
}
button.ajaxcart__remove {
  position: absolute;
  top: 10px;
  right: 5px;
  padding: 14px;
  display: flex;
  background: 0 0;
  border: 0;
}
/* Remove Button */
.ajaxcart__remove {
  position: absolute;
  top: 0;
  right: 0;
  padding: 8px;
  border: none;
  background: none;
  cursor: pointer;
  opacity: 0.5;
  transition: opacity 0.2s;
}

.ajaxcart__remove:hover {
  opacity: 1;
}

.ajaxcart__remove svg {
  width: 12px;
  height: 12px;
}

/* Cart Footer */
.ajaxcart__footer {
  margin-top: 20px;
  padding-top: 20px;
  border-top: 1px solid #e8e8e8;
}

/* Product Title */
.ajaxcart__product-name {
  color: #333;
  text-decoration: none;
  font-weight: 500;
}

/* Cart Subtotal */
.ajaxcart__subtotal {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-weight: 600;
  margin: 15px 0;
}

/* Checkout Button */
.cart__checkout {
  width: 100%;
  padding: 15px;
  background: #000;
  color: #fff;
  border: none;
  border-radius: 4px;
  font-weight: 500;
  cursor: pointer;
  margin-top: 15px;
}

.cart__checkout:hover {
  background: #333;
}

/* Discount Badge */
.cart-compare-price--with-value {
  background-color: #f8f8f8;
  padding: 2px 6px;
  border-radius: 3px;
  font-size: 0.9em;
  margin-left: 8px;
}

.discount--sale-color {
  color: #e4534c;
}

/* Unit Price */
.unit-price {
  font-size: 0.85em;
  color: #666;
  margin-top: 4px;
}

/* Loading spinner for add to cart button */
.loading-spinner {
  display: inline-block;
  width: 16px;
  height: 16px;
  border: 2px solid rgba(0, 0, 0, 0.1);
  border-top-color: currentColor;
  border-radius: 50%;
  animation: spin 0.8s linear infinite;
  vertical-align: middle;
  margin: 0 auto;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

.btn--underlined-with-icon.add-to-cart-btn {
  position: relative;
  min-width: 120px;
  text-align: center;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 5px;
  padding: 8px 12px;
  transition: all 0.3s ease;
}

.btn--underlined-with-icon.add-to-cart-btn .add-to-cart-text {
  display: inline-block;
  vertical-align: middle;
}

.btn--underlined-with-icon.add-to-cart-btn:disabled {
  opacity: 0.7;
  cursor: not-allowed;
}

/* Ensure the loading spinner is centered and visible */
.btn--underlined-with-icon.add-to-cart-btn .loading-spinner {
  margin: 0 auto;
  display: inline-block;
}

/* 确保购物车内容区域有足够的底部空间 */
.ajaxcart__inner {
  padding-bottom: 0 !important;
  min-height: 200px; /* 确保即使只有一个产品也有足够的空间 */
}

/* Multiple items display */
.ajaxcart__multiple-items {
    display: block;
    margin-top: 5px;
    font-size: 0.9em;
    color: #666;
    border-top: 1px solid #eee;
    padding-top: 5px;
    width: 100%;
    text-align: right;
    display: none;
}

.ajaxcart__multiple-items-count {
    font-weight: 500;
}

.ajaxcart__multiple-items-price {
    margin-left: 5px;
    font-weight: 600;
}

/* Prevent flickering during quantity changes */
.ajaxcart__price-wrapper {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    min-height: 24px;
    position: relative;
}

.ajaxcart__qty {
    display: inline-flex;
    align-items: center;
    border: 1px solid #ddd;
    border-radius: 4px;
    height: 32px;
    background: #fff;
    position: relative;
    z-index: 1;
}

/* Smooth transitions for price changes */
.ajaxcart-item__price,
.ajaxcart-item__price-strikethrough,
.cart-drawer__subtotal--price-value,
.cart-drawer__subtotal--compare {
    transition: color 0.2s ease;
}

/* Smooth transitions for shipping bar */
.shipping-progress-bar__fill {
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    background: linear-gradient(90deg, #000000, #333333);
    border-radius: 10px;
    transition: width 0.5s ease-out;
    max-width: 100%;
    box-shadow: 0 1px 3px rgba(0,0,0,0.2);
}

.shipping-progress-text {
    transition: opacity 0.3s ease;
}

/* Prevent layout shifts */
.cart-drawer-main-content {
    contain: paint;
}

.ajaxcart__product {
    position: relative;
    transition: opacity 0.3s ease;
}

.ajaxcart__row {
    transition: opacity 0.3s ease, height 0.3s ease;
}

/* Add to cart button styling */
.btn--underlined-with-icon.add-to-cart-btn {
  position: relative;
  min-width: 120px;
  text-align: center;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 5px;
  padding: 8px 12px;
  transition: all 0.3s ease;
}

.btn--underlined-with-icon.add-to-cart-btn .add-to-cart-text {
  display: inline-block;
  vertical-align: middle;
}

.btn--underlined-with-icon.add-to-cart-btn:disabled {
  opacity: 0.7;
  cursor: not-allowed;
}

/* Enhanced loading spinner */
.loading-spinner {
  display: inline-block;
  width: 16px;
  height: 16px;
  border: 2px solid rgba(0, 0, 0, 0.1);
  border-top-color: currentColor;
  border-radius: 50%;
  animation: spin 0.8s linear infinite;
  vertical-align: middle;
  margin: 0 auto;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

/* Ensure the loading spinner is centered and visible */
.btn--underlined-with-icon.add-to-cart-btn .loading-spinner {
  margin: 0 auto;
  display: inline-block;
}

.add-to-cart-success {
  color: #2ecc71;
  font-weight: 600;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

/* Fix for Add to Cart button in cart drawer */
.cart-drawer .btn--underlined.btn--underlined-with-icon,
.cart-drawer .btn--underlined-with-icon.add-to-cart-btn {
  border: none;
  box-shadow: none;
  background: transparent;
  position: relative;
  overflow: hidden;
}

/* Target the specific Add to Cart button in the cart drawer */
.cart-drawer-recommendations-sidebar .add-to-cart-btn {
  border: none !important;
  box-shadow: none !important;
  background: transparent !important;
  overflow: visible !important;
}

/* Remove any unwanted borders in quantity inputs */
.cart-drawer input.ajaxcart__qty-num {
  border: none;
  box-shadow: none;
  background: transparent;
  position: relative;
  z-index: 1;
}

/* Ensure clean button appearance */
.cart-drawer button {
  outline: none;
  appearance: none;
  -webkit-appearance: none;
}

/* 响应式调整 */
@media screen and (max-width: 820px) {
  /* Change layout direction for cart drawer on mobile */
  form.cart.ajaxcart.new-cust-cart-drawer-flex-container {
    flex-direction: column;
  }
  
  /* Make main cart content take full width */
  .cart-drawer-flex-container-cart-customer {
    width: 100%;
    order: 1; /* Ensure cart content comes first */
  }
  
  /* Style recommendations section for mobile */
  .cart-drawer-flex-container-recommendations {
    width: 100%;
    margin-top: 15px;
    border-top: 1px solid #e8e8e8;
    padding-top: 15px;
    order: 2; /* Place recommendations after the footer */
  }
  
  /* Ensure footer is between cart content and recommendations */
  .global-drawer__footer {
    order: 3;
    width: 100%;
  }
  
  /* Make recommendations sidebar full width */
  .cart-drawer-recommendations-sidebar {
    width: 100%;
    border-left: none;
    padding-left: 0;
    max-height: none;
    overflow-x: auto;
    overflow-y: hidden;
  }
  
  /* Make recommendations grid horizontal scrollable */
  .cart-drawer__recommendations-grid {
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    overflow-x: auto;
    padding: 10px 0 20px 0;
    -webkit-overflow-scrolling: touch;
    scroll-snap-type: x mandatory;
    gap: 12px;
    margin-left: 15px;
  }
  
  /* Style recommendation cards for horizontal scroll */
  .product-card-basic.cart-drawer__product-card {
    flex: 0 0 auto;
    width: 180px;
    flex-direction: column;
    scroll-snap-align: start;
  }
  
  /* Adjust product image for horizontal layout */
  .product-card-basic__image {
    width: 100%;
    max-width: 100%;
  }
  
  /* Ensure "Don't forget these" section is visible */
  .cart-drawer-recommendations-sidebar h5.text-link-animated {
    margin-bottom: 15px;
    font-size: 18px;
    padding-left: 15px;
  }
  
  /* Ensure main content has enough space */
  .cart-drawer-main-content {
    max-height: calc(100vh - 320px);
    padding-bottom: 20px;
  }
  
  /* Adjust footer padding */
  footer.global-drawer__footer {
    padding: 15px !important;
  }
  
  /* Add padding to product info in horizontal scroll */
  .product-card-basic--info {
    padding: 8px;
    width: 100%;
  }
  
  /* Add visual indicator for horizontal scroll */
  .cart-drawer-recommendations-sidebar::after {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    width: 30px;
    height: 100%;
    background: linear-gradient(to right, rgba(255,255,255,0), rgba(255,255,255,0.8));
    pointer-events: none;
  }
}

/* Additional styles for very small screens */
@media screen and (max-width: 480px) {
  .product-card-basic.cart-drawer__product-card {
    width: 150px;
  }
}

/* Styles for "Don't forget these..." section */
.cart-drawer-recommendations-sidebar .global-drawer--secondary__header {
  padding: 0 15px;
  margin-bottom: 15px;
}

.cart-drawer-recommendations-sidebar h5.text-link-animated {
  font-size: 18px;
  margin-bottom: 15px;
  font-weight: 600;
}

/* Mobile-specific styles for recommendations */
@media screen and (max-width: 820px) {
  /* Make recommendations more prominent on mobile */
  .cart-drawer-recommendations-sidebar {
    position: relative;
    background: #f9f9f9;
    padding: 15px 0;
    border-radius: 8px;
    margin: 0 15px 15px;
    width: calc(100% - 30px);
  }
  
  /* Add horizontal scroll indicator */
  .cart-drawer__recommendations-grid {
    position: relative;
    padding-bottom: 25px;
    padding-right: 15px; /* Add padding to the right side */
  }
  
  /* Style the scroll indicator dots */

  
  /* Add title for "Don't forget these" section */
  .cart-drawer-recommendations-sidebar .global-drawer--secondary__header {
    padding: 0 15px 10px;
    border-bottom: 1px solid #eee;
    margin-bottom: 15px;
  }
  
  /* Make recommendation cards more attractive */
  .product-card-basic.cart-drawer__product-card {
    background: white;
    border-radius: 6px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    padding: 8px;
    height: 100%;
    margin-bottom: 0;
  }
  
  /* Improve image display */
  .product-card-basic__image {
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 8px;
  }
  
  /* Improve product title display */
  .product-card-basic__title {
    font-size: 13px;
    line-height: 1.3;
    margin-bottom: 5px;
    font-weight: 500;
    height: 34px;
    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
  }
  
  /* Style the Add to Cart button for mobile */
  .cart-drawer-recommendations-sidebar .btn--underlined-with-icon.add-to-cart-btn {
    width: 100%;
    justify-content: center;
    padding: 6px 10px;
    margin-top: 5px;
    background: #f5f5f5;
    border-radius: 4px;
  }
  
  /* Ensure the "Don't forget these" title is prominent */
  .cart-drawer-recommendations-sidebar h5.text-link-animated {
    font-size: 16px;
    margin-bottom: 10px;
    font-weight: 600;
    color: #333;
  }
}

/* 优化推荐产品卡片样式 - 使用左右布局节省空间 */
.product-card-basic.cart-drawer__product-card {
  display: flex;
  flex-direction: row;
  margin-bottom: 10px;
  flex-wrap: nowrap;
  align-items: center;
  gap: 10px;
  padding: 8px;
  background: white;
  border-radius: 6px;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.product-card-basic__image {
  width: 30%;
  max-width: 80px;
  flex-shrink: 0;
}

.product-card-basic__image img {
  width: 100%;
  height: auto;
  max-height: 80px;
  object-fit: cover;
  border-radius: 4px;
}

.product-card-basic--info {
  padding: 0;
  width: 70%;
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.product-card-basic__title {
  font-size: 12px;
  margin-bottom: 5px;
  line-height: 1.2;
  max-height: 2.4em;
  overflow: hidden;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
}

.product-card-basic__price {
  font-size: 12px;
  margin-bottom: 5px;
  font-weight: 600;
}

/* 移动端特殊处理推荐产品区域 */
@media screen and (max-width: 820px) {
  /* 调整推荐产品标题 */
  .cart-drawer-recommendations-sidebar h5.text-link-animated {
    font-size: 14px;
    margin: 0 0 10px 0;
    padding-left: 15px;
    font-weight: 600;
  }
  
  /* 调整推荐产品区域 */
  .cart-drawer-recommendations-sidebar {
    padding: 10px 0;
    margin: 0 10px 15px;
    width: calc(100% - 20px);
  }
  .mobile-cart-drawer-none-container-recommendations{
  display: block;
}

.desktop-cart-drawer-none-container-recommendations{
 display: none;
}
  /* 调整推荐产品网格 */
  .cart-drawer__recommendations-grid {
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    overflow-x: auto;
    padding: 5px 0 15px 0;
    gap: 8px;
    margin-left: 10px;
  }
  
  /* 调整推荐产品卡片 */
  .product-card-basic.cart-drawer__product-card {
    flex: 0 0 auto;
    width: 220px;
    flex-direction: row;
    margin-bottom: 0;
    height: auto;
    min-height: 80px;
  }
  
  /* 调整添加到购物车按钮 */
  .cart-drawer-recommendations-sidebar .btn--underlined-with-icon.add-to-cart-btn {
    padding: 4px 8px;
    margin-top: 3px;
    font-size: 11px;
    min-height: 0;
    line-height: 1;
  }
  
  /* 减小推荐产品区域的整体高度 */
  .cart-drawer-flex-container-recommendations {
    margin-bottom: 0px;
    padding-top: 10px;
    margin-top: 10px;
  }
}
</style>

<!-- 修复View options按钮行为 -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // 修复"View options"按钮行为，确保它直接导航到产品页面
    document.addEventListener('click', function(e) {
      // 检查是否点击的是"View options"按钮
      if (e.target.classList.contains('quick-add-button-variants') || 
          (e.target.tagName === 'A' && e.target.textContent && 
           e.target.textContent.trim().indexOf('View options') >= 0)) {
        
        // 阻止事件冒泡，防止触发购物车抽屉
        e.stopPropagation();
        e.stopImmediatePropagation();
        
        // 获取产品URL并直接导航
        const productUrl = e.target.href;
        if (productUrl) {
          window.location.href = productUrl;
          return false;
        }
      }
    }, true); // 使用捕获阶段确保在其他事件处理程序之前执行
    
    // 修复theme.min.js中的handleShopNow函数
    setTimeout(function() {
      if (window.wetheme) {
        // 保存原始函数引用
        const sections = Object.values(window.wetheme.sectionById || {});
        
        sections.forEach(function(section) {
          if (section && typeof section.handleShopNow === 'function') {
            // 保存原始函数
            const originalHandleShopNow = section.handleShopNow;
            
            // 覆盖handleShopNow函数
            section.handleShopNow = function(e) {
              // 如果是"View options"按钮，不调用原始函数
              if (e.target.classList.contains('quick-add-button-variants') || 
                  (e.target.textContent && e.target.textContent.trim().indexOf('View options') >= 0)) {
                // 不阻止默认行为，允许正常导航
                return true;
              }
              
              // 对于其他按钮，调用原始函数
              return originalHandleShopNow.call(this, e);
            };
          }
        });
        
        console.log('View options button behavior fixed');
      }
    }, 1000);
  });
</script>

<div class="right-drawer-vue">
  {% comment %} There's no route available for the predictive search api URL yet {% endcomment %}
  <wetheme-right-drawer
    search-url="/search/suggest.json"
    login-url="{{ routes.account_login_url }}"
    is-predictive="{{ settings.predictive_search_enabled }}"
    search-products="{{ settings.predictive_search_products }}"
    search-pages="{{ settings.predictive_search_pages }}"
    search-articles="{{ settings.predictive_search_articles }}"
    search-collections="{{ settings.predictive_search_collections }}"
    language-url="{{ localization.language.root_url }}"
  >
  </wetheme-right-drawer>
</div>
<script type="text/x-template" id="wetheme-right-drawer-template">
  <div>
    <transition name="drawer-right">
      <div class="drawer drawer--right drawer--cart" v-if="isOpen" ref="drawerRight">
        <div class="drawer__header sitewide--title-wrapper">
          <div class="drawer__close js-drawer-close">
            <button type="button" class="icon-fallback-text" ref="drawerClose" v-on:click="close">
              <span class="fallback-text">{{ 'cart.general.close_cart' | t }}</span>
            </button>
          </div>
          <input ref="drawerFocus" tabindex="-1" aria-hidden="true" class="sr-only" />
        </div>

        <div id="CartContainer" v-if="type === 'cart'">
          <form action="{{ routes.cart_url }}" method="post" novalidate class="cart ajaxcart new-cust-cart-drawer-flex-container cart-drawer-flex-container-main" v-if="cart">
           
            <!-- Cart content section -->
            <div class="cart-drawer-flex-container cart-drawer-flex-container-cart-customer">
              <div class="ajaxcart__inner" v-if="cart.item_count > 0">
              
              <div class="cart-drawer-flex-container">
                <div class="drawer__title h2 page--title">
                  <span v-if="type === 'cart'"">{{ 'cart.general.title' | t }}</span>
                  <span class="sr-only" v-if="type === 'shop-now'">{{ 'products.product.quick_shop' | t }}</span>
                  <span v-if="type === 'login'">{{ 'customer.login.title' | t }}</span>
                  <span v-if="type === 'search'">{{ 'general.search.title' | t }}</span>
                </div> 
                
                <!-- Free Shipping Progress Bar -->
                <div class="shipping-progress-container" v-if="cart.item_count > 0">
                  <div class="shipping-progress-bar">
                    <div class="shipping-progress-bar__fill" :style="{ width: getShippingProgressPercentage() + '%' }"></div>
                  </div>
                  <div class="shipping-progress-text shipping-progress-success-container" v-if="cart.total_price >= freeShippingThreshold">
                    <span class="shipping-progress-success">Congrats! You are eligible for FREE Shipping</span>
                  </div>
                  <div class="shipping-progress-text" v-else>
                    Buy <span class="shipping-progress-remaining" v-money="freeShippingThreshold - cart.total_price"></span> more to enjoy FREE Shipping
                  </div>
                </div>
                
                <div class="cart-drawer-main-content">
                  <span v-if="cart.total_discount > 0" class="hide auto-discount--active"></span>
                  <div class="ajaxcart__product" v-for="(item, index) in cart.items" :key="index + item.id">
                    <div class="ajaxcart__row" v-bind:data-line="index + 1"
                      v-bind:class="{ 'is-loading': index + 1 === lineQuantityUpdating }"
                    >
                      <div class="grid display-table">
                        <div class="grid__item small--one-whole medium--one-quarter large--one-quarter medium--display-table-cell">
                          <a v-bind:href="item.url" class="ajaxcart__product-image">
                            <img
                              src="#"
                              alt=""
                              v-responsive="item.image"
                              v-bind:alt="item.featured_image_alt"
                              v-if="item.image"
                            />
                            <img v-if="!item.image" src="//cdn.shopify.com/s/assets/admin/no-image-medium-cc9732cb976dd349a0df1d39816fbcc7.gif" alt="" v-bind:alt="item.product_title" loading="lazy" />
                          </a>
                        </div>
                        <div class="grid__item small--one-whole medium--two-quarters large--two-quarters medium--display-table-cell">
                          <p>
                            <a v-bind:href="item.url" class="ajaxcart__product-name" v-text="item.product_title"></a>
                            <span class="ajaxcart__product-meta" v-if="item.variant_title != 'Default Title'" v-text="item.variant_title"></span>
                            <span class="ajaxcart__product-meta" v-if="item.selling_plan_allocation" v-text="item.selling_plan_allocation.selling_plan.name"></span>
                            <span class="ajaxcart__product-meta" v-for="(item, key, index) in item.properties " :key="index">
                              <span v-html="key"></span>: <span v-html="item"></span>
                            </span>
                            {% if settings.cart_vendor_enable %}
                              <span class="ajaxcart__product-meta" v-text="item.vendor"></span>
                            {% endif %}
                          </p>
                          <ul class="ajaxcart-item__discounts" aria-label="{{ 'customer.order.discount' | t }}">
                            <li class="ajaxcart-item__discount auto-discount--price-container-custom" v-if="item.line_level_discount_allocations.amount > 0">
                              <span class="hide auto-discount--price" v-text="item.line_level_discount_allocations.amount"></span>
                              <span class="ajaxcart-item__discount_title" v-text="item.line_level_discount_allocations.title"></span>
                              <span class="ajaxcart-item__discount_money">- <span v-money="item.line_level_discount_allocations.amount">
                              </span>
                              </span>
                            </li>
                          </ul>
                          <div class="ajaxcart__price-quantity">
                            
                            
                            <div class="grid--full ajaxcart__quantity-wrapper ajaxcart__quantity-wrapper-custom-new-by">
                              <div class="grid__item ajaxcart__quantity-wrapper-item">
                                <div class="ajaxcart__qty new-quantity-input">
                                  <button
                                    type="button"
                                    class="ajaxcart__qty-adjust ajaxcart__qty--minus"
                                    v-on:click="setQuantity(index + 1, item.quantity - 1, true); setSubtotal(); updateCartPriceDisplay(true);"
                                    v-if="!isGiftwrapProduct(item)"
                                  >
                                    <svg width="12" height="2" viewBox="0 0 12 2" fill="none" xmlns="http://www.w3.org/2000/svg">
                                      <path d="M0 1h12" stroke="currentColor" stroke-width="1.5"/>
                                    </svg>
                                  </button>
                                  <input
                                    type="number"
                                    name="updates[]"
                                    class="ajaxcart__qty-num"
                                    v-bind:value="item.quantity"
                                    min="0"
                                    aria-label="quantity"
                                    pattern="[0-9]*"
                                    v-on:change="setQuantity(index + 1, parseInt($event.target.value, 10), true); setSubtotal(); updateCartPriceDisplay(true);"
                                    :disabled="isGiftwrapProduct(item)"
                                  />
                                  <button
                                    type="button"
                                    class="ajaxcart__qty-adjust ajaxcart__qty--plus"
                                    v-on:click="setQuantity(index + 1, item.quantity + 1, true); setSubtotal(); updateCartPriceDisplay(true);"
                                    v-if="!isGiftwrapProduct(item)"
                                  >
                                    <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                                      <path d="M6 0v12M0 6h12" stroke="currentColor" stroke-width="1.5"/>
                                    </svg>
                                  </button>
                                </div>
                                <div class="ajaxcart__price-wrapper">
                                  <s v-if="item.compare_at_price > 0 && item.original_price < item.compare_at_price">
                                    <span class="ajaxcart-item__price-strikethrough" v-money="item.compare_at_price"></span>
                                  </s>
                                  
                                  <span class="ajaxcart-item__price" v-money="item.original_price"></span>
                                  <span class="cart-compare-price--with-value" v-if="item.compare_at_price > 0 && item.original_price < item.compare_at_price">
                                    {%- case settings.show_discount -%}
                                      {%- when 'percentage' -%}
                                        <span class="discount--sale-color">-<span v-text="Math.round((item.compare_at_price - item.original_price) / item.compare_at_price * 100)"></span>%</span>
                                      {%- when 'value' -%}
                                        <span class="discount--sale-color">-<span v-money="item.compare_at_price - item.original_price"></span></span>
                                      {%- when 'hide' -%}
                                    {%- endcase -%}
                                  </span>
                                  
                                  <!-- Show multiple items count and total price when quantity > 1 -->
                                  <span class="ajaxcart__multiple-items" v-if="item.quantity > 1">
                                    <span class="ajaxcart__multiple-items-count">{{ item.quantity }} - </span>
                                    <span class="ajaxcart__multiple-items-price" v-money="item.original_price * item.quantity"></span>
                                  </span>
                                </div>

                              </div>
                            </div>
                          </div>
                          
                          <div class="unit-price" v-if="item.unit_price_measurement_price">
                            (<span class="unit-price__price" v-money="item.unit_price_measurement_price"></span>
                            <span> / </span>
                            <span class="unit-price__ref-value" v-text="item.unit_price_measurement_value"></span>
                            <span class="unit-price__ref-unit" v-text="item.unit_price_measurement_unit"></span>)
                          </div>

                          {% comment %} <ul class="ajaxcart-item__discounts" aria-label="{{ 'customer.order.discount' | t }}">
                            <li class="ajaxcart-item__discount" v-if="item.line_level_discount_allocations.amount > 0">
                              <span class="hide auto-discount--price" v-text="item.line_level_discount_allocations.amount"></span>
                              <span class="ajaxcart-item__discount_title" v-text="item.line_level_discount_allocations.title"></span>
                              <span class="ajaxcart-item__discount_money">- <span v-money="item.line_level_discount_allocations.amount">
                              </span>
                              </span>
                            </li>
                          </ul> {% endcomment %}

                          <button
                            type="button"
                            class="ajaxcart__remove"
                            v-on:click="removeItem(index + 1, item.id)"
                            v-if="!isGiftwrapProduct(item)"
                          >
                            <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                              <path d="M1 1l10 10m0-10L1 11" stroke="currentColor" stroke-width="1.5"/>
                            </svg>
                          </button>

                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
             
            <!-- Footer section (always after cart content) -->
            <footer class="global-drawer__footer " v-if="cart && cart.item_count > 0">
                  {% if settings.cart_notes_enable or settings.giftwrap_gift_note %}
                    <div class="cart-drawer__notes">
        
                      {% # Cart notes %}
                      {% if settings.cart_notes_enable %}
                        {% assign cart_note_label = 'cart.general.note' | t %}
                        {% if cart.note != blank %}
                          {% assign cart_note_label = 'cart.general.note' | t %}
                        {% endif %}
                        <cart-update-modal
                          data-add-label="{{ 'cart.general.note' | t }}"
                          data-edit-label="{{ 'cart.general.note' | t }}"
                        >
                          <button data-cart-update-open class="cart-drawer__note--open inline-icon--wrapper icon--left">
                            {% render 'theme-icon' with icon: 'note', iconSize: 16 %}
                            <span data-cart-update-open-text>{{ cart_note_label }}</span>
                          </button>
                          <span data-cart-update-close class="cart-drawer__note--modal-overlay"></span>
                          <div
                            data-cart-update-modal
                            aria-modal="true"
                            role="dialog"
                            aria-hidden="true"
                            class="cart-drawer__note--modal"
                          >
                            <cart-update>
                              <label for="CartNote" class="cart-drawer__note--label" data-cart-update-label>{{ cart_note_label }}</label>
                              <textarea name="note" id="CartNote" class="cart-drawer__note--textarea block-radius">{{ cart.note }}</textarea>
                            </cart-update>
                            <button
                              data-cart-update-close
                              aria-label="{{ 'cart.general.update' | t }}"
                              class="btn dynamic-section-button--drawer-filled cart-drawer__note--close-btn"
                            >{{ 'cart.general.update' | t }}</button>
                          </div>
                        </cart-update-modal>
                      {% endif %}
        
                      {% # Gift note %}
                      {% if settings.giftwrap_gift_note %}
                        {% assign gift_note_label = 'products.general.giftwrap_note' | t %}
                        {% if cart.attributes.gift_note %}
                          {% assign gift_note_label = 'products.general.giftwrap_note' | t %}
                        {% endif %}
                        <cart-update-modal
                          data-add-label="{{ 'products.general.giftwrap_note' | t }}"
                          data-edit-label="{{ 'products.general.giftwrap_note' | t }}"
                        >
                          <button data-cart-update-open class="cart-drawer__note--open inline-icon--wrapper icon--left">
                            {% render 'theme-icon' with icon: 'gift', iconSize: 16 %}
                            <span data-cart-update-open-text>{{ gift_note_label }}</span>
                          </button>
                          <span data-cart-update-close class="cart-drawer__note--modal-overlay"></span>
                          <div
                            data-cart-update-modal
                            aria-modal="true"
                            role="dialog"
                            aria-hidden="true"
                            class="cart-drawer__note--modal"
                          >
                            <cart-update>
                              <label for="CartGiftNote" class="cart-drawer__note--label" data-cart-update-label>{{ gift_note_label }}</label>
                              <textarea id="CartGiftNote" name="attributes[gift_note]" class="cart-drawer__note--textarea block-radius">{{ cart.attributes.gift_note }}</textarea>
                            </cart-update>
                            <button
                              data-cart-update-close
                              aria-label="{{ 'cart.general.update' | t }}"
                              class="btn dynamic-section-button--drawer-filled cart-drawer__note--close-btn"
                            >{{ 'cart.general.update' | t }}</button>
                          </div>
                        </cart-update-modal>
                      {% endif %}
                    </div>
                  {% endif %}
        
                  <div class="cart-drawer__sub-footer">
        
                    {% # Automatic discounts - cart level %}
                    {% for discount_application in cart.cart_level_discount_applications %}
                      <div class="cart-drawer__discounts">
                        <div class="cart-drawer__product_card--badge cart-drawer__product_card--badge--sale">
                          <span>{{ discount_application.title }} (-{{ discount_application.total_allocated_amount | money }})</span>
                        </div>
                      </div>
                    {% endfor %}
        
                    {% # Subtotal %}
                    <div class="cart-drawer__subtotal">
                      <h5 class="cart-drawer__subtotal--heading">{{ 'cart.general.subtotal' | t }}</h5>
                      <div class="cart-drawer__subtotal--price h3">
                        <span class="visually-hidden">{{ 'cart.general.subtotal' | t }}</span>
                        <span class="cart-drawer__subtotal--compare" v-if="getCartComparePrice() > cart.total_price">
                          <span v-money="getCartComparePrice()"></span>
                        </span>
                        <span class="visually-hidden">{{ 'cart.general.subtotal' | t }}</span>
                        <span class="cart-drawer__subtotal--price-value" :class="{'cart-drawer__subtotal--sale': getCartComparePrice() > cart.total_price}">
                          <span v-money="cart.total_price"></span>
                        </span>
                      </div>
                    </div>
        
                    {% # Tax and shipping %}
                    <div class="cart-drawer__taxes-shipping text-link-animated">
                      {%- capture taxes_shipping_checkout -%}
                        {%- if cart.taxes_included and shop.shipping_policy.body != blank -%}
                          {{ 'cart.general.taxes_included_and_shipping_policy_html' | t: link: shop.shipping_policy.url }}
                        {%- elsif cart.taxes_included -%}
                          {{ 'cart.general.taxes_included_but_shipping_at_checkout' | t }}
                        {%- elsif shop.shipping_policy.body != blank -%}
                          {{ 'cart.general.taxes_and_shipping_policy_at_checkout_html' | t: link: shop.shipping_policy.url }}
                        {%- else -%}
                          {{ 'cart.general.taxes_and_shipping_at_checkout' | t }}
                        {%- endif -%}
                      {%- endcapture -%}
                      <p>{{ taxes_shipping_checkout }}</p>
                    </div>
        
                    {% # Buttons %}
                    <div class="cart-drawer__footer--buttons">
                      <a href="{{ routes.cart_url }}" class="btn btn--secondary dynamic-section-button--drawer-outlined cart-drawer__footer--button cart-drawer__view-cart-btn">
                        {{ 'cart.general.view_cart' | t | default: 'View cart' }}
                      </a>
                      
                      <button
                        type="submit"
                        class="btn dynamic-section-button--drawer-filled cart-drawer__footer--button cart-drawer__checkout-btn"
                        name="checkout"
                        id="CartDrawer-Checkout"
                        form="CartDrawer-Form"
                      >{{ 'cart.general.checkout' | t }}</button>
                    </div>
                  </div>
                </footer>

            <!-- Recommendations section (after cart content) -->
            <div class="cart-drawer-flex-container-recommendations mobile-cart-drawer-none-container-recommendations">
            {% if settings.show_cart_recommendations %}
              {%- liquid
                assign show_recommendations = true
                if cart.item_count == 0 and settings.empty_cart_products == blank
                  assign show_recommendations = false
                endif
                
                # 找出购物车中价格最高的商品ID用于推荐
                assign max_price = 0
                assign max_price_product_id = ""
                for item in cart.items
                  if item.product.price > max_price
                    assign max_price = item.product.price
                    assign max_price_product_id = item.product.id
                  endif
                endfor
                if max_price_product_id == "" and settings.empty_cart_products != blank and settings.empty_cart_products.products.first != blank
                  assign max_price_product_id = settings.empty_cart_products.products.first.id
                endif
              -%}
              {% if show_recommendations and cart.item_count > 0 %}
                <div class="cart-drawer-recommendations-sidebar">
                  <div class="global-drawer--secondary__content">
                    <div class="global-drawer--secondary__header">
                      {% if settings.cart_recommendations_heading != blank %}
                        <h5 class="text-link-animated">{{ settings.cart_recommendations_heading }}</h5>
                      {% else %}
                        <h5 class="text-link-animated">Don't forget these...</h5>
                      {% endif %}
                    </div>
                    <div class="global-drawer--secondary__body cart-drawer__recommendations">
                      {% comment %} 使用指定系列中的产品作为推荐 {% endcomment %}
                      {% assign recommended_collection_handle = settings.cart_recommendations_collection | default: 'all' %}
                      {% assign recommended_collection = collections[recommended_collection_handle] %}
                      
                      <div class="cart-drawer__recommendations-grid">
                        {% for product in recommended_collection.products limit: 6 %}
                          {% if product.available %}
                            <div class="product-card-basic cart-drawer__product-card">
                              <div class="product-card-basic__image">
                                <a href="{{ product.url }}" tabindex="-1" aria-hidden="true">
                                  {% if product.featured_image %}
                                    <img src="{{ product.featured_image | img_url: '80x80', crop: 'center' }}" alt="{{ product.featured_image.alt | escape }}" loading="lazy" class="thumbnail-radius">
                                  {% else %}
                                    {{ 'product-1' | placeholder_svg_tag: 'icon icon--placeholder thumbnail-radius' }}
                                  {% endif %}
                                </a>
                              </div>
                              
                              <div class="product-card-basic--info">
                                <div class="product-card-basic--info--body">
                                  <div>
                                    {% assign title_font = 'product-grid--title-font-' | append: settings.type_card_title_font %}
                                    <div class="product-card-basic__title {{ title_font }}">
                                      <a href="{{ product.url }}">{{ product.title }}</a>
                                    </div>
                                  </div>
                                  
                                  <div class="product-card-basic__price">
                                    <span class="money">
                                      {% if settings.show_currency_code %}
                                        {{ product.price | money_with_currency }}
                                      {% else %}
                                        {{ product.price | money }}
                                      {% endif %}
                                    </span>
                                  </div>
                                </div>
                                
                                <div class="product-card-basic--info--footer">
                                  <div class="text-link-animated">
                                    <form class="product-card-form">
                                      <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
                                      <input type="hidden" name="quantity" value="1">
                                      <button type="button" class="btn--underlined btn--underlined-with-icon add-to-cart-btn" onclick="addToCartDrawer({{ product.selected_or_first_available_variant.id }}, 1, this)">
                                        {% render 'theme-icon' with icon: 'shopping-bag', iconSize: 12, iconClasses: 'btn--underlined-with-icon__icon' %}
                                        <span class="add-to-cart-text">{{ 'products.product.add_to_cart' | t }}</span>
                                      </button>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>
                          {% endif %}
                        {% endfor %}
                      </div>
                    </div>
                  </div>
                </div>
              {% endif %}
            {% endif %}
          </div>
          </form>
          <div class="cart-drawer-flex-container-recommendations desktop-cart-drawer-none-container-recommendations">
            {% if settings.show_cart_recommendations %}
              {%- liquid
                assign show_recommendations = true
                if cart.item_count == 0 and settings.empty_cart_products == blank
                  assign show_recommendations = false
                endif
                
                # 找出购物车中价格最高的商品ID用于推荐
                assign max_price = 0
                assign max_price_product_id = ""
                for item in cart.items
                  if item.product.price > max_price
                    assign max_price = item.product.price
                    assign max_price_product_id = item.product.id
                  endif
                endfor
                if max_price_product_id == "" and settings.empty_cart_products != blank and settings.empty_cart_products.products.first != blank
                  assign max_price_product_id = settings.empty_cart_products.products.first.id
                endif
              -%}
              {% if show_recommendations and cart.item_count > 0 %}
                <div class="cart-drawer-recommendations-sidebar">
                  <div class="global-drawer--secondary__content">
                    <div class="global-drawer--secondary__header">
                      {% if settings.cart_recommendations_heading != blank %}
                        <h5 class="text-link-animated">{{ settings.cart_recommendations_heading }}</h5>
                      {% else %}
                        <h5 class="text-link-animated">Don't forget these...</h5>
                      {% endif %}
                    </div>
                    <div class="global-drawer--secondary__body cart-drawer__recommendations">
                      {% comment %} 使用指定系列中的产品作为推荐 {% endcomment %}
                      {% assign recommended_collection_handle = settings.cart_recommendations_collection | default: 'all' %}
                      {% assign recommended_collection = collections[recommended_collection_handle] %}
                      
                      <div class="cart-drawer__recommendations-grid">
                        {% for product in recommended_collection.products limit: 8 %}
                          {% if product.available %}
                            <div class="product-card-basic cart-drawer__product-card">
                              <div class="product-card-basic__image">
                                <a href="{{ product.url }}" tabindex="-1" aria-hidden="true">
                                  {% if product.featured_image %}
                                    <img src="{{ product.featured_image | img_url: '80x80', crop: 'center' }}" alt="{{ product.featured_image.alt | escape }}" loading="lazy" class="thumbnail-radius">
                                  {% else %}
                                    {{ 'product-1' | placeholder_svg_tag: 'icon icon--placeholder thumbnail-radius' }}
                                  {% endif %}
                                </a>
                              </div>
                              
                              <div class="product-card-basic--info">
                                <div class="product-card-basic--info--body">
                                  <div>
                                    {% assign title_font = 'product-grid--title-font-' | append: settings.type_card_title_font %}
                                    <div class="product-card-basic__title {{ title_font }}">
                                      <a href="{{ product.url }}">{{ product.title }}</a>
                                    </div>
                                  </div>
                                  
                                  <div class="product-card-basic__price">
                                    <span class="money">
                                      {% if settings.show_currency_code %}
                                        {{ product.price | money_with_currency }}
                                      {% else %}
                                        {{ product.price | money }}
                                      {% endif %}
                                    </span>
                                  </div>
                                </div>
                                
                                <div class="product-card-basic--info--footer">
                                  <div class="text-link-animated">
                                    <form class="product-card-form">
                                      <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
                                      <input type="hidden" name="quantity" value="1">
                                      <button type="button" class="btn--underlined btn--underlined-with-icon add-to-cart-btn" onclick="addToCartDrawer({{ product.selected_or_first_available_variant.id }}, 1, this)">
                                        {% render 'theme-icon' with icon: 'shopping-bag', iconSize: 12, iconClasses: 'btn--underlined-with-icon__icon' %}
                                        <span class="add-to-cart-text">{{ 'products.product.add_to_cart' | t }}</span>
                                      </button>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>
                          {% endif %}
                        {% endfor %}
                      </div>
                    </div>
                  </div>
                </div>
              {% endif %}
            {% endif %}
          </div>
        </div>
     
</div>
        <div id="ShopNowContainer" v-if="type === 'shop-now'">
          <div ref="shopNowContent"></div>
        </div>

        <div id="SearchContainer" v-if="type === 'search'">
          <div class="search-drawer">
            <div class="input-group">
              <span class="input-group-btn">
                <button type="submit" class="btn icon-fallback-text" v-on:click="onSearchSubmit" tabindex="0">
                  <i class="fa fa-search"></i>
                  <span class="fallback-text">{{ 'general.search.submit' | t }}</span>
                </button>
              </span>
              <div class="search-input-group">
                <input
                  type="search" name="q" id="search-input" placeholder="{{ 'general.search.placeholder' | t }}"
                  class="input-group-field" aria-label="{{ 'general.search.placeholder' | t }}" autocomplete="off" autocorrect="off" spellcheck="false" ref="searchText"
                  v-model="searchQuery" @keydown.enter="onSearchSubmit"
                />
                <div class="search-drawer--clear" v-if="searchQuery.length > 0" v-on:click="clearSearchInput" tabindex="0">
                  <span class="search-drawer--clear-icon"></span>
                </div>
              </div>
            </div>
            <div class="wrapper-padded">
              <div id="search-results" class="grid-uniform">
                <div v-if="searching" class="search-loading">
                  <i class="fa fa-circle-o-notch fa-spin fa-fw"></i><span class="sr-only">{{ 'collections.paginate.loading' | t }}</span>
                </div>
                <div v-text="searchSummary" v-if="!searching"></div>
                <div class="search-results__meta top" v-if="searchHasResults">
                  <div class="search-results__meta-view-all"><a id="search-show-more" v-bind:href="searchPageUrlWithQuery" class="btn">{{ 'general.search.view_all' | t }}</a></div>
                </div>
                <div class="" v-for="group in searchGroups" v-if="!searching">
                  <h2 v-text="group.name" v-if="group.results.length"></h2>
                  <div class="indiv-search-listing-grid" v-for="result in group.results">
                    <div class="grid">
                      <div class="grid__item large--one-fifth live-search--image" v-if="result.featured_image">
                        <a v-bind:href="result.url" v-bind:title="result.title">
                          <span v-if="result.featured_image.url">
                            <img
                              loading="lazy"
                              v-bind:src="result.featured_image.url"
                              v-bind:alt="result.featured_image.alt"
                            />
                          </span>
                        </a>
                      </div>
                      <div class="grid__item line-search-content" :class="(result.image || result.featured_image) ? 'large--four-fifths' : 'large--one-whole'">
                        {% if settings.predictive_search_show_vendor %}
                        <div v-if="result.vendor" v-text="result.vendor"></div>
                        {% endif %}
                        <h5>
                          <a v-bind:href="result.url" v-text="result.title"></a>
                        </h5>
                        <div v-if="!result.available && group.name == 'Products'">{{ 'products.product.sold_out' | t }}</div>
                        {% if settings.predictive_search_show_price %}
                        <div v-if="result.price" v-html="result.price"></div>
                        {% endif %}
                      </div>
                    </div>
                    <span class="search-drawer-separator" v-if="group.results.length"><hr /></span>
                  </div>
                </div>
                <div class="search-results__meta bottom" v-if="searchHasResults">
                  <div class="search-results__meta-view-all"><a id="search-show-more" v-bind:href="searchPageUrlWithQuery" class="btn">{{ 'general.search.view_all' | t }}</a></div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div id="LogInContainer" v-if="type === 'login'">
          <div ref="loginContent"></div>
        </div>
      </div>
    </transition>
  </div>
</script>

<script>
  // Global variable to store the Vue instance reference
  var drawerVueInstance = null;
  
  // Free shipping threshold in cents (e.g., 100000 = $1000.00)
  var freeShippingThreshold = 100000;

  // Function to get the drawer Vue instance
  function getDrawerVueInstance() {
    if (drawerVueInstance) return drawerVueInstance;
    
    const drawerElement = document.querySelector('.right-drawer-vue');
    if (drawerElement && drawerElement.__vue__) {
      drawerVueInstance = drawerElement.__vue__.$children[0];
      return drawerVueInstance;
    }
    return null;
  }

  // 初始化购物车数据并打开抽屉
  function initializeCartDrawer() {
    // Remove excessive logging
    // console.log('Initializing cart drawer');
    fetch('/cart.js', { 
      method: 'GET',
      headers: { 'Accept': 'application/json' },
      cache: 'no-store'
    })
      .then(res => res.json())
      .then(cartData => {
        // Remove excessive logging
        // console.log('Cart data loaded:', cartData);
        const drawerInstance = getDrawerVueInstance();
        if (drawerInstance) {
          // 确保购物车数据正确加载
          drawerInstance.cart = cartData;
          drawerInstance.type = 'cart';
          
          // 强制Vue更新
          if (typeof drawerInstance.$forceUpdate === 'function') {
            drawerInstance.$forceUpdate();
          }
          
          // Remove excessive logging
          // console.log('Cart drawer initialized with data');
        } else {
          console.error('Could not get drawer Vue instance');
        }
      })
      .catch(err => console.error('Error initializing cart drawer:', err));
  }

  // Add shipping progress percentage calculation method to Vue component
  document.addEventListener('DOMContentLoaded', function() {
    setTimeout(function() {
      const drawerInstance = getDrawerVueInstance();
      if (drawerInstance) {
        // Add the free shipping threshold to the Vue instance
        drawerInstance.freeShippingThreshold = freeShippingThreshold;
        
        // Add the shipping progress calculation method
        drawerInstance.getShippingProgressPercentage = function() {
          const cartTotal = this.cart ? this.cart.total_price : 0;
          
          // Calculate percentage (max 100%)
          const percentage = Math.min(100, (cartTotal / freeShippingThreshold) * 100);
          return percentage;
        };

        // Add method to calculate total compare price
        drawerInstance.getCartComparePrice = function() {
          let compareTotal = 0;
          
          // If cart is not loaded yet, return 0
          if (!this.cart || !this.cart.items) {
            return 0;
          }
          
          // Loop through all items and add up their compare prices
          this.cart.items.forEach(item => {
            if (item.compare_at_price > 0) {
              // For each item, add (compare price × quantity)
              compareTotal += item.compare_at_price * item.quantity;
            } else {
              // If no compare price, use the regular price
              compareTotal += item.original_price * item.quantity;
            }
          });
          
          return compareTotal;
        };
        
        // Add removeItem method for smoother item removal
        drawerInstance.removeItem = function(line, itemId) {
          // Immediately hide the item for a smoother experience
          if (this.cart && this.cart.items) {
            const itemIndex = line - 1;
            if (itemIndex >= 0 && itemIndex < this.cart.items.length) {
              // Create a visual effect of removal
              const itemRow = document.querySelector(`.ajaxcart__row[data-line="${line}"]`);
              if (itemRow) {
                // Apply a fade-out effect
                itemRow.style.transition = 'opacity 0.3s ease';
                itemRow.style.opacity = '0.5';
              }
            }
          }
          
          // Call the actual quantity update with a small delay
          setTimeout(() => {
            this.setQuantity(line, 0);
            this.setSubtotal();
            this.updateCartPriceDisplay(true);
          }, 100);
        };
        
        // Enhance setQuantity method to be more efficient
        const originalSetQuantity = drawerInstance.setQuantity;
        if (originalSetQuantity) {
          drawerInstance.setQuantity = function(line, quantity, optimized = false) {
            // Skip redundant updates for small changes if optimized
            if (optimized && this.cart && this.cart.items) {
              const itemIndex = line - 1;
              if (itemIndex >= 0 && itemIndex < this.cart.items.length) {
                const currentItem = this.cart.items[itemIndex];
                // If quantity is the same, don't update
                if (currentItem.quantity === quantity) {
                  return;
                }
                
                // If this is just incrementing/decrementing by 1, optimize the update
                if (Math.abs(currentItem.quantity - quantity) === 1) {
                  // Update the local cart data immediately for a smoother experience
                  currentItem.quantity = quantity;
                  this.$forceUpdate();
                }
              }
            }
            
            // Call the original method
            return originalSetQuantity.call(this, line, quantity);
          };
        }

        // 确保购物车数据已初始化
        if (!drawerInstance.cart) {
          initializeCartDrawer();
        }
      } else {
        console.error('Could not get drawer Vue instance on DOMContentLoaded');
        // 尝试延迟再次初始化
        setTimeout(initializeCartDrawer, 500);
      }
    }, 1000);

    // 添加额外的初始化尝试，确保购物车数据加载
    setTimeout(initializeCartDrawer, 2000);
  });

  // Function to update price elements in the cart drawer
  function updateCartPriceElements(cartData) {
    if (!cartData) {
      console.error('No cart data provided to updateCartPriceElements');
      return;
    }
    
    try {
      // Check if cart is empty
      if (!cartData.item_count || cartData.item_count === 0) {
        console.log('Cart is empty, hiding price elements');
        
        // Hide the footer with prices if cart is empty
        const footerElement = document.querySelector('.global-drawer__footer');
        if (footerElement) {
          footerElement.style.display = 'none';
        }
        
        // Also update any subtotal that might show $0.00
        const subtotalElements = document.querySelectorAll('.cart-drawer__subtotal--price-value, .cart-drawer__subtotal--price span:last-child');
        if (subtotalElements.length > 0) {
          subtotalElements.forEach(el => {
            el.innerHTML = formatMoney(0);
          });
        }
        
        return;
      }
      
      // Show the footer if cart has items
      const footerElement = document.querySelector('.global-drawer__footer');
      if (footerElement) {
        footerElement.style.display = '';
      }
      
      // Format the price according to the store's currency format
      let formattedPrice = formatMoney(cartData.total_price);
      
      // Calculate total compare price
      let totalComparePrice = 0;
      if (cartData.items && cartData.items.length > 0) {
        cartData.items.forEach(item => {
          if (item.compare_at_price > 0) {
            totalComparePrice += item.compare_at_price * item.quantity;
          } else {
            totalComparePrice += item.original_price * item.quantity;
          }
        });
      }
      
      // 直接更新价格元素，确保价格正确显示
      const priceElement = document.querySelector('.cart-drawer__subtotal--price-value');
      if (priceElement) {
        priceElement.innerHTML = formattedPrice;
      }
      
      // 更新比较价格（如果有折扣）
      const compareElement = document.querySelector('.cart-drawer__subtotal--compare');
      if (compareElement) {
        if (totalComparePrice > cartData.total_price) {
          compareElement.innerHTML = formatMoney(totalComparePrice);
          compareElement.style.display = 'inline-block';
          
          // 添加折扣样式
          if (priceElement) {
            priceElement.classList.add('cart-drawer__subtotal--sale');
          }
        } else {
          compareElement.style.display = 'none';
          
          // 移除折扣样式
          if (priceElement) {
            priceElement.classList.remove('cart-drawer__subtotal--sale');
          }
        }
      }
      
      // 更新购物车总价显示
      const subtotalPriceElements = document.querySelectorAll('.cart-drawer__subtotal--price .money, .cart-drawer__subtotal--price span:not(.visually-hidden):not(.cart-drawer__subtotal--compare)');
      if (subtotalPriceElements.length > 0) {
        subtotalPriceElements.forEach(el => {
          el.innerHTML = formattedPrice;
        });
      }
      
      // 更新折扣显示
      updateDiscountDisplay(cartData);
      
      // 更新免运费进度条
      updateShippingProgressBar(cartData);
    } catch (error) {
      console.error('Error in updateCartPriceElements:', error);
    }
  }
  
  // Function to update the shipping progress bar
  function updateShippingProgressBar(cartData) {
    if (!cartData) return;
    
    const cartTotal = cartData.total_price || 0;
    
    // Calculate percentage (max 100%)
    const percentage = Math.min(100, (cartTotal / freeShippingThreshold) * 100);
    
    // Update progress bar fill width - add a small delay to ensure smooth animation
    const progressBarFill = document.querySelector('.shipping-progress-bar__fill');
    if (progressBarFill) {
      // Use requestAnimationFrame for smoother updates
      requestAnimationFrame(() => {
        progressBarFill.style.width = percentage + '%';
      });
    }
    
    // Update text messages - use direct selectors for better performance
    const successContainer = document.querySelector('.shipping-progress-success-container');
    const remainingContainer = document.querySelector('.shipping-progress-text:not(.shipping-progress-success-container)');
    const remainingAmount = document.querySelector('.shipping-progress-remaining');
    
    // Check if we already meet the threshold
    const alreadyMetThreshold = window.shippingThresholdMet === true;
    
    if (cartTotal >= freeShippingThreshold) {
      // We now meet the threshold
      window.shippingThresholdMet = true;
      
      // Only make changes if we weren't already showing success message
      if (!alreadyMetThreshold) {
        // Show success message, hide remaining message
        if (successContainer) {
          successContainer.style.display = 'block';
          successContainer.style.opacity = '1';
        }
        if (remainingContainer) {
          remainingContainer.style.display = 'none';
          remainingContainer.style.opacity = '0';
        }
      }
    } else {
      // We don't meet the threshold
      window.shippingThresholdMet = false;
      
      // Only make changes if we were previously showing success message
      if (alreadyMetThreshold || alreadyMetThreshold === undefined) {
        // Show remaining message, hide success message
        if (successContainer) {
          successContainer.style.display = 'none';
          successContainer.style.opacity = '0';
        }
        if (remainingContainer) {
          remainingContainer.style.display = 'block';
          remainingContainer.style.opacity = '1';
        }
      }
      
      // Always update the remaining amount text
      if (remainingAmount) {
        const amountLeft = freeShippingThreshold - cartTotal;
        remainingAmount.textContent = formatMoney(amountLeft);
      }
    }
  }
  
  // Helper function to format money according to Shopify's format
  function formatMoney(cents) {
    if (typeof Shopify !== 'undefined' && Shopify.formatMoney) {
      return Shopify.formatMoney(cents);
    }
    
    // Fallback formatter if Shopify's isn't available
    const formatter = new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD', // Default to USD if we can't detect
    });
    
    return formatter.format(cents/100);
  }
  
  // Update discount display if needed
  function updateDiscountDisplay(cartData) {
    const discountElements = document.querySelectorAll('.cart-drawer__discounts');
    
    // If there are cart-level discounts, make sure they're displayed
    if (cartData.cart_level_discount_applications && cartData.cart_level_discount_applications.length > 0) {
      // Update or create discount elements as needed
    }
  }

  // Function to add product to cart and open drawer
  function addToCartDrawer(variantId, quantity, button) {
    // Show loading state on button
    const originalText = button.innerHTML;
    const buttonWidth = button.offsetWidth;
    
    // Set a minimum width to prevent layout shift
    button.style.minWidth = buttonWidth + 'px';
    
    // Remove any existing borders or outlines
    button.style.border = 'none';
    button.style.boxShadow = 'none';
    button.style.outline = 'none';
    
    // Replace content with just the spinner for cleaner look
    button.innerHTML = '<span class="loading-spinner"></span>';
    button.disabled = true;
    
    // Check if we already have cart data to avoid unnecessary reloads
    const hasExistingCart = window.lastCartData && window.lastCartTime && 
                           (Date.now() - window.lastCartTime < 5000); // 5 seconds cache
    
    // Add to cart via AJAX
    fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        items: [{
          id: variantId,
          quantity: quantity
        }]
      })
    })
    .then(response => response.json())
    .then(data => {
      // Get updated cart data
      return fetch('/cart.js').then(res => res.json());
    })
    .then(cartData => {
      // Store cart data for potential reuse
      window.lastCartData = cartData;
      window.lastCartTime = Date.now();
      
      // Get the drawer instance once to avoid multiple lookups
      const drawerInstance = getDrawerVueInstance();
      
      // Check if the drawer is already open
      const isDrawerOpen = drawerInstance && drawerInstance.isOpen;
      
      // Create a function to perform updates efficiently
      const performEfficientUpdates = (data) => {
        // Only update if drawer instance exists
        if (drawerInstance) {
          drawerInstance.cart = data;
          
          // Force Vue to update immediately
          if (typeof drawerInstance.$forceUpdate === 'function') {
            drawerInstance.$forceUpdate();
          }
          
          // Only update DOM elements if necessary
          // Use a single requestAnimationFrame for better performance
          requestAnimationFrame(() => {
            // Check if the threshold status would change
            const currentThresholdMet = window.shippingThresholdMet;
            const wouldThresholdBeMet = data.total_price >= freeShippingThreshold;
            
            // Only update shipping bar if threshold status changes
            if (currentThresholdMet !== wouldThresholdBeMet) {
              updateShippingProgressBar(data);
            }
            
            // Always update price elements as they need to reflect the new total
            updateCartPriceElements(data);
          });
        }
      };
      
      if (drawerInstance) {
        // Method 1: Direct Vue update
        drawerInstance.cart = cartData;
        drawerInstance.type = 'cart';
        
        // Only open the drawer if it's not already open
        if (!isDrawerOpen) {
          drawerInstance.isOpen = true;
          
          // If we're opening the drawer for the first time, do a complete update
          performEfficientUpdates(cartData);
        } else {
          // If drawer is already open, just update the data efficiently
          performEfficientUpdates(cartData);
        }
      } else {
        // Fallback methods if drawer instance isn't available
        if (typeof theme !== 'undefined') {
          if (typeof theme.openCartDrawer === 'function') {
            theme.openCartDrawer();
          } else if (typeof theme.Drawers !== 'undefined' && theme.Drawers.drawerCart) {
            theme.Drawers.drawerCart.open();
          }
        } else {
          // Last resort: click the cart toggle
          const cartToggle = document.querySelector('[data-cart-toggle]') || 
                            document.querySelector('[data-drawer-toggle="cart"]') ||
                            document.querySelector('[aria-controls="CartDrawer"]');
          if (cartToggle) {
            cartToggle.click();
          }
        }
        
        // Update the cart data after a short delay to ensure drawer is open
        setTimeout(() => {
          const newDrawerInstance = getDrawerVueInstance();
          if (newDrawerInstance) {
            performEfficientUpdates(cartData);
          } else {
            // Direct DOM updates as fallback
            updateCartPriceElements(cartData);
            updateShippingProgressBar(cartData);
          }
        }, 300);
      }
      
      // Show success message briefly
      button.innerHTML = '<span class="add-to-cart-success">Added ✓</span>';
      
      // Reset button state after a delay
      setTimeout(() => {
        button.innerHTML = originalText;
        button.disabled = false;
        // Remove the fixed width and styling after animation completes
        setTimeout(() => {
          button.style.minWidth = '';
          button.style.border = '';
          button.style.boxShadow = '';
          button.style.outline = '';
        }, 300);
      }, 1000);
    })
    .catch(error => {
      console.error('Error adding item to cart:', error);
      button.innerHTML = originalText;
      button.disabled = false;
      button.style.minWidth = '';
      button.style.border = '';
      button.style.boxShadow = '';
      button.style.outline = '';
      alert('Error adding item to cart. Please try again.');
    });
    
    return false;
  }
  
  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', function() {
    // Try to get the Vue instance
    setTimeout(function() {
      const drawerInstance = getDrawerVueInstance();
      
      // Add the updateCartPriceDisplay method to the Vue instance
      if (drawerInstance) {
        drawerInstance.updateCartPriceDisplay = function(optimized = false) {
          // Skip redundant updates if optimized flag is set
          if (optimized && window.lastCartUpdateTime) {
            const now = Date.now();
            // If updated within the last 100ms, skip this update
            if (now - window.lastCartUpdateTime < 100) {
              return;
            }
          }
          
          // Record this update time
          window.lastCartUpdateTime = Date.now();
          
          // 获取最新的购物车数据
          fetch('/cart.js', { 
            method: 'GET',
            headers: { 'Accept': 'application/json' },
            cache: 'no-store' // 避免缓存，确保获取最新数据
          })
            .then(res => res.json())
            .then(cartData => {
              // 存储购物车数据以便重用
              window.lastCartData = cartData;
              window.lastCartTime = Date.now();
              
              // 更新Vue数据
              this.cart = cartData;
              
              // 强制Vue立即更新
              this.$forceUpdate();
              
              // 使用单个requestAnimationFrame优化性能
              requestAnimationFrame(() => {
                // 直接调用我们的修复函数
                fixCartPriceDisplay();
                
                // 同时也更新运费进度条
                updateShippingProgressBar(cartData);
              });
            })
            .catch(err => console.error('Error updating cart price display:', err));
        };
      }
    }, 1000);
    
    // Listen for drawer open events to refresh the instance reference
    document.addEventListener('click', function(e) {
      if (e.target.matches('[data-cart-toggle], [data-drawer-toggle="cart"], [aria-controls="CartDrawer"]')) {
        setTimeout(function() {
          const drawerInstance = getDrawerVueInstance();
          
          // Add the updateCartPriceDisplay method if it doesn't exist
          if (drawerInstance && !drawerInstance.updateCartPriceDisplay) {
            drawerInstance.updateCartPriceDisplay = function() {
              // Remove excessive logging
              // console.log('Updating cart price display (drawer open)');
              fetch('/cart.js')
                .then(res => res.json())
                .then(cartData => {
                  // Remove excessive logging
                  // console.log('Got cart data:', cartData.total_price);
                  this.cart = cartData;
                  
                  // Force Vue to update
                  this.$forceUpdate();
                  
                  // Update DOM directly
                  setTimeout(() => {
                    updateCartPriceElements(cartData);
                    updateShippingProgressBar(cartData);
                  }, 100);
                  
                  // Make a second update attempt
                  setTimeout(() => {
                    updateCartPriceElements(cartData);
                    updateShippingProgressBar(cartData);
                  }, 500);
                })
                .catch(err => console.error('Error updating cart price display:', err));
            };
          }
        }, 500);
      }
    });
    
    // Set up a MutationObserver to watch for changes in the cart drawer
    setTimeout(() => {
      const cartContainer = document.getElementById('CartContainer');
      if (cartContainer) {
        const observer = new MutationObserver((mutations) => {
          // When changes are detected in the cart, update prices
          fetch('/cart.js')
            .then(res => res.json())
            .then(cartData => {
              // Remove excessive logging
              // console.log('MutationObserver detected changes, updating prices with total:', cartData.total_price);
              requestAnimationFrame(() => {
                updateCartPriceElements(cartData);
                updateShippingProgressBar(cartData);
              });
            })
            .catch(err => console.error('Error in MutationObserver cart update:', err));
        });
        
        // Start observing the cart container for changes
        observer.observe(cartContainer, { 
          childList: true, 
          subtree: true,
          characterData: true,
          attributes: true
        });
        console.log('MutationObserver set up for cart container');
      }
    }, 2000);
    
    // Add a direct event listener for quantity changes
    document.addEventListener('click', function(e) {
      // Check if the clicked element is a quantity button
      if (e.target.closest('.ajaxcart__qty-adjust') || e.target.closest('.ajaxcart__remove')) {
        // Remove excessive logging
        // console.log('Quantity button clicked, will update prices');
        
        // Immediate update attempt for better responsiveness
        fetch('/cart.js')
          .then(res => res.json())
          .then(cartData => {
            requestAnimationFrame(() => {
              updateCartPriceElements(cartData);
              updateShippingProgressBar(cartData);
              ensureLastProductVisible(); // Ensure last product is visible
            });
          })
          .catch(err => {});
        
        // Wait for the cart to update
        setTimeout(() => {
          fetch('/cart.js')
            .then(res => res.json())
            .then(cartData => {
              // Remove excessive logging
              // console.log('Direct event: updating prices with total:', cartData.total_price);
              requestAnimationFrame(() => {
                updateCartPriceElements(cartData);
                updateShippingProgressBar(cartData);
                ensureLastProductVisible(); // Ensure last product is visible
              });
            })
            .catch(err => console.error('Error in direct event cart update:', err));
        }, 200);
      }
    });
    
    // Listen for custom cart update events from Shopify
    document.addEventListener('cart:updated', function(event) {
      console.log('Detected cart:updated event');
      fetch('/cart.js')
        .then(res => res.json())
        .then(cartData => {
          console.log('Cart event: updating prices with total:', cartData.total_price);
          updateCartPriceElements(cartData);
          updateShippingProgressBar(cartData);
        })
        .catch(err => console.error('Error in cart event update:', err));
    });
    
    // Also listen for the deprecated cart.requestComplete event
    document.addEventListener('cart.requestComplete', function(event) {
      console.log('Detected cart.requestComplete event');
      if (event.detail && event.detail.cart) {
        updateCartPriceElements(event.detail.cart);
        updateShippingProgressBar(event.detail.cart);
      } else {
        fetch('/cart.js')
          .then(res => res.json())
          .then(cartData => {
            updateCartPriceElements(cartData);
            updateShippingProgressBar(cartData);
          })
          .catch(err => console.error('Error in cart event update:', err));
      }
    });
    
    // Add a polyfill for older browsers
    if (!Element.prototype.matches) {
      Element.prototype.matches = 
        Element.prototype.matchesSelector || 
        Element.prototype.mozMatchesSelector ||
        Element.prototype.msMatchesSelector || 
        Element.prototype.oMatchesSelector || 
        Element.prototype.webkitMatchesSelector ||
        function(s) {
          var matches = (this.document || this.ownerDocument).querySelectorAll(s),
              i = matches.length;
          while (--i >= 0 && matches.item(i) !== this) {}
          return i > -1;
        };
    }
    
    if (!Element.prototype.closest) {
      Element.prototype.closest = function(s) {
        var el = this;
        do {
          if (Element.prototype.matches.call(el, s)) return el;
          el = el.parentElement || el.parentNode;
        } while (el !== null && el.nodeType === 1);
        return null;
      };
    }
    
    // Set up periodic price check to ensure consistency
    setInterval(() => {
      // Add throttling - only update if it's been at least 30 seconds since last update
      const now = Date.now();
      if (!window.lastCartUpdateTime || now - window.lastCartUpdateTime > 30000) {
        fetch('/cart.js')
          .then(res => res.json())
          .then(cartData => {
            updateCartPriceElements(cartData);
            updateShippingProgressBar(cartData);
            window.lastCartUpdateTime = now;
          })
          .catch(err => {});
      }
    }, 30000); // Changed from 5000 (5 seconds) to 30000 (30 seconds)
    
    // 添加调整布局的函数
    function adjustCartDrawerLayout() {
      const drawer = document.querySelector('.drawer--cart');
      if (!drawer) return;
      
      const header = drawer.querySelector('.drawer__header');
      const title = drawer.querySelector('.drawer__title');
      const footer = drawer.querySelector('.global-drawer__footer');
      const content = drawer.querySelector('.cart-drawer-main-content');
      const recommendationsContainer = drawer.querySelector('.cart-drawer-recommendations-sidebar');
      
      if (content) {
        // 确保底部元素完全可见
        if (footer) {
          footer.style.position = 'sticky';
          footer.style.bottom = '0';
          footer.style.width = '100%';
          footer.style.zIndex = '10';
          footer.style.backgroundColor = '#fff';
          
          // 确保底部元素不会被遮挡
          const checkoutBtn = footer.querySelector('.cart-drawer__checkout-btn');
          if (checkoutBtn) {
            const checkoutRect = checkoutBtn.getBoundingClientRect();
            if (checkoutRect.bottom > window.innerHeight) {
              const offset = checkoutRect.bottom - window.innerHeight + 20;
              footer.style.paddingBottom = offset + 'px';
            }
          }
        }
      }
    }
    
    // 在抽屉打开时调整布局
    document.addEventListener('click', function(e) {
      if (e.target.matches('[data-cart-toggle], [data-drawer-toggle="cart"], [aria-controls="CartDrawer"]')) {
        // 立即清除最后一个产品的边距
        const lastProduct = document.querySelector('.ajaxcart__product:last-child');
        if (lastProduct) {
          lastProduct.style.marginBottom = '0';
        }
        
        // 多次调用以确保正确计算高度
        setTimeout(adjustCartDrawerLayout, 100);
        setTimeout(adjustCartDrawerLayout, 300);
        setTimeout(adjustCartDrawerLayout, 500);
        
        // 额外调用以确保底部元素完全可见
        setTimeout(ensureFooterVisible, 600);
        
        // 确保最后一个产品完全可见
        setTimeout(ensureLastProductVisible, 300);
        setTimeout(ensureLastProductVisible, 700);
        
        // 额外的清除最后一个产品边距的尝试
        setTimeout(function() {
          const lastProduct = document.querySelector('.ajaxcart__product:last-child');
          if (lastProduct) {
            lastProduct.style.marginBottom = '0';
          }
        }, 800);
      }
    });
    
    // 确保底部元素完全可见的函数
    function ensureFooterVisible() {
      const drawer = document.querySelector('.drawer--cart');
      if (!drawer) return;
      
      const footer = drawer.querySelector('.global-drawer__footer');
      if (!footer) return;
      
      // 获取所有需要确保可见的元素
      const checkoutBtn = footer.querySelector('.cart-drawer__checkout-btn');
      const viewCartBtn = footer.querySelector('.cart-drawer__view-cart-btn');
      const subtotalElem = footer.querySelector('.cart-drawer__subtotal');
      
      if (checkoutBtn) {
        // 检查结账按钮是否完全可见
        const checkoutRect = checkoutBtn.getBoundingClientRect();
        if (checkoutRect.bottom > window.innerHeight) {
          // 如果结账按钮底部超出视口，添加额外的底部内边距
          const offset = checkoutRect.bottom - window.innerHeight + 20;
          footer.style.paddingBottom = offset + 'px';
          
          // 强制重新计算布局
          setTimeout(adjustCartDrawerLayout, 100);
        }
      }
      
      // 确保底部区域有足够的空间
      const footerRect = footer.getBoundingClientRect();
      const bottomSpace = window.innerHeight - footerRect.bottom;
      if (bottomSpace < 20) {
        footer.style.paddingBottom = (20 - bottomSpace) + 'px';
      }
      
      // 确保最后一个产品完全可见
      ensureLastProductVisible();
    }
    
    // 确保最后一个产品完全可见
    function ensureLastProductVisible() {
      const lastProduct = document.querySelector('.ajaxcart__product:last-child');
      if (!lastProduct) return;
      
      // 强制移除任何边距
      lastProduct.style.marginBottom = '0';
      
      // 移除所有子元素的边距
      const childElements = lastProduct.querySelectorAll('*');
      childElements.forEach(function(element) {
        element.style.marginBottom = '0';
      });
      
      // 确保内容容器没有过多的底部内边距
      const contentContainer = document.querySelector('.cart-drawer-main-content');
      if (contentContainer) {
        contentContainer.style.paddingBottom = '20px';
      }
    }
    
    // 添加滚动事件监听器，确保在滚动时最后一个产品可见
    document.addEventListener('DOMContentLoaded', function() {
      setTimeout(function() {
        const mainContent = document.querySelector('.cart-drawer-main-content');
        if (mainContent) {
          mainContent.addEventListener('scroll', function() {
            requestAnimationFrame(ensureLastProductVisible);
          });
        }
      }, 1000);
    });
    
    // 确保在窗口大小变化时重新计算
    window.addEventListener('resize', function() {
      setTimeout(ensureLastProductVisible, 100);
    });
    
    // 在购物车更新时确保最后一个产品可见
    document.addEventListener('cart:updated', function() {
      setTimeout(ensureLastProductVisible, 300);
      setTimeout(ensureLastProductVisible, 600);
    });
    
    // 添加MutationObserver监听购物车内容变化
    document.addEventListener('DOMContentLoaded', function() {
      setTimeout(function() {
        const cartContainer = document.querySelector('.cart-drawer-main-content');
        if (cartContainer) {
          // 创建一个观察器实例
          const observer = new MutationObserver(function(mutations) {
            // 当购物车内容变化时，立即修复最后一个产品的边距
            fixLastProductSpacing();
            
            // 同时修复价格显示
            fixCartPriceDisplay();
          });
          
          // 配置观察选项
          const config = { 
            childList: true, 
            subtree: true,
            attributes: true,
            attributeFilter: ['style', 'class']
          };
          
          // 开始观察目标节点
          observer.observe(cartContainer, config);
          console.log('MutationObserver set up for cart container to fix margins and prices');
        }
      }, 1000);
    });
    
    // 专门用于修复最后一个产品和底部之间的间距问题
    function fixLastProductSpacing() {
      // 获取最后一个产品
      const lastProduct = document.querySelector('.ajaxcart__product:last-child');
      if (!lastProduct) return;
      
      // 移除任何边距
      lastProduct.style.marginBottom = '0';
      
      // 获取底部区域
      const footer = document.querySelector('.global-drawer__footer');
      if (!footer) return;
      
      // 确保底部区域紧贴最后一个产品
      footer.style.marginTop = '0';
      
      // 确保内容区域没有过多的内边距
      const contentContainer = document.querySelector('.cart-drawer-main-content');
      if (contentContainer) {
        contentContainer.style.paddingBottom = '20px';
      }
      
      // 确保购物车内容区域没有过多的内边距
      const cartInner = document.querySelector('.ajaxcart__inner');
      if (cartInner) {
        cartInner.style.paddingBottom = '0';
      }
    }
    
    // 在购物车打开时修复间距
    document.addEventListener('click', function(e) {
      if (e.target.matches('[data-cart-toggle], [data-drawer-toggle="cart"], [aria-controls="CartDrawer"]')) {
        setTimeout(fixLastProductSpacing, 100);
        setTimeout(fixLastProductSpacing, 500);
        setTimeout(fixLastProductSpacing, 1000);
      }
    });
    
    // 在购物车更新时修复间距
    document.addEventListener('cart:updated', function() {
      setTimeout(fixLastProductSpacing, 300);
      setTimeout(fixLastProductSpacing, 600);
    });
    
    // 专门用于修复价格显示问题
    function fixCartPriceDisplay() {
      fetch('/cart.js')
        .then(res => res.json())
        .then(cartData => {
          // 直接更新价格元素
          const formattedPrice = formatMoney(cartData.total_price);
          
          // 更新购物车总价显示
          const subtotalElements = document.querySelectorAll('.cart-drawer__subtotal--price-value, .cart-drawer__subtotal--price .money, .cart-drawer__subtotal--price span:not(.visually-hidden):not(.cart-drawer__subtotal--compare)');
          if (subtotalElements.length > 0) {
            subtotalElements.forEach(el => {
              el.innerHTML = formattedPrice;
            });
          }
          
          // 计算比较价格
          let totalComparePrice = 0;
          if (cartData.items && cartData.items.length > 0) {
            cartData.items.forEach(item => {
              if (item.compare_at_price > 0) {
                totalComparePrice += item.compare_at_price * item.quantity;
              } else {
                totalComparePrice += item.original_price * item.quantity;
              }
            });
          }
          
          // 更新比较价格（如果有折扣）
          const compareElement = document.querySelector('.cart-drawer__subtotal--compare');
          if (compareElement) {
            if (totalComparePrice > cartData.total_price) {
              compareElement.innerHTML = formatMoney(totalComparePrice);
              compareElement.style.display = 'inline-block';
              
              // 添加折扣样式
              const priceElement = document.querySelector('.cart-drawer__subtotal--price-value');
              if (priceElement) {
                priceElement.classList.add('cart-drawer__subtotal--sale');
              }
            } else {
              compareElement.style.display = 'none';
              
              // 移除折扣样式
              const priceElement = document.querySelector('.cart-drawer__subtotal--price-value');
              if (priceElement) {
                priceElement.classList.remove('cart-drawer__subtotal--sale');
              }
            }
          }
          
          // 确保小计区域可见
          const subtotalContainer = document.querySelector('.cart-drawer__subtotal');
          if (subtotalContainer) {
            subtotalContainer.style.display = 'flex';
          }
          
          // 确保底部区域可见
          const footerElement = document.querySelector('.global-drawer__footer');
          if (footerElement) {
            footerElement.style.display = '';
          }
        })
        .catch(err => console.error('Error fixing cart price display:', err));
    }
    
    // 在购物车打开时修复价格显示
    document.addEventListener('click', function(e) {
      if (e.target.matches('[data-cart-toggle], [data-drawer-toggle="cart"], [aria-controls="CartDrawer"]')) {
        setTimeout(fixCartPriceDisplay, 100);
        setTimeout(fixCartPriceDisplay, 500);
        setTimeout(fixCartPriceDisplay, 1000);
      }
    });
    
    // 在购物车更新时修复价格显示
    document.addEventListener('cart:updated', function() {
      setTimeout(fixCartPriceDisplay, 300);
      setTimeout(fixCartPriceDisplay, 600);
    });
    
    // 在数量变化时修复价格显示
    document.addEventListener('click', function(e) {
      if (e.target.closest('.ajaxcart__qty-adjust') || e.target.closest('.ajaxcart__remove')) {
        setTimeout(fixCartPriceDisplay, 300);
        setTimeout(fixCartPriceDisplay, 600);
      }
    });
  });

  // 专门用于调整推荐产品区域的函数
  function adjustRecommendationsArea() {
    const isMobile = window.innerWidth <= 820;
    if (!isMobile) return;
    
    const drawer = document.querySelector('.drawer--cart');
    if (!drawer) return;
    
    const recommendationsArea = drawer.querySelector('.cart-drawer-flex-container-recommendations');
    if (!recommendationsArea) return;
    
    // 限制推荐产品区域的高度
    recommendationsArea.style.maxHeight = '200px'; // 限制最大高度
    
    // 确保推荐产品区域不会被底部结账按钮遮挡
    const footer = drawer.querySelector('.global-drawer__footer');
    if (footer) {
      const footerHeight = footer.offsetHeight || 150;
      recommendationsArea.style.marginBottom = (footerHeight + 20) + 'px';
    }
    
    // 确保推荐产品区域的标题更加紧凑
    const title = recommendationsArea.querySelector('.text-link-animated');
    if (title) {
      title.style.fontSize = '14px';
      title.style.margin = '0 0 10px 0';
      title.style.padding = '0 15px';
    }
    
    // 确保推荐产品卡片是左右布局
    const productCards = recommendationsArea.querySelectorAll('.product-card-basic.cart-drawer__product-card');
    productCards.forEach(card => {
      card.style.display = 'flex';
      card.style.flexDirection = 'row';
      card.style.alignItems = 'center';
      card.style.gap = '10px';
      card.style.padding = '8px';
      card.style.marginBottom = '8px';
      card.style.height = 'auto';
      card.style.minHeight = '80px';
      
      // 调整图片大小
      const image = card.querySelector('.product-card-basic__image');
      if (image) {
        image.style.width = '30%';
        image.style.maxWidth = '80px';
        image.style.flexShrink = '0';
      }
      
      // 调整文字区域
      const info = card.querySelector('.product-card-basic--info');
      if (info) {
        info.style.width = '70%';
        info.style.padding = '0';
      }
      
      // 调整按钮大小
      const button = card.querySelector('.add-to-cart-btn');
      if (button) {
        button.style.padding = '4px 8px';
        button.style.fontSize = '11px';
        button.style.minHeight = '0';
        button.style.lineHeight = '1';
      }
    });
  }
  
  // 在各种事件中调用adjustRecommendationsArea
  document.addEventListener('DOMContentLoaded', function() {
    // 初始化时调用
    setTimeout(adjustRecommendationsArea, 500);
    
    // 窗口大小变化时调用
    window.addEventListener('resize', adjustRecommendationsArea);
    
    // 购物车打开时调用
    document.addEventListener('click', function(e) {
      if (e.target.matches('[data-cart-toggle], [data-drawer-toggle="cart"], [aria-controls="CartDrawer"]')) {
        setTimeout(adjustRecommendationsArea, 300);
        setTimeout(adjustRecommendationsArea, 600);
        setTimeout(adjustRecommendationsArea, 1000);
      }
    });
    
    // 购物车更新时调用
    document.addEventListener('cart:updated', function() {
      setTimeout(adjustRecommendationsArea, 300);
      setTimeout(adjustRecommendationsArea, 600);
    });
  });

  // Function to ensure correct mobile layout
  function ensureMobileLayout() {
    const isMobile = window.innerWidth <= 820;
    const cartForm = document.querySelector('form.cart.ajaxcart.new-cust-cart-drawer-flex-container');
    const drawer = document.querySelector('.drawer--cart');
    
    if (cartForm && drawer) {
      if (isMobile) {
        cartForm.classList.add('mobile-layout');
        
        // 确保正确的顺序
        const cartContent = cartForm.querySelector('.cart-drawer-flex-container-cart-customer');
        const footer = cartForm.querySelector('.global-drawer__footer');
        const recommendations = cartForm.querySelector('.cart-drawer-flex-container-recommendations');
        
        if (cartContent && footer) {
          // 确保购物车内容在上方
          cartForm.appendChild(cartContent);
          
          // 确保推荐产品在底部，但在结账按钮之前
          if (recommendations) {
            cartForm.appendChild(recommendations);
          }
          
          // 确保结账按钮在最底部并固定
          footer.style.position = 'fixed';
          footer.style.bottom = '0';
          footer.style.left = '0';
          footer.style.right = '0';
          footer.style.width = '100%';
          footer.style.zIndex = '1000';
          footer.style.background = '#fff';
          footer.style.boxShadow = '0 -2px 10px rgba(0,0,0,0.1)';
          
          // 确保内容不被遮挡
          const footerHeight = footer.offsetHeight || 150;
          const contentContainer = cartForm.querySelector('.cart-drawer-main-content');
          if (contentContainer) {
            contentContainer.style.paddingBottom = (footerHeight + 20) + 'px';
          }
          
          if (recommendations) {
            recommendations.style.marginBottom = (footerHeight + 20) + 'px';
          }
          
          // 添加到抽屉的末尾，确保它在视觉上位于最底部
          drawer.appendChild(footer);
          
          // 设置一个定时器，确保在内容变化后重新调整布局
          setTimeout(adjustFooterPosition, 300);
          
          // 调整推荐产品区域
          setTimeout(adjustRecommendationsArea, 300);
        }
      } else {
        cartForm.classList.remove('mobile-layout');
        
        // 恢复正常布局
        const footer = drawer.querySelector('.global-drawer__footer');
        if (footer) {
          footer.style.position = '';
          footer.style.bottom = '';
          footer.style.left = '';
          footer.style.right = '';
          footer.style.width = '';
          footer.style.zIndex = '';
          
          // 将footer放回原位
          const cartContent = cartForm.querySelector('.cart-drawer-flex-container-cart-customer');
          if (cartContent) {
            cartForm.insertBefore(footer, cartContent.nextSibling);
          } else {
            cartForm.appendChild(footer);
          }
        }
      }
    }
  }
</script>
