<style>
 .facets__display.new-facets__display__collection {
    max-height: 400px;
}
{% if request.page_type == 'collection' and collection.handle == 'all' %}
  .disclosure-has-popup.facets__disclosure.js-filter.facets__disclosure--Google\:.Size.Type {
      display: none;
  }
  details.disclosure-has-popup.facets__disclosure.js-filter.facets__disclosure--Brand{
    display: none;
  }
{% endif %}

{% if request.page_type == 'collection' and collection.handle == 'titanium-camping-cookware' %}
  details.disclosure-has-popup.facets__disclosure.js-filter.facets__disclosure--Brand {
    display: none;
}
{% endif %}

.product-item-collection-tab[style*="display: none"] {
  display: none !important;
}
 @media screen and (max-width: 1200px) {
    .facets__display.new-facets__display__collection {
    max-height: 300px;
}
 }
</style>
{%- assign sort_by = collection.sort_by | default: collection.default_sort_by -%}
<link rel="preload" href="{{ 'collection-tab-css.css' | asset_url }}" as="style" onload="this.onload=null;this.rel='stylesheet'"/>
<noscript>{{ 'collection-tab-css.css' | asset_url | stylesheet_tag }}</noscript>
{% capture icon_caret %}
  <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-caret" viewBox="0 0 10 6">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M9.354.646a.5.5 0 00-.708 0L5 4.293 1.354.646a.5.5 0 00-.708.708l4 4a.5.5 0 00.708 0l4-4a.5.5 0 000-.708z" fill="currentColor">
  </svg>
{% endcapture %}

{% capture icon_close %}
  <svg  aria-hidden="true" focusable="false" role="presentation" width="12" height="13" class="icon icon-close-small" viewBox="0 0 12 13" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M8.48627 9.32917L2.82849 3.67098" stroke="#333030" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M2.88539 9.38504L8.42932 3.61524" stroke="#333030" stroke-linecap="round" stroke-linejoin="round"/>
  </svg>
{% endcapture %}


{% if section.blocks.size > 0 %}
  <div class="collection-info{% if section.settings.desktop_position == 'sidebar' %}__sidebar{% else %}__topbar{% endif %}">
    {%- for block in section.blocks -%}
      {%- case block.type -%}
        {%- when '@app' -%}
          {% render block %}
        {%- when 'title' -%}
          <div class="sitewide--title-wrapper wrapper-padded">
            <h1 class="page--title">{{ collection.title }}</h1>
          </div>
        {%- when 'description' -%}
          {% if collection.description != blank %}
            <div class="rte collection-info__description wrapper-padded">
              {{ collection.description }}
            </div>
          {% endif %}

      {%- endcase -%}
    {%- endfor -%}
  </div>
{% endif %}


<div class="collection-filters new-collection-filters-wrapper-section  collection-filters__{% if section.settings.desktop_position == 'sidebar' %}sidebar{% else %}topbar{% endif %}" id="main-collection-filters" data-id="{{ section.id }}">

  <button type="button" class="mobile-facets__open btn btn--large" data-drawer-open-btn>
    {{ 'sections.collection_template.filter_and_sort' | t }}
  </button>

  {%- assign total_active_values = 0 -%}
  <collection-filtering-form class="facets" data-filter-form>
    <form id="CollectionFiltersForm" class="facets__form">
      {%- if section.settings.enable_filtering == true or section.settings.enable_sorting == true -%}
        <div class="drawer__close js-drawer-close">
          <button type="button" aria-label="{{ 'cart.general.close_cart' | t }}" class="mobile-menu--close-btn icon-fallback-text" data-drawer-close-btn>
            <span class="fallback-text">{{ 'cart.general.close_cart' | t }}</span>
          </button>
        </div>

        <div class="facets__form-inner">
          {% if section.settings.enable_filtering == true %}
            <div class="facets__wrapper">
              {%- unless collection.filters == empty -%}
                <p class="facets__heading">{{ 'sections.collection_template.filter_by_label' | t }}</p>
              {%- endunless -%}

              {%- for filter in collection.filters -%}
                {%- assign total_active_values = total_active_values | plus: filter.active_values.size -%}
                {% case filter.type %}
                {% when 'boolean' or 'list' %}
                  <details class="disclosure-has-popup facets__disclosure js-filter  facets__disclosure--{{ filter.label | escape }}" data-index="{{ forloop.index }}">
                    <summary class="facets__summary">
                      <div>
                        <span>{{ filter.label | escape }}</span>
                        <span class="count-bubble">{%- if filter.active_values.size > 0 -%}{{ filter.active_values.size }}{%- endif -%}</span>
                        {{ icon_caret }}
                      </div>
                    </summary>
                    <div class="facets__display ">
                      <div class="facets__header">
                        <span class="facets__selected no-js-hidden">{{ 'sections.collection_template.filters_selected' | t: count: filter.active_values.size }}</span>
                        <a href="{{ filter.url_to_remove }}" class="facets__reset link underlined-link js-facet-remove" >{{ 'sections.collection_template.reset' | t }}</a>
                      </div>

                      <ul class="facets__list list-unstyled" role="list">
                        {%- for value in filter.values -%}
                          <li class="list-menu__item facets__item">
                            <label for="Filter-{{ filter.label | escape }}-{{ forloop.index }}" class="facet-checkbox{% if value.count == 0 and value.active == false %} facet-checkbox--disabled{% endif %}">
                              <input type="checkbox"
                                name="{{ value.param_name }}"
                                value="{{ value.value }}"
                                id="Filter-{{ filter.label | escape }}-{{ forloop.index }}"
                                {% if value.active %}checked{% endif %}
                                {% if value.count == 0 and value.active == false %}disabled{% endif %}
                              >

                              <svg width="16" height="16" viewBox="0 0 16 16" aria-hidden="true" focusable="false">
                                <rect width="16" height="16" stroke="currentColor" fill="none" stroke-width="1"></rect>
                              </svg>

                              <svg class="icon icon-checkmark" aria-hidden="true" focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12 9" fill="none" width="10px" height="10px">
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M11.35.643a.5.5 0 01.006.707l-6.77 6.886a.5.5 0 01-.719-.006L.638 4.845a.5.5 0 11.724-.69l2.872 3.011 6.41-6.517a.5.5 0 01.707-.006h-.001z" fill="currentColor"/>
                              </svg>
                              {{ value.label | escape }} ({{ value.count }})
                            </label>
                          </li>
                        {%- endfor -%}
                      </ul>
                    </div>
                  </details>
                {% when 'price_range' %}
                  {% liquid
                    assign currencies_using_comma_decimals = 'ANG,ARS,BRL,BYN,BYR,CLF,CLP,COP,CRC,CZK,DKK,EUR,HRK,HUF,IDR,ISK,MZN,NOK,PLN,RON,RUB,SEK,TRY,UYU,VES,VND' | split: ','
                    assign uses_comma_decimals = false
                    if currencies_using_comma_decimals contains cart.currency.iso_code
                      assign uses_comma_decimals = true
                    endif
                  %}
                  <details class="disclosure-has-popup facets__disclosure js-filter" data-index="{{ forloop.index }}">
                    <summary class="facets__summary">
                      <div>
                        <span>{{ filter.label | escape }}</span>
                        <span class="count-bubble{%- if filter.min_value.value or filter.max_value.value -%}{{ filter.active_values.size }} count-bubble--dot{% endif %}"></span>
                        {{ icon_caret }}
                      </div>
                    </summary>
                    <div class="facets__display">
                      <div class="facets__header">
                        {%- assign max_price_amount = filter.range_max | money | escape -%}
                        <span class="facets__selected">{{ "sections.collection_template.max_price" | t: price: max_price_amount }}</span>
                        <a href="{{ filter.url_to_remove }}" class="facets__reset link underlined-link js-facet-remove" >{{ 'sections.collection_template.reset' | t }}</a>
                      </div>
                      <price-range-selector class="facets__price">
                        <div class="field">
                          <span class="field__currency">{{ cart.currency.symbol }}</span>
                          <input class="field__input"
                            name="{{ filter.min_value.param_name }}"
                            id="Filter-{{ filter.label | escape }}-{{ forloop.index }}"
                            {%- if filter.min_value.value -%}
                              {%- if uses_comma_decimals -%}
                                value="{{ filter.min_value.value | money_without_currency | replace: '.', '' | replace: ',', '.' }}"
                              {%- else -%}
                                value="{{ filter.min_value.value | money_without_currency | replace: ',', '' }}"
                              {% endif %}
                            {%- endif -%}
                            type="number"
                            placeholder="0"
                            min="0"
                            max="{{ filter.range_max | money_without_currency | replace: ',', '' }}">
                          </input>
                          <label class="field__label" for="Search-In-Modal">{{ 'sections.collection_template.from' | t }}</label>
                        </div>
                        <div class="field">
                          <span class="field__currency">{{ cart.currency.symbol }}</span>
                          <input class="field__input"
                            name="{{ filter.max_value.param_name }}"
                            id="Filter-{{ filter.label | escape }}-{{ forloop.index }}"
                            {%- if filter.max_value.value -%}
                              {%- if uses_comma_decimals -%}
                                value="{{ filter.max_value.value | money_without_currency | replace: '.', '' | replace: ',', '.' }}"
                              {%- else -%}
                                value="{{ filter.max_value.value | money_without_currency | replace: ',', '' }}"
                              {% endif %}
                            {%- endif -%}
                            type="number"
                            placeholder="{{ filter.range_max | money_without_currency | replace: ',', '' }}"
                            min="0"
                            max="{{ filter.range_max | money_without_currency | replace: ',', '' }}">
                          </input>
                          <label class="field__label" for="Search-In-Modal">{{ 'sections.collection_template.to' | t }}</label>
                        </div>
                      </div>
                    </price-range-selector>
                  </details>
                {% endcase %}
              {%- endfor -%}
              <noscript>
                <button type="submit" class="facets__button button">{{ 'sections.collection_template.filter_button' | t }}</button>
              </noscript>

              <!-- Custom Tag Filter -->
              <details class="disclosure-has-popup facets__disclosure js-filter facets__disclosure--CustomTags" data-index="custom-tags">
                <summary class="facets__summary">
                  <div>
                    <span>{{ section.settings.custom_tags_title }}</span>
                    {{ icon_caret }}
                  </div>
                </summary>
                <div class="facets__display new-facets__display__collection">
                  <div class="facets__header">
                    <span class="facets__selected no-js-hidden">{{ section.settings.selected_tags_text }}</span>
                  </div>
                  <ul class="facets__list list-unstyled" role="list">
                    <!-- Add All Tag Option -->
                    <li class="list-menu__item facets__item collection-tag-filter-item" data-tag="all" data-total-products="{{ collection.products_count }}">
                      <label class="facet-checkbox custom-tag-label">
                        <input type="checkbox"
                          class="custom-tag-checkbox"
                          name="custom_tag[]"
                          value="all"
                          id="Filter-tag-all"
                          checked
                        >
                        <svg width="16" height="16" viewBox="0 0 16 16" aria-hidden="true" focusable="false">
                          <rect width="16" height="16" stroke="currentColor" fill="none" stroke-width="1"></rect>
                        </svg>
                        <svg class="icon icon-checkmark" aria-hidden="true" focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12 9" fill="none" width="10px" height="10px">
                          <path fill-rule="evenodd" clip-rule="evenodd" d="M11.35.643a.5.5 0 01.006.707l-6.77 6.886a.5.5 0 01-.719-.006L.638 4.845a.5.5 0 11.724-.69l2.872 3.011 6.41-6.517a.5.5 0 01.707-.006h-.001z" fill="currentColor"/>
                        </svg>
                        <span class="tag-name">All</span>
                        <span class="tag-count"> ({{ collection.products_count }})</span>
                      </label>
                    </li>
                    <!-- End All Tag Option -->
                    {%- for block in section.blocks -%}
                      {%- if block.type == 'custom_tag' and block.settings.tag_name != blank -%}
                        <li class="list-menu__item facets__item collection-tag-filter-item" data-tag="{{ block.settings.tag_name }}">
                          <label class="facet-checkbox custom-tag-label">
                            <input type="checkbox"
                              class="custom-tag-checkbox"
                              name="custom_tag[]"
                              value="{{ block.settings.tag_name | handle }}"
                              id="Filter-tag-{{ forloop.index }}"
                              {% if current_tags contains block.settings.tag_name %}checked{% endif %}
                            >
                            <svg width="16" height="16" viewBox="0 0 16 16" aria-hidden="true" focusable="false">
                              <rect width="16" height="16" stroke="currentColor" fill="none" stroke-width="1"></rect>
                            </svg>
                            <svg class="icon icon-checkmark" aria-hidden="true" focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12 9" fill="none" width="10px" height="10px">
                              <path fill-rule="evenodd" clip-rule="evenodd" d="M11.35.643a.5.5 0 01.006.707l-6.77 6.886a.5.5 0 01-.719-.006L.638 4.845a.5.5 0 11.724-.69l2.872 3.011 6.41-6.517a.5.5 0 01.707-.006h-.001z" fill="currentColor"/>
                            </svg>
                            <span class="tag-name">{{ block.settings.display_name | default: block.settings.tag_name }}</span>
                            <span class="tag-count"></span>
                          </label>
                        </li>
                      {%- endif -%}
                    {%- endfor -%}
                  </ul>
                </div>
              </details>
              <!-- End Custom Tag Filter -->

            </div>

            <div class="active-facets active-facets-desktop">
              <a href="{{ collection.url }}?sort_by={{ sort_by }}" class="active-facets__button button button--secondary js-facet-remove">{{ 'sections.collection_template.clear_all' | t }}</a>
              {%- for filter in collection.filters -%}
                {%- for value in filter.active_values -%}
                  <a class="active-facets__button active-facets__button--light button button--tertiary js-facet-remove" href="{{ value.url_to_remove }}">
                    {% if filter.type == 'boolean' %}
                      {{ filter.label | escape | append: ': ' }}
                    {% endif %}
                    {{ value.label | escape }}
                    {{ icon_close }}
                  </a>
                {%- endfor -%}
                {% if filter.type == "price_range" %}
                  {%- if filter.min_value.value != nil or filter.max_value.value != nil -%}
                    <a class="active-facets__button active-facets__button--light button button--tertiary js-facet-remove" href="{{ filter.url_to_remove }}">
                      {%- if filter.min_value.value -%}{{ filter.min_value.value | money }}{%- else -%}{{ 0 | money }}{%- endif -%}-{%- if filter.max_value.value -%}{{ filter.max_value.value | money }}{%- else -%}{{ filter.range_max | money }}{%- endif -%}
                      {{ icon_close }}
                    </a>
                  {%- endif -%}
                {% endif %}
              {%- endfor -%}
            </div>

            {% if collection.current_vendor or collection.current_type %}
              <input type="hidden" name="q" value="{{ collection.current_vendor }}{{ collection.current_type }}">
            {% endif %}

            {%- if section.settings.enable_sorting == true -%}
              <div class="collection-filters__item sorting">
                <div class="collection-filters__field">
                  <label class="collection-filters__label" for="SortBy">{{ 'sections.collection_template.sort_by_label' | t }}</label>
                  <div class="select">
                    {%- assign sort_options = "manual,best-selling,title-ascending,title-descending,price-ascending,price-descending,created-ascending,created-descending" | split: "," -%}
                    {%- assign sort_names = "Best selling,Featured,Alphabetically A-Z,Alphabetically Z-A,Price, low to high,Price, high to low,Date, old to new,Date, new to old" | split: "," -%}
                    
                    <select name="sort_by" class="select__select collection-filters__sort" id="SortBy" aria-describedby="a11y-refresh-page-message">
                      {%- for option in sort_options -%}
                        {%- assign index = forloop.index0 -%}
                        <option value="{{ option }}"{% if option == sort_by %} selected="selected"{% endif %}>
                          {{ sort_names[index] }}
                        </option>
                      {%- endfor -%}
                    </select>
                    {{ icon_caret }}
                  </div>
                </div>

                <noscript>
                  <button type="submit" class="button button--small">{{ 'sections.collection_template.sort_button' | t }}</button>
                </noscript>
              </div>
            {% endif %}
          {% endif %}


          
        </div>
      {% endif %}
    </form>
  </collection-filtering-form>

  <div class="container">
      <div class="active-facets active-facets-mobile">
          <a href="{{ collection.url }}?sort_by={{ sort_by }}" class="active-facets__button button button--secondary js-facet-remove">{{ 'sections.collection_template.clear_all' | t }}</a>

          {%- for filter in collection.filters -%}
              {%- for value in filter.active_values -%}
                  <a class="active-facets__button active-facets__button--light button button--tertiary js-facet-remove" href="{{ value.url_to_remove }}">
                      {% if filter.type == 'boolean' %}
                        {{ filter.label | escape | append: ': ' }}
                      {% endif %}
                      {{ value.label | escape }}
                      {{ icon_close }}
                  </a>
              {%- endfor -%}

              {% if filter.type == "price_range" %}
                  {%- if filter.min_value.value != nil or filter.max_value.value != nil -%}
                  <a class="active-facets__button active-facets__button--light button button--tertiary js-facet-remove" href="{{ filter.url_to_remove }}">
                      {%- if filter.min_value.value -%}{{ filter.min_value.value | money }}{%- else -%}{{ 0 | money }}{%- endif -%}-{%- if filter.max_value.value -%}{{ filter.max_value.value | money }}{%- else -%}{{ filter.range_max | money }}{%- endif -%}
                      {{ icon_close }}
                  </a>
                  {%- endif -%}
              {% endif %}
          {%- endfor -%}
      </div>
  </div>
</div>

<script src="{{ 'filtering.js' | asset_url }}" defer="defer"></script>
<script>


  document.addEventListener("DOMContentLoaded", function () {
    const filterElement = document.querySelector(".collection-filters.new-collection-filters-wrapper-section");
    const productGrid = document.getElementById("CollectionProductGrid");
    const desktopHeader = document.querySelector(".site-header__wrapper");
    const mobileHeader = document.querySelector(".nav-bar.mobile-nav-bar-wrapper");

    if (!filterElement || !productGrid) return;

    let isFixed = false;
    
    // 获取当前适用的导航栏高度
    function getHeaderHeight() {
      const windowWidth = window.innerWidth;
      
      if (windowWidth <= 768) {
        // 移动端 - 使用 .nav-bar.mobile-nav-bar-wrapper
        if (mobileHeader && mobileHeader.offsetHeight > 0) {
          return mobileHeader.offsetHeight;
        }
      } else {
        // 桌面端 - 使用 .site-header__wrapper
        if (desktopHeader && desktopHeader.offsetHeight > 0) {
          return desktopHeader.offsetHeight;
        }
      }
      
      // 如果无法获取，使用默认值
      const defaultHeight = windowWidth <= 768 ? 60 : 80;
      return defaultHeight;
    }

    function handleScroll() {
        const scrollY = window.scrollY;
        const gridRect = productGrid.getBoundingClientRect();
        const windowHeight = window.innerHeight;
        const windowWidth = window.innerWidth;
        
        // 获取当前导航栏高度
        const headerHeight = getHeaderHeight();
        
        // 计算产品区域底部距离视窗底部的距离
        const distanceFromBottom = windowHeight - gridRect.bottom;
        
        // 当产品区域在视图内且底部未接近视窗底部时，保持筛选器固定
        if (gridRect.top <= headerHeight && distanceFromBottom < windowHeight * 0.4) {
            // 产品区域在视图内，且底部未接近视窗底部
            if (!isFixed) {
                filterElement.style.position = "fixed";
                filterElement.style.top = headerHeight + "px";
                
                // 根据屏幕宽度设置不同的宽度
                if (windowWidth > 768) {
                    filterElement.style.width = "13%";
                } else {
                    filterElement.style.width = "100%";
                }
                
                filterElement.style.zIndex = "1000";
                isFixed = true;
            }
        } else {
            // 移出筛选器
            if (isFixed) {
                filterElement.style.position = "";
                filterElement.style.top = "";
                filterElement.style.width = "";
                filterElement.style.zIndex = "";
                isFixed = false;
            }
        }
    }

    // 初始检查一次，等待DOM完全渲染
    setTimeout(function() {
        handleScroll();
    }, 300);
    
    // 添加滚动事件监听
    window.addEventListener("scroll", handleScroll);
    
    // 添加窗口调整大小事件监听
    window.addEventListener("resize", function() {
        
        // 如果筛选器已固定，则更新其位置
        if (isFixed) {
            const windowWidth = window.innerWidth;
            const headerHeight = getHeaderHeight();
            
            filterElement.style.top = headerHeight + "px";
            
            // 更新宽度
            if (windowWidth > 768) {
                filterElement.style.width = "13%";
            } else {
                filterElement.style.width = "100%";
            }
        }
        
        handleScroll();
    });
    
    // 在页面完全加载后再次检查
    window.addEventListener("load", function() {
        console.log("页面加载完成，最终导航栏高度:", getHeaderHeight());
        handleScroll();
    });
  });


</script>

{% schema %}
{
  "name": "Filters with tabs",
  "tag": "section",
  "class": "collection-filtering-section spaced-section",
  "settings": [
    {
      "type": "header",
      "content": "Filtering and sorting"
    },
    {
      "type": "text",
      "id": "custom_tags_title",
      "label": "Custom Tags Title",
      "default": "Custom Tags"
    },
    {
      "type": "text",
      "id": "selected_tags_text",
      "label": "Selected Tags Text",
      "default": "Selected Tags"
    },
    {
      "type": "select",
      "id": "desktop_position",
      "options": [
        {
          "value": "topbar",
          "label": "Top bar"
        },
        {
          "value": "sidebar",
          "label": "Sidebar"
        }
      ],
      "default": "topbar",
      "label": "Desktop position"
    },
    {
      "type": "checkbox",
      "id": "enable_filtering",
      "default": true,
      "label": "Enable filtering",
      "info": "[Customize filters](/admin/menus)"
    },
    {
      "type": "checkbox",
      "id": "enable_sorting",
      "default": true,
      "label": "Enable sorting"
    }
  ],
  "blocks": [
    {
      "type": "@app"
    },
    {
      "type": "title",
      "name": "Collection title",
      "limit": 1,
      "settings": [
        {
          "type": "paragraph",
          "content": "The title of the collection."
        }
      ]
    },
    {
      "type": "description",
      "name": "Collection description",
      "limit": 1,
      "settings": [
        {
          "type": "paragraph",
          "content": "The description of the collection, if one exists."
        }
      ]
    },
    {
      "type": "custom_tag",
      "name": "Custom Tag",
      "settings": [
        {
          "type": "text",
          "id": "tag_name",
          "label": "Tag Name",
          "info": "Enter the exact tag name you want to display"
        },
        {
          "type": "text",
          "id": "display_name",
          "label": "Display Name",
          "info": "How you want the tag to appear (optional)"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Filters with tabs"
    }
  ],
  "templates": ["collection"]
}
{% endschema %}




<script>
document.addEventListener('DOMContentLoaded', function() {
  // 阻止表单提交
  const filterForm = document.querySelector('#CollectionFiltersForm');
  if (filterForm) {
    filterForm.addEventListener('submit', function(e) {
      if (e.target.querySelector('.custom-tag-checkbox:checked')) {
        e.preventDefault();
        e.stopPropagation();
      }
    });
  }

  // 获取所有标签项和产品
  const tagItems = document.querySelectorAll('.collection-tag-filter-item');
  const products = document.querySelectorAll('.grid__item.product-item-collection-tab');
  const paginationElements = document.querySelectorAll('.pagination, .pagination-wrapper, .pagination__item, [data-paginate-items], .pagination__list, .pagination__load-more');
  const allTagCheckbox = document.querySelector('#Filter-tag-all');
  const productGrid = document.querySelector('.collection-main-body-inner');
  
  console.log('Found tag items:', tagItems.length);
  console.log('Found products on page:', products.length);

  // 存储选中的标签
  let selectedTags = [];
  // 存储已创建的虚拟产品元素，防止重复创建
  let createdVirtualProducts = {};

  // 计算每个标签的产品数量
  function updateTagCounts() {
    // 检查 productTagsMap 是否已经加载
    if (window.productTagsMap && Object.keys(window.productTagsMap).length > 0) {
      console.log('Using productTagsMap for tag counts with', Object.keys(window.productTagsMap).length, 'products');
      
      // 使用 productTagsMap 获取总产品数
      const totalProductsCount = Object.keys(window.productTagsMap).length;
      
      // 更新"All"标签的计数
      const allTagItem = document.querySelector('.collection-tag-filter-item[data-tag="all"]');
      if (allTagItem) {
        const countElement = allTagItem.querySelector('.tag-count');
        if (countElement) {
          countElement.textContent = ` (${totalProductsCount})`;
        }
        // 更新data-total-products属性
        allTagItem.setAttribute('data-total-products', totalProductsCount);
      }
      
      // 为每个标签计算准确的产品数量
      tagItems.forEach(tagItem => {
        const tagValue = tagItem.getAttribute('data-tag');
        const countElement = tagItem.querySelector('.tag-count');
        
        // 跳过"All"标签，因为我们已经处理过它
        if (tagValue === 'all') return;
        
        // 计算拥有此标签的产品数量
        let count = 0;
        for (const [productTitle, productTags] of Object.entries(window.productTagsMap)) {
          if (productTags.includes(tagValue)) {
            count++;
          }
        }
        
        // 更新标签计数显示
        if (countElement) {
          countElement.textContent = ` (${count})`;
        }
      });
    } else {
      console.log('productTagsMap not available yet, using visible products for temporary tag counts');
      
      // 获取当前集合中的所有产品总数
      const totalProductsCount = document.querySelector('.collection-tag-filter-item[data-tag="all"]').getAttribute('data-total-products');

      tagItems.forEach(tagItem => {
        const tagValue = tagItem.getAttribute('data-tag');
        const countElement = tagItem.querySelector('.tag-count');
        
        if (tagValue === 'all') {
          // 对于"All"标签,显示collection.products_count的值
          if (countElement) {
            countElement.textContent = ` (${totalProductsCount})`;
          }
          return;
        }

        // 对于其他标签,临时计算包含该标签的页面上产品数量
        let count = 0;
        products.forEach(product => {
          const productTags = product.getAttribute('data-tags');
          if (productTags && productTags.includes(tagValue)) {
            count++;
          }
        });
        
        if (countElement) {
          countElement.textContent = ` (${count})`;
        }
      });
      
      // 等待 productTagsMap 加载后再次更新计数
      setTimeout(checkAndUpdateTagCounts, 500);
    }
  }
  
  // 检查productTagsMap并更新标签计数的辅助函数
  function checkAndUpdateTagCounts(attempts = 0) {
    if (window.productTagsMap && Object.keys(window.productTagsMap).length > 0) {
      updateTagCounts();
    } else if (attempts < 10) {  // 最多尝试10次，大约5秒
      setTimeout(() => checkAndUpdateTagCounts(attempts + 1), 500);
    }
  }

  // 更新分页显示
  function updatePagination(visibleProductCount) {
    console.log('Visible products:', visibleProductCount);
    
    // 如果没有选中的标签,保持默认分页显示
    if (selectedTags.length === 0) {
      paginationElements.forEach(element => {
        element.style.cssText = '';
      });
      return;
    }
    
    // 当有标签被选中时,根据可见产品数量控制分页显示
    const productsPerPage = 24; // 每页显示的产品数量
    
    // 检查分页类型并相应处理
    paginationElements.forEach(element => {
      if (visibleProductCount <= productsPerPage) {
        // 如果产品数量小于等于每页显示数量，隐藏所有分页相关元素
        element.style.cssText = 'display: none !important; visibility: hidden !important; height: 0 !important; overflow: hidden !important; margin: 0 !important; padding: 0 !important;';
      } else {
        // 如果产品数量大于每页显示数量，显示分页
        element.style.cssText = '';
      }
    });

    // 更新 data-paginate-items 属性
    const paginateContainer = document.querySelector('[data-paginate-items]');
    if (paginateContainer) {
      paginateContainer.setAttribute('data-paginate-items', visibleProductCount.toString());
    }
  }
  

    


  // 修改handleTagChange函数
  function handleTagChange(tagItem, isChecked) {
    const tagValue = tagItem.getAttribute('data-tag');
    console.log('Tag clicked:', tagValue, 'Checked:', isChecked);
    
    // 移除所有虚拟产品
    document.querySelectorAll('.virtual-product').forEach(vp => vp.remove());

    if (tagValue === 'all') {
      selectedTags = [];
      products.forEach(product => {
        product.style.display = '';
      });
      // 恢复分页显示
      showPagination();
      return;
    }

    if (isChecked) {
      if (!selectedTags.includes(tagValue)) {
        selectedTags.push(tagValue);
      }
    } else {
      selectedTags = selectedTags.filter(tag => tag !== tagValue);
    }

    if (selectedTags.length === 0) {
      products.forEach(product => {
        product.style.display = '';
      });
      allTagCheckbox.checked = true;
      // 恢复分页显示
      showPagination();
      return;
    }

    // 隐藏分页器
    hidePagination();

    // 获取所有分页的产品容器
    const productContainer = document.querySelector('.collection-main-body-inner');
    if (!productContainer) return;

    // 获取当前URL和分页信息
    const currentUrl = window.location.href.split('?')[0];
    const totalProducts = parseInt(document.querySelector('.collection-tag-filter-item[data-tag="all"]').getAttribute('data-total-products'));
    const totalPages = Math.ceil(totalProducts / 24); // 假设每页24个产品

    // 显示加载指示器
    showLoadingIndicator();

    // 加载所有页面的产品
    Promise.all(Array.from({length: totalPages}, (_, i) => i + 1).map(page => {
      if (page === 1) {
        // 第一页的产品已经在页面上，直接处理它们
        return Promise.resolve(Array.from(products));
      }
      return fetch(`${currentUrl}?page=${page}&view=ajax`)
        .then(response => response.text())
        .then(html => {
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          return Array.from(doc.querySelectorAll('.grid__item.product-item-collection-tab'));
        });
    })).then(pagesProducts => {
      // 合并所有页面的产品
      const allProducts = pagesProducts.flat();
      
      // 过滤并显示匹配的产品
      allProducts.forEach(product => {
        const productTags = product.getAttribute('data-tags');
        const hasSelectedTag = selectedTags.some(tag => 
          productTags && productTags.includes(tag)
        );
        
        if (hasSelectedTag) {
          // 检查产品是否已经在页面上
          const productId = product.getAttribute('data-product-id');
          const existingProduct = productContainer.querySelector(`[data-product-id="${productId}"]`);
          
          if (!existingProduct) {
            // 如果产品不在页面上，添加它
            productContainer.appendChild(product.cloneNode(true));
          } else {
            // 如果产品已经在页面上，显示它
            existingProduct.style.display = '';
          }
        }
      });

      // 隐藏不匹配的产品
      products.forEach(product => {
        const productTags = product.getAttribute('data-tags');
        const hasSelectedTag = selectedTags.some(tag => 
          productTags && productTags.includes(tag)
        );
        product.style.display = hasSelectedTag ? '' : 'none';
      });

      // 移除加载指示器
      hideLoadingIndicator();
    }).catch(error => {
      console.error('Error loading products:', error);
      hideLoadingIndicator();
    });
  }

  // 辅助函数：隐藏分页
  function hidePagination() {
    paginationElements.forEach(element => {
      element.style.cssText = 'display: none !important';
    });
  }

  // 辅助函数：显示分页
  function showPagination() {
    paginationElements.forEach(element => {
      element.style.cssText = '';
    });
  }

  // 添加加载指示器
  function showLoadingIndicator() {
    const existingLoader = document.querySelector('.collection-loader');
    if (!existingLoader) {
      const loader = document.createElement('div');
      loader.className = 'collection-loader';
      loader.innerHTML = `
        <div style="
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          background: rgba(255, 255, 255, 0.9);
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 0 10px rgba(0,0,0,0.1);
          z-index: 1000;
        ">
          <p>Loading products...</p>
        </div>
      `;
      document.body.appendChild(loader);
    }
  }

  // 移除加载指示器
  function hideLoadingIndicator() {
    const loader = document.querySelector('.collection-loader');
    if (loader) {
      loader.remove();
    }
  }

  // 处理标签点击
  tagItems.forEach(tagItem => {
    const checkbox = tagItem.querySelector('.custom-tag-checkbox');
    const label = tagItem.querySelector('.custom-tag-label');
    
    // 阻止标签点击的默认行为
    label.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      
      const isAllTag = tagItem.getAttribute('data-tag') === 'all';
      
      if (isAllTag) {
        // 如果点击"All"标签
        allTagCheckbox.checked = true;
        // 取消选中其他所有标签
        tagItems.forEach(item => {
          if (item.getAttribute('data-tag') !== 'all') {
            const cb = item.querySelector('.custom-tag-checkbox');
            if (cb) cb.checked = false;
          }
        });
        selectedTags = [];
      } else {
        // 如果点击其他标签
        checkbox.checked = !checkbox.checked;
        // 取消选中"All"标签
        allTagCheckbox.checked = false;
      }
      
      handleTagChange(tagItem, checkbox.checked);
      return false;
    });

    // 阻止复选框的默认行为
    checkbox.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      
      const isAllTag = tagItem.getAttribute('data-tag') === 'all';
      
      if (isAllTag) {
        this.checked = true;
        // 取消选中其他所有标签
        tagItems.forEach(item => {
          if (item.getAttribute('data-tag') !== 'all') {
            const cb = item.querySelector('.custom-tag-checkbox');
            if (cb) cb.checked = false;
          }
        });
        selectedTags = [];
      } else {
        this.checked = !this.checked;
        // 取消选中"All"标签
        allTagCheckbox.checked = false;
      }
      
      handleTagChange(tagItem, this.checked);
      return false;
    });
  });

  // 修改清除所有标签的功能
  const clearAllButton = document.querySelector('.js-facet-remove');
  if (clearAllButton) {
    clearAllButton.addEventListener('click', function(e) {
      if (e.target.classList.contains('active-facets__button')) {
        e.preventDefault();
        e.stopPropagation();
        
        // 移除所有虚拟产品
        document.querySelectorAll('.virtual-product').forEach(vp => vp.remove());
        
        selectedTags = [];
        tagItems.forEach(tagItem => {
          const checkbox = tagItem.querySelector('.custom-tag-checkbox');
          if (tagItem.getAttribute('data-tag') === 'all') {
            checkbox.checked = true;
          } else {
            checkbox.checked = false;
          }
        });
        products.forEach(product => {
          product.style.display = '';
        });
        // 更新分页显示
        updatePagination(products.length);
        return false;
      }
    });
  }

  // 初始化标签计数和分页显示
  updateTagCounts();
  updatePagination(products.length);
});
</script>




<style>
.collection-tag-filter-item {
  cursor: pointer;
}
.custom-tag-checkbox {
  pointer-events: none;
}
.custom-tag-label {
  pointer-events: all;
  display: flex;
  align-items: center;
}
.tag-name {
  margin-right: 4px;
}
.tag-count {
  color: #666;
  font-size: 0.9em;
}
/* 强制隐藏分页器 */
.pagination-wrapper[style*="display: none"],
.pagination[style*="display: none"],
.pagination__item[style*="display: none"] {
  display: none !important;
  visibility: hidden !important;
  opacity: 0 !important;
  height: 0 !important;
  overflow: hidden !important;
  margin: 0 !important;
  padding: 0 !important;
}
</style>
